<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java线程池踩坑记，HashMap引发的血案</title>
      <link href="/2021/01/06/Java/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
      <url>/2021/01/06/Java/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%B8%A9%E5%9D%91%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>备注：本篇基于1.7或者1.6的jdk。</p></blockquote><p>由于为规范使用线程池导致生产环境出现了CPU使用率持续飙高，并且不下降，很诡异的是几十台服务器只有一台机器出现了问题，只能重启服务器解决，最后通过分析dump文件发现是因为在多线程环境下使用HashMap导致的。在此分享出来给大家共勉。</p><p>事情起因</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="comment">// 系统启动时，读取数据配置并初始化线程池</span></span><br><span class="line">  ThreadPoolExecutor poolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    <span class="number">10</span>,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    TimeUnit.SECONDS,</span><br><span class="line">    <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">  Map&lt;String, Integer&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  params.put(<span class="string">&quot;k1&quot;</span>, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模拟往线程池中put任务的情况</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">    poolExecutor.execute(() -&gt; &#123;</span><br><span class="line">      <span class="comment">// 对params进行频繁的putAll操作。</span></span><br><span class="line">      Map map = doSomething();</span><br><span class="line">      params.putAll(map);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭线程池</span></span><br><span class="line">  <span class="comment">//        poolExecutor.shutdown();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于在使用线程池时不规范，直接把<code>params</code>传入并且对这个<code>Map</code>频繁执行<code>putAll()</code>操作，导致链表发生死循环。忽视了<code>HashMap</code>最基本的特性，它是线程不安全的。</p><p>问题代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">params.putAll(map)</span><br></pre></td></tr></table></figure><p>这个链表死循环只有在特殊场景下才会触发，所以代码上线很久都没有出现问题，并且只是其中某台服务器出现问题。这种问题定位分析起来非常麻烦，不触发还好，触发了就只能等着死机重启。</p><p>在说明链表死循环之后，我们先来了解一下<code>HashMap</code>是一个什么数据结构。</p><p><img src="https://oscimg.oschina.net/oscnet/up-8e081ea7b6d10d2813bc84139bb45d1361b.png" alt="HashMap数据结构"></p><p>在<code>HashMap</code>内部，首先定义了一个数组，数组的元素类型是<code>Map.Entry</code> 对象，如下是源码的数组定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Entry&lt;K,V&gt;[] table</span><br></pre></td></tr></table></figure><p>对应到上图就是第一行所示。</p><ol><li><p>当调用<code>put(key, value)</code>方法时，首先使用<code>key</code>计算哈希值，然后再用得到的哈希值和数组长度取摸(hash % table.lenght)。得到的值就是数组的下标，然后把<code>value</code>放在下标对应的位置上。</p></li><li><p>如果有两个<code>key</code>计算得到的下标是一样，那么就会把新增的<code>value</code>以链表的方式连接到同一个下标位置上。比如上图的31,32。</p></li><li><p>当数组达到阈值（长度的0.75倍）时，就会发生扩容，把数组扩大为原来的2倍。比如上图数组长度是7，那么阈值就是5.25，取整后就是5。当1，2，3，4，5这几个位置都有元素了，在新增元素计算后的下标是6的情况，就会发送扩容。扩容时会新建一个数组，然后把元素复制到新的数组上。复制的过程会对每个<code>key</code>重新计算哈希值，再计算下标，因为数组长度变了，下标自然也会变。</p></li></ol><p>如果有新增的元素则循环往复执行上述3步。原理是比较简单的，在看下源码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">    <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">  <span class="comment">// 根据key计算哈希值</span></span><br><span class="line">  <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">  <span class="comment">// 通过哈希值和数组长度计算下标</span></span><br><span class="line">  <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">  <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">    Object k;</span><br><span class="line">    <span class="comment">// 对同一个key做更新，比如put(&#x27;k1&#x27;, 1)和put(&#x27;k1&#x27;, 2)，执行第二次put时</span></span><br><span class="line">    <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">      V oldValue = e.value;</span><br><span class="line">      e.value = value;</span><br><span class="line">      e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modCount++;</span><br><span class="line">  <span class="comment">// 下标对应的位置还没有元素，直接新增</span></span><br><span class="line">  addEntry(hash, key, value, i);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增元素"><a href="#新增元素" class="headerlink" title="新增元素"></a>新增元素</h3><p>新增元素时先判断是否需要扩容，如果不需要则直接新增，否则扩容再复制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 触发扩容</span></span><br><span class="line">  <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">    resize(<span class="number">2</span> * table.length);</span><br><span class="line">    hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">    bucketIndex = indexFor(hash, table.length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 新增</span></span><br><span class="line">  createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">  Entry[] oldTable = table;</span><br><span class="line">  <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">  <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">    threshold = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 创建新的数组</span></span><br><span class="line">  Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">  <span class="keyword">boolean</span> oldAltHashing = useAltHashing;</span><br><span class="line">  useAltHashing |= sun.misc.VM.isBooted() &amp;&amp;</span><br><span class="line">    (newCapacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);</span><br><span class="line">  <span class="keyword">boolean</span> rehash = oldAltHashing ^ useAltHashing;</span><br><span class="line">  transfer(newTable, rehash);</span><br><span class="line">  table = newTable;</span><br><span class="line">  threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复制数据到新数组"><a href="#复制数据到新数组" class="headerlink" title="复制数据到新数组"></a>复制数据到新数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 新数组长度</span></span><br><span class="line">  <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">  <span class="comment">// 遍历旧的数组</span></span><br><span class="line">  <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</span><br><span class="line">      Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">      <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">        e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 计算key在新数组的下标</span></span><br><span class="line">      <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">      <span class="comment">// 先把同一个位置的元素链接上，</span></span><br><span class="line">      e.next = newTable[i];</span><br><span class="line">      <span class="comment">// e放在数组上。</span></span><br><span class="line">      newTable[i] = e;</span><br><span class="line">      e = next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环链表触发的场景网上很多博文，我就不再重复了，找了一篇写的非常好的博客提供参考。</p><p>循环链表形成请移步：<a href="https://zhuanlan.zhihu.com/p/81587796">https://zhuanlan.zhihu.com/p/81587796</a></p><p>循环链表比较难理解，但是多线程环境下还有另外两个更加易发的问题：</p><ol><li><p>如果多个线程同时使用 put 方法添加元素，而且假设正好存在两个 put 的 key 发生了碰撞（根据 hash 值计算的 bucket 一样），那么根据 HashMap 的实现，这两个 key 会添加到数组的同一个位置，这样会导致后面执行的线程把前面线程的数据覆盖了。</p></li><li><p>如果多个线程同时检测到需要扩容，多个线程在同时进行扩容，都在重新计算元素位置以及复制数据，每个线程都会把新数组重新赋值 给<code>table</code>，同样的后面执行的线程把前面线程的数据覆盖，如果前面执行的线程往数组增加了新元素，那就直接被覆盖导致数据丢失。相比第一点来说第二点是直接整个数组覆盖。数据丢失风险更高。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring内置bean有哪些？</title>
      <link href="/2020/11/15/Spring/Spring%E5%86%85%E7%BD%AEbean%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/"/>
      <url>/2020/11/15/Spring/Spring%E5%86%85%E7%BD%AEbean%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>Spring框架内置了很多功能强大的bean，比如：</p><p>org.springframework.context.annotation.internalConfigurationAnnotationProcessor</p><p>org.springframework.context.event.internalEventListenerFactory</p><p>org.springframework.context.event.internalEventListenerProcessor</p><p>org.springframework.context.annotation.internalAutowiredAnnotationProcessor</p><p>org.springframework.context.annotation.internalCommonAnnotationProcessor</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程池ThreadPoolExecutor你真的搞懂了吗</title>
      <link href="/2020/11/13/Java/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0ThreadPoolExecutor%E4%BD%A0%E7%9C%9F%E7%9A%84%E6%90%9E%E6%87%82%E4%BA%86%E5%90%97/"/>
      <url>/2020/11/13/Java/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0ThreadPoolExecutor%E4%BD%A0%E7%9C%9F%E7%9A%84%E6%90%9E%E6%87%82%E4%BA%86%E5%90%97/</url>
      
        <content type="html"><![CDATA[<p>线程池是一个在高并场景非常常用的技术。但是其中的奥秘你是否有真的了解过。比如线程池中的默认线程数和最大线程数是什么关系？缓存对象又是如何使用的？</p><p>通过一个简单的示例把线程池整明白了。自定义一个线程池，并且设置一个有界的缓冲队列；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadPoolExecutor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 线程池维护线程的最少数量</span></span><br><span class="line">        <span class="keyword">int</span> corePoolSize = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 线程池维护线程的最大数量</span></span><br><span class="line">        <span class="keyword">int</span> maximumPoolSize = <span class="number">4</span>;</span><br><span class="line">        <span class="comment">// 线程池维护线程所允许的空闲时间的单位</span></span><br><span class="line">        <span class="comment">// TimeUnit.SECONDS</span></span><br><span class="line">        <span class="comment">// 线程池维护所允许的空闲时间</span></span><br><span class="line">        <span class="keyword">long</span> keepAliveTime = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 线程池所使用的缓存队列，当任务达到最大线程数时会把任务放在缓冲队列中，然后有空的线程会逐个执行里面的任务</span></span><br><span class="line">        <span class="keyword">int</span> workQueueSize = <span class="number">47</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 处理任务的优先级为：核心线程corePoolSize、任务队列workQueue、最大线程maximumPoolSize，如果三者都满了</span></span><br><span class="line"><span class="comment">         * 使用handler处理被拒绝的任务</span></span><br><span class="line"><span class="comment">         * corePoolSize -&gt; workQueueSize -&gt; maximumPoolSize</span></span><br><span class="line"><span class="comment">         *  一开始启动，线程池有两个线程可以接收并处理任务，但是任务比较耗时一下子就来了很多任务，导致2个线程无法满足，</span></span><br><span class="line"><span class="comment">         *  然后会把任务放在缓冲队列中，但是如果任务量还在继续增加，并且两个线程消化任务比新增任务还慢。</span></span><br><span class="line"><span class="comment">         *  如果corePoolSize &lt;= maximumPoolSize就会创建新的线程接收任务，创建的最大数量就是maximumPoolSize。</span></span><br><span class="line"><span class="comment">         *  于是就有了4个线程在接收任务（默认的两个+新创建的2个）。</span></span><br><span class="line"><span class="comment">         * 此时基本已经到达了临界点，4个线程在连续不断的处理任务。</span></span><br><span class="line"><span class="comment">         * 如果任务量太大，并且每个任务都处理很耗时（处理完一个就从缓冲队列拿走一个，队列元素数量也就减1）。导致缓冲队列也满了。</span></span><br><span class="line"><span class="comment">         * 这种情况下就会抛出拒绝任务异常java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution（这个是默认的拒绝异常）</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 验证：</span></span><br><span class="line"><span class="comment">         * 1. 缓冲队列设置比较小，比如workQueueSize=5时，很容易就出现任务拒绝异常</span></span><br><span class="line"><span class="comment">         * 2. 如果直接设置缓冲队列workQueueSize=50，肯定不会有问题。所有任务都可以放到缓冲队列中，等待线程池中的线程来处理即可。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 定义一个线程池</span></span><br><span class="line">        ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                corePoolSize,</span><br><span class="line">                maximumPoolSize,</span><br><span class="line">                keepAliveTime,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="comment">// ArrayBlockingQueue是有界的缓冲队列</span></span><br><span class="line">                <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(workQueueSize));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">                <span class="keyword">int</span> task = i;</span><br><span class="line">                executor.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在执行任务：\t&quot;</span> + task);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                System.out.println(<span class="string">&quot;getActiveCount = &quot;</span> + executor.getActiveCount());</span><br><span class="line">                System.out.println(<span class="string">&quot;getTaskCount = &quot;</span> + executor.getTaskCount());</span><br><span class="line">                System.out.println(<span class="string">&quot;getCompletedTaskCount = &quot;</span> + executor.getCompletedTaskCount());</span><br><span class="line">                System.out.println(<span class="string">&quot;getMaximumPoolSize = &quot;</span> + executor.getMaximumPoolSize());</span><br><span class="line">                System.out.println(<span class="string">&quot;workQueueSize = &quot;</span> + executor.getQueue().size());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;任务队列已经满，任务被拒绝：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心参数：<br><code>corePoolSize</code>，线程池默认存活的线程数，或者说是最小的线程数<br><code>maximumPoolSize</code>，线程池中可以创建的最大线程数，或者说是线程池中线程数上限<br><code>workQueueSize</code>，缓冲队列上限</p><p><strong>处理任务的优先级为：核心线程corePoolSize处理任务、任务队列workQueue、最大线程maximumPoolSize，如果三者都满了使用handler处理被拒绝的任务。</strong></p><p> 一开始启动，线程池有两个线程可以接收并处理任务，但是任务比较耗时一下子就来了很多任务，导致2个线程无法满足，然后会把任务放在缓冲队列中，但是如果任务量还在继续增加，并且两个线程消化任务比新增任务还慢。如果 <code>corePoolSize &lt;= maximumPoolSize</code>就会创建新的线程接收任务，创建的最大数量就是<code>maximumPoolSize</code>。于是就有了4个线程在接收任务（默认的两个+新创建的2个）。<br>此时基本已经到达了临界点，4个线程在连续不断的处理任务。<br>如果任务量太大，并且每个任务都处理很耗时（处理完一个就从缓冲队列拿走一个，队列元素数量也就减1）。导致缓冲队列也满了。<br>这种情况下就会抛出拒绝任务异常<code>java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution</code>（这个是默认的拒绝异常）</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ol><li>缓冲队列设置比较小，比如workQueueSize=5时，很容易就出现任务拒绝异常</li><li>如果直接设置缓冲队列workQueueSize=50，肯定不会有问题。所有任务都可以放到缓冲队列中，等待线程池中的线程来处理即可。</li></ol><p>workQueueSize=5的运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">i = 1</span><br><span class="line">pool-1-thread-1在执行任务：    1</span><br><span class="line">getActiveCount = 1</span><br><span class="line">getTaskCount = 1</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 0</span><br><span class="line">i = 2</span><br><span class="line">getActiveCount = 2</span><br><span class="line">getTaskCount = 2</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">pool-1-thread-2在执行任务：    2</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 0</span><br><span class="line">i = 3</span><br><span class="line">getActiveCount = 2</span><br><span class="line">getTaskCount = 3</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 1</span><br><span class="line">i = 4</span><br><span class="line">getActiveCount = 2</span><br><span class="line">getTaskCount = 4</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 2</span><br><span class="line">i = 5</span><br><span class="line">getActiveCount = 2</span><br><span class="line">getTaskCount = 5</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 3</span><br><span class="line">i = 6</span><br><span class="line">getActiveCount = 2</span><br><span class="line">getTaskCount = 6</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 4</span><br><span class="line">i = 7</span><br><span class="line">getActiveCount = 2</span><br><span class="line">getTaskCount = 7</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 5</span><br><span class="line">i = 8</span><br><span class="line">getActiveCount = 3</span><br><span class="line">getTaskCount = 8</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 5</span><br><span class="line">i = 9</span><br><span class="line">pool-1-thread-3在执行任务：    8</span><br><span class="line">pool-1-thread-4在执行任务：    9</span><br><span class="line">getActiveCount = 4</span><br><span class="line">getTaskCount = 9</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 5</span><br><span class="line">i = 10</span><br><span class="line">i = 11</span><br><span class="line">i = 12</span><br><span class="line">i = 13</span><br><span class="line">i = 14</span><br><span class="line">i = 15</span><br><span class="line">i = 16</span><br><span class="line">i = 17</span><br><span class="line">i = 18</span><br><span class="line">i = 19</span><br><span class="line">i = 20</span><br><span class="line">pool-1-thread-1在执行任务：    3</span><br><span class="line">i = 21</span><br><span class="line">getActiveCount = 4</span><br><span class="line">getTaskCount = 10</span><br><span class="line">getCompletedTaskCount = 1</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 5</span><br><span class="line">i = 22</span><br><span class="line">i = 23</span><br><span class="line">pool-1-thread-2在执行任务：    4</span><br><span class="line">i = 24</span><br><span class="line">getActiveCount = 4</span><br><span class="line">getTaskCount = 11</span><br><span class="line">getCompletedTaskCount = 2</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 5</span><br><span class="line">i = 25</span><br><span class="line">i = 26</span><br><span class="line">i = 27</span><br><span class="line">i = 28</span><br><span class="line">i = 29</span><br><span class="line">i = 30</span><br><span class="line">i = 31</span><br><span class="line">i = 32</span><br><span class="line">i = 33</span><br><span class="line">pool-1-thread-4在执行任务：    5</span><br><span class="line">pool-1-thread-3在执行任务：    6</span><br><span class="line">i = 34</span><br><span class="line">getActiveCount = 4</span><br><span class="line">getTaskCount = 12</span><br><span class="line">getCompletedTaskCount = 4</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 4</span><br><span class="line">i = 35</span><br><span class="line">getActiveCount = 4</span><br><span class="line">getTaskCount = 13</span><br><span class="line">getCompletedTaskCount = 4</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 5</span><br><span class="line">i = 36</span><br><span class="line">i = 37</span><br><span class="line">i = 38</span><br><span class="line">i = 39</span><br><span class="line">i = 40</span><br><span class="line">i = 41</span><br><span class="line">i = 42</span><br><span class="line">i = 43</span><br><span class="line">pool-1-thread-1在执行任务：    7</span><br><span class="line">getActiveCount = 4</span><br><span class="line">pool-1-thread-2在执行任务：    21</span><br><span class="line">getTaskCount = 14</span><br><span class="line">getCompletedTaskCount = 6</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 4</span><br><span class="line">i = 44</span><br><span class="line">getActiveCount = 4</span><br><span class="line">getTaskCount = 15</span><br><span class="line">getCompletedTaskCount = 6</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 5</span><br><span class="line">i = 45</span><br><span class="line">pool-1-thread-4在执行任务：    24</span><br><span class="line">pool-1-thread-3在执行任务：    34</span><br><span class="line">i = 46</span><br><span class="line">getActiveCount = 4</span><br><span class="line">getTaskCount = 16</span><br><span class="line">getCompletedTaskCount = 8</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 4</span><br><span class="line">i = 47</span><br><span class="line">getActiveCount = 4</span><br><span class="line">getTaskCount = 17</span><br><span class="line">getCompletedTaskCount = 8</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 5</span><br><span class="line">i = 48</span><br><span class="line">pool-1-thread-1在执行任务：    35</span><br><span class="line">i = 49</span><br><span class="line">getActiveCount = 4</span><br><span class="line">getTaskCount = 18</span><br><span class="line">getCompletedTaskCount = 9</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 5</span><br><span class="line">i = 50</span><br><span class="line">pool-1-thread-2在执行任务：    43</span><br><span class="line">pool-1-thread-4在执行任务：    44</span><br><span class="line">pool-1-thread-3在执行任务：    46</span><br><span class="line">pool-1-thread-1在执行任务：    47</span><br><span class="line">pool-1-thread-2在执行任务：    49</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 5s</span><br><span class="line">35 actionable tasks: 2 executed, 33 up-to-date</span><br><span class="line">任务队列已经满，任务被拒绝：Task com.ubuntuvim.spring.thread.MyThreadPoolExecutor$$Lambda$1/142257191@7229724f rejected from java.util.concurrent.ThreadPoolExecutor@4c873330[Running, pool size = 4, active threads = 4, queued tasks = 5, completed tasks = 0]</span><br><span class="line">任务队列已经满，任务被拒绝：Task com.ubuntuvim.spring.thread.MyThreadPoolExecutor$$Lambda$1/142257191@119d7047 rejected from java.util.concurrent.ThreadPoolExecutor@4c873330[Running, pool size = 4, active threads = 4, queued tasks = 5, completed tasks = 0]</span><br><span class="line">任务队列已经满，任务被拒绝：Task</span><br><span class="line">// ………… 省略部分日志</span><br><span class="line">任务队列已经满，任务被拒绝：Task com.ubuntuvim.spring.thread.MyThreadPoolExecutor$$Lambda$1/142257191@5f184fc6 rejected from java.util.concurrent.ThreadPoolExecutor@4c873330[Running, pool size = 4, active threads = 4, queued tasks = 5, completed tasks = 8]</span><br><span class="line">任务队列已经满，任务被拒绝：Task com.ubuntuvim.spring.thread.MyThreadPoolExecutor$$Lambda$1/142257191@3feba861 rejected from java.util.concurrent.ThreadPoolExecutor@4c873330[Running, pool size = 4, active threads = 4, queued tasks = 5, completed tasks = 9]</span><br><span class="line">下午2:38:53: Task execution finished &#x27;MyThreadPoolExecutor.main()&#x27;.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从运行结果上看，只有少数几个人能执行成功，其他的任务都被直接拒绝了。</p><p>workQueueSize=50的运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> Task :<span class="built_in">test</span>-env:MyThreadPoolExecutor.main()</span></span><br><span class="line">i = 1</span><br><span class="line">pool-1-thread-1在执行任务：    1</span><br><span class="line">getActiveCount = 1</span><br><span class="line">getTaskCount = 1</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 0</span><br><span class="line">i = 2</span><br><span class="line">getActiveCount = 2</span><br><span class="line">getTaskCount = 2</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">pool-1-thread-2在执行任务：    2</span><br><span class="line">workQueueSize = 0</span><br><span class="line">i = 3</span><br><span class="line">getActiveCount = 2</span><br><span class="line">getTaskCount = 3</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 1</span><br><span class="line">i = 4</span><br><span class="line">getActiveCount = 2</span><br><span class="line">getTaskCount = 4</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 2</span><br><span class="line">// 省略类似中间日志</span><br><span class="line">i = 47</span><br><span class="line">getActiveCount = 2</span><br><span class="line">getTaskCount = 47</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 45</span><br><span class="line">i = 48</span><br><span class="line">getActiveCount = 2</span><br><span class="line">getTaskCount = 48</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 46</span><br><span class="line">i = 49</span><br><span class="line">getActiveCount = 2</span><br><span class="line">getTaskCount = 49</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 47</span><br><span class="line">i = 50</span><br><span class="line">getActiveCount = 2</span><br><span class="line">getTaskCount = 50</span><br><span class="line">getCompletedTaskCount = 0</span><br><span class="line">getMaximumPoolSize = 4</span><br><span class="line">workQueueSize = 48</span><br><span class="line">pool-1-thread-1在执行任务：    3</span><br><span class="line">pool-1-thread-2在执行任务：    4</span><br><span class="line">pool-1-thread-2在执行任务：    5</span><br><span class="line">pool-1-thread-1在执行任务：    6</span><br><span class="line">pool-1-thread-1在执行任务：    7</span><br><span class="line">pool-1-thread-2在执行任务：    8</span><br><span class="line">pool-1-thread-1在执行任务：    9</span><br><span class="line">// ………… 省略中间的日志</span><br><span class="line">pool-1-thread-2在执行任务：    47</span><br><span class="line">pool-1-thread-1在执行任务：    48</span><br><span class="line">pool-1-thread-2在执行任务：    50</span><br><span class="line">pool-1-thread-1在执行任务：    49</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 56s</span><br><span class="line">35 actionable tasks: 2 executed, 33 up-to-date</span><br><span class="line">下午11:32:38: Task execution finished &#x27;MyThreadPoolExecutor.main()&#x27;.</span><br></pre></td></tr></table></figure><p>从两次运行日志可以分析出线程池是怎么运行的。</p><ol><li><p>第一种情况，缓冲队列比较小，并且任务数比缓冲队列大的多。</p><p> 此情况缓存队列比较小，并且每个任务都很耗时，导致队列也装不下。然后新开了2个线程，一共4个线程连续处理任务。但是让人处理不完，只能把新增的任务拒绝掉。此时任务还在一直往里添加，4个线程也一直在处理任务。当有任务处理完了，就会又接收新任务。所以从日志可以看出来，并不是在第一次出现拒绝异常就不在接收新任务。</p></li><li><p>第二种情况，直接定义一个比较大缓冲队列，这个队列可以容纳所有的任务</p><p> 首先看前面三次运行日志：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">i &#x3D; 1</span><br><span class="line">pool-1-thread-1在执行任务：    1</span><br><span class="line">getActiveCount &#x3D; 1</span><br><span class="line">getTaskCount &#x3D; 1</span><br><span class="line">getCompletedTaskCount &#x3D; 0</span><br><span class="line">getMaximumPoolSize &#x3D; 4</span><br><span class="line">workQueueSize &#x3D; 0</span><br><span class="line">i &#x3D; 2</span><br><span class="line">getActiveCount &#x3D; 2</span><br><span class="line">getTaskCount &#x3D; 2</span><br><span class="line">getCompletedTaskCount &#x3D; 0</span><br><span class="line">getMaximumPoolSize &#x3D; 4</span><br><span class="line">pool-1-thread-2在执行任务：    2</span><br><span class="line">workQueueSize &#x3D; 0</span><br><span class="line">i &#x3D; 3</span><br><span class="line">getActiveCount &#x3D; 2</span><br><span class="line">getTaskCount &#x3D; 3</span><br><span class="line">getCompletedTaskCount &#x3D; 0</span><br><span class="line">getMaximumPoolSize &#x3D; 4</span><br><span class="line">workQueueSize &#x3D; 1</span><br></pre></td></tr></table></figure><p> <code>i = 1</code>和<code>i = 2</code>的时候，队列是空的。因为此时有两个核心线程，刚好可以接受并处理2个任务。所以不需要缓冲。</p><p> <code>i = 3</code>的时候，由于前面两个任务还没处理完成（因为在任务中手动加了休眠，模拟耗时）。此时也没有空余的线程可以接受任务。所以只能缓存到队列中，此时<code>workQueueSize = 1</code>。</p><p> <code>i = 50</code>的时候，由于队列设置的是50，可以容纳所有的任务。不需要创建新的线程来处理，并且也没有设置任务的超时时间。所以只要等待两个核心线程慢慢处理任务即可。从最后一个日志可以看出来<code>workQueueSize = 48</code>和<code>getActiveCount = 2</code>是符合预期的。一个是队列大小，一个是线程大小。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getActiveCount &#x3D; 2</span><br><span class="line">getTaskCount &#x3D; 50</span><br><span class="line">getCompletedTaskCount &#x3D; 0</span><br><span class="line">getMaximumPoolSize &#x3D; 4</span><br><span class="line">workQueueSize &#x3D; 48</span><br></pre></td></tr></table></figure><p>我们再把<code>workQueueSize</code>改成47，预期效果是<code>getActiveCount</code>3，运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">i &#x3D; 1</span><br><span class="line">pool-1-thread-1在执行任务：    1</span><br><span class="line">getActiveCount &#x3D; 1</span><br><span class="line">getTaskCount &#x3D; 1</span><br><span class="line">getCompletedTaskCount &#x3D; 0</span><br><span class="line">getMaximumPoolSize &#x3D; 4</span><br><span class="line">workQueueSize &#x3D; 0</span><br><span class="line">i &#x3D; 2</span><br><span class="line">getActiveCount &#x3D; 2</span><br><span class="line">getTaskCount &#x3D; 2</span><br><span class="line">getCompletedTaskCount &#x3D; 0</span><br><span class="line">getMaximumPoolSize &#x3D; 4</span><br><span class="line">workQueueSize &#x3D; 0</span><br><span class="line">i &#x3D; 3</span><br><span class="line">getActiveCount &#x3D; 2</span><br><span class="line">pool-1-thread-2在执行任务：    2</span><br><span class="line">getTaskCount &#x3D; 3</span><br><span class="line">getCompletedTaskCount &#x3D; 0</span><br><span class="line">getMaximumPoolSize &#x3D; 4</span><br><span class="line">workQueueSize &#x3D; 1</span><br><span class="line">i &#x3D; 4</span><br><span class="line">getActiveCount &#x3D; 2</span><br><span class="line">getTaskCount &#x3D; 4</span><br><span class="line">getCompletedTaskCount &#x3D; 0</span><br><span class="line">getMaximumPoolSize &#x3D; 4</span><br><span class="line">workQueueSize &#x3D; 2</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 省略部分类似日志</span><br><span class="line"></span><br><span class="line">i &#x3D; 49</span><br><span class="line">getActiveCount &#x3D; 2</span><br><span class="line">getTaskCount &#x3D; 49</span><br><span class="line">getCompletedTaskCount &#x3D; 0</span><br><span class="line">getMaximumPoolSize &#x3D; 4</span><br><span class="line">workQueueSize &#x3D; 47</span><br><span class="line">i &#x3D; 50</span><br><span class="line">getActiveCount &#x3D; 3</span><br><span class="line">getTaskCount &#x3D; 50</span><br><span class="line">getCompletedTaskCount &#x3D; 0</span><br><span class="line">getMaximumPoolSize &#x3D; 4</span><br><span class="line">workQueueSize &#x3D; 47</span><br></pre></td></tr></table></figure><p>从运行结果看，是符合预期的。由于队列容纳不下50个任务，只能新开一个线程处理任务，所以<code>getActiveCount = 3</code>，并且三个线程是可以处理完50个任务，所以没有出现任务拒绝的情况。</p><p>最后再回顾一下前面的要点：</p><p>处理任务的优先级为：核心线程<code>corePoolSize</code>处理任务、任务队列<code>workQueue</code>、最大线程<code>maximumPoolSize</code>，如果三者都满了使用handler处理被拒绝的任务。</p><p>也就是说先用默认的线程数处理任务，处理不过来则放在缓冲队列中，任务排队处理。处理不过来则创建新的线程帮忙处理，如果还是处理不完，直接把新增的任务拒绝掉。</p><p>那么是不是只要设置队列足够大就可以了呢？当然不是，队列设置越大占用CPU、内存也越高，一台机器的硬件资源是固定的，整个程序运行期都需要CPU和内存，不能把资源都给了你这一个线程池使用，那么肯定会影响其他程序的运行。</p><p>核心线程<code>corePoolSize</code>处理任务、任务队列<code>workQueue</code>、最大线程<code>maximumPoolSize</code>这三个参数要根据机器硬件和任务耗时的情况做调整。</p><p>如果你的任务运行很快，队列可以适当调整大一些，避免任务被拒绝，最大线程数不用设置太大，和CPU核数一致就差不多了。</p><p>如果你的任务比较耗时，那么最大线程数就可以适当调整大一下，加大任务的并行数量，提高吞吐。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring销毁回调方法</title>
      <link href="/2020/11/10/Spring/Spring%E9%94%80%E6%AF%81%E5%9B%9E%E8%B0%83/"/>
      <url>/2020/11/10/Spring/Spring%E9%94%80%E6%AF%81%E5%9B%9E%E8%B0%83/</url>
      
        <content type="html"><![CDATA[<p>接着前篇，有初始化对应着就有销毁。Spring提供了多种方式的销毁回调方法，这些方法在手动关闭容器的时候就会触发。</p><p>销毁回调方式：</p><ol><li>后置处理器<code>DestructionAwareBeanPostProcessor</code>的<code>postProcessBeforeDestruction()</code>方法，此方式是对所有bean有效</li><li>在类方法上使用<code>@PreDestroy</code>注解</li><li>实现接口<code>DisposableBean</code>的<code>destory()</code>方法</li><li>自定义回调方法，<code>@Bean(destroyMethod = &quot;beanDestoryCallbackMethod&quot;)</code></li><li>实现<code>AutoCloseable</code>接口或者<code>Closeable</code>接口的bean（当且仅当此bean没有任何自定义销毁回调，也就是说此bean没有使用前面的2，3，4这三种方式）</li></ol><p>仍然按照前篇的思路，先演示，再提疑问，再读源码。</p><h3 id="演示案例"><a href="#演示案例" class="headerlink" title="演示案例"></a>演示案例</h3><p>自定义一个实现前面四种方式中的后三种方式的bean，实现<code>DisposableBean</code>接口，在bean中使用<code>@PreDestory</code>注解。然后在注入容器的时候使用<code>@Bean</code>注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.createbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.AbstractApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 和InitCallbackBean是相互呼应的，有销毁回调对应着就有销毁的回调。</span></span><br><span class="line"><span class="comment"> * 验证各种销毁回调方法的执行顺序：</span></span><br><span class="line"><span class="comment"> * 1. 执行销毁回调DestructionAwareBeanPostProcessor.postProcessBeforeDestruction()方法</span></span><br><span class="line"><span class="comment"> * 2. 执行销毁回调<span class="doctag">@PreDestroy</span>注解的回调方法twoDestroy()</span></span><br><span class="line"><span class="comment"> * 3. 执行销毁回调<span class="doctag">@PreDestroy</span>注解的回调方法oneDestroy()</span></span><br><span class="line"><span class="comment"> * 4. 执行销毁回调DisposableBean.destory()方法</span></span><br><span class="line"><span class="comment"> * 5. 执行销毁回调<span class="doctag">@Bean</span>(destroyMethod = &quot;beanDestoryCallbackMethod&quot;)的方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 需要注意的是，这些销毁的回调方法需要手动调用容器的关闭方法才会触发。触发方法如下：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> AbstractApplicationContext#close()</span></span><br><span class="line"><span class="comment"> * 最终会调用到这个类的方法处理上述回调接口。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> DisposableBeanAdapter#destroy()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/18 下午5:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DestoryCallbackBean</span> <span class="keyword">implements</span> <span class="title">DisposableBean</span>, /*<span class="title">Closeable</span>, */<span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现DisposableBean接口的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行销毁回调DisposableBean.destory()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义销毁方法：@Bean(destroyMethod = &quot;beanDestoryCallbackMethod&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">beanDestoryCallbackMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行销毁回调@Bean(destroyMethod = \&quot;beanDestoryCallbackMethod\&quot;)的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果有一个同名销毁方法会不会被读取使用？？不会，因为@Bean只支持无参方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">beanDestoryCallbackMethod</span><span class="params">(Fruit apple)</span> </span>&#123;</span><br><span class="line">        apple.eatable();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行销毁回调@Bean(destroyMethod = \&quot;beanDestoryCallbackMethod\&quot;)的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果一个类中有两个方法都使用了<span class="doctag">@PreDestory</span>注解会怎么执行？</span></span><br><span class="line"><span class="comment">     * 都会执行，执行代码：</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> DefaultSingletonBeanRegistry#destroySingletons()</span></span><br><span class="line"><span class="comment">     * 但是如果DispoableBean的destory()方法也使用了<span class="doctag">@PreDestory</span>注解则只会执行一次。</span></span><br><span class="line"><span class="comment">     * 这个和初始化的InitializingBean.afterPropertiesSet()方法类似，只会执行一次。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">twoDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行销毁回调@PreDestroy注解的回调方法twoDestroy()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">oneDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行销毁回调@PreDestroy注解的回调方法oneDestroy()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现接口AutoCloseable的方法。</span></span><br><span class="line"><span class="comment">     * bean没有实现任何销毁回调，也没有在<span class="doctag">@Bean</span>中自定义任何销毁方法下，当容器执行close事件时此方法会被执行。</span></span><br><span class="line"><span class="comment">     * 比如SimpleDestoryBean类的例子。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行销毁回调Closeable.close()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行销毁回调shutdown()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种默认的回调，就是实现<code>AutoCloseable</code>接口或者<code>Closeable</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.createbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前bean既不实现DispoableBean接口，也没有自定义的销毁方法</span></span><br><span class="line"><span class="comment"> * 但是有一个AutoCloseable.close()方法，验证容器关闭时是否会回调AutoCloseable.close()方法。</span></span><br><span class="line"><span class="comment"> * 实现Closeable接口也是同样的效果。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/18 下午10:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDestoryBean</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;既不实现DispoableBean接口，也没有自定义的销毁方法的情况下执行最后默认的AutoCloseable.close方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义一个后置处理器，实现<code>DestructionAwareBeanPostProcessor</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义销毁回调的后置处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/18 下午5:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDestructionAwareBeanPostProcessorImpl</span> <span class="keyword">implements</span> <span class="title">DestructionAwareBeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeforeDestruction</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;DestoryCallbackBean&quot;</span>.equalsIgnoreCase(beanName))</span><br><span class="line">            System.out.println(<span class="string">&quot;执行销毁回调DestructionAwareBeanPostProcessor.postProcessBeforeDestruction()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">requiresDestruction</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 返回true，表示需要执行销毁回调方法postProcessBeforeDestruction()</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，通过<code>@Bean</code>注入到容器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.createbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/17 下午4:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(destroyMethod = &quot;beanDestoryCallbackMethod&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DestoryCallbackBean <span class="title">destoryCallbackBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DestoryCallbackBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行案例;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.createbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.RootBeanDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.AbstractApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/17 下午4:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateBeanTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(Config.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行各种销毁回调</span></span><br><span class="line">        applicationContext.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>applicationContext.close();</code>这句代码非常关键，必须要手动关闭容器才会触发销毁回调的执行</strong>。你可以把这行代码注释掉在运行，注释掉之后不会打印如下的日志。即使是后置处理器接口也不会执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">执行销毁回调DestructionAwareBeanPostProcessor.postProcessBeforeDestruction()方法</span><br><span class="line">执行销毁回调@PreDestroy注解的回调方法oneDestroy()</span><br><span class="line">执行销毁回调@PreDestroy注解的回调方法twoDestroy()</span><br><span class="line">执行销毁回调DisposableBean.destory()方法</span><br><span class="line">执行销毁回调@Bean(destroyMethod = &quot;beanDestoryCallbackMethod&quot;)的方法</span><br><span class="line">既不实现DispoableBean接口，也没有自定义的销毁方法的情况下执行最后默认的AutoCloseable.close方法</span><br></pre></td></tr></table></figure><h3 id="Spring源码"><a href="#Spring源码" class="headerlink" title="Spring源码"></a>Spring源码</h3><p>接下来，我们从Spring源码入手，看看这些回调是在什么地方执行的。首先在<code>main</code>方法中的<code>close</code>方法上打个断点，然后用debug方式运行<code>main</code>方法。</p><p>进入到<code>close()</code>方法的逻辑里面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">    doClose();</span><br><span class="line">    <span class="comment">// If we registered a JVM shutdown hook, we don&#x27;t need it anymore now:</span></span><br><span class="line">    <span class="comment">// We&#x27;ve already explicitly closed the context.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.shutdownHook != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Runtime.getRuntime().removeShutdownHook(<span class="keyword">this</span>.shutdownHook);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">        <span class="comment">// ignore - VM is already shutting down</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照Spring框架的尿性，不用想，具体处理逻辑肯定是在<code>doClose()</code>里面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Check whether an actual close attempt is necessary...</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.active.get() &amp;&amp; <span class="keyword">this</span>.closed.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">&quot;Closing &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LiveBeansView.unregisterApplicationContext(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Publish shutdown event.</span></span><br><span class="line">      <span class="comment">// 发布容器关闭事件，任何监听ContextClosedEvent事件的监听器都可以收到一条消息</span></span><br><span class="line">      publishEvent(<span class="keyword">new</span> ContextClosedEvent(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      logger.warn(<span class="string">&quot;Exception thrown from ApplicationListener handling ContextClosedEvent&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stop all Lifecycle beans, to avoid delays during individual destruction.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.lifecycleProcessor != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.lifecycleProcessor.onClose();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;Exception thrown from LifecycleProcessor on context close&quot;</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Destroy all cached singletons in the context&#x27;s BeanFactory.</span></span><br><span class="line">    <span class="comment">// 这个方法里面会执行自定义的销毁方法（@Bean），实现DisposableBean接口的方法，</span></span><br><span class="line">    <span class="comment">// 以及InitDestroyAnnotationBeanPostProcessor#postProcessBeforeDestruction方法</span></span><br><span class="line">    destroyBeans();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Close the state of this context itself.</span></span><br><span class="line">    <span class="comment">// 设置容器上下文状态，</span></span><br><span class="line">    closeBeanFactory();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Let subclasses do some final clean-up if they wish...</span></span><br><span class="line">    <span class="comment">// 留给子类实现的自定义销毁逻辑</span></span><br><span class="line">    onClose();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset local application listeners to pre-refresh state.</span></span><br><span class="line">    <span class="comment">// 清理事件监听</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.earlyApplicationListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.applicationListeners.clear();</span><br><span class="line">      <span class="keyword">this</span>.applicationListeners.addAll(<span class="keyword">this</span>.earlyApplicationListeners);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Switch to inactive.</span></span><br><span class="line">    <span class="comment">// 设置容器状态为关闭</span></span><br><span class="line">    <span class="keyword">this</span>.active.set(<span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法做的事情很多，主要有：触发所有bean的销毁回调、发布关闭事件、执行bean的生命周期关闭方法、设置容器的状态为关闭、执行销毁的后置处理器。</p><p>本篇重点关注的是<code>destroyBeans()</code>方法。这个方法里面会执行自定义的销毁方法，<code>@PreDestory</code>注释的方法，后置处理器的<code>postProcessBeforeDestruction()</code>方法。</p><p>进入<code>destoryBeans()</code>方法后，发现这还不是最后的执行逻辑，这个方法又交给<code>DefaultListableBeanFactory</code>的<code>destroySingletons()</code>方法处理。</p><p>进入<code>destorySingletons()</code>方法后，发现还不是最好的执行逻辑，它的实现是调用父类的同名方法，继续进入它父类同名方法。<code>DefaultSingletonBeanRegistry</code>的<code>destroySingletons()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultSingletonBeanRegistry的destroySingletons()方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroySingletons</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">    logger.trace(<span class="string">&quot;Destroying singletons in &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">    <span class="keyword">this</span>.singletonsCurrentlyInDestruction = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  String[] disposableBeanNames;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>.disposableBeans) &#123;</span><br><span class="line">    disposableBeanNames = StringUtils.toStringArray(<span class="keyword">this</span>.disposableBeans.keySet());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历所有bean，逐个执行这些bean的销毁方法</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = disposableBeanNames.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    destroySingleton(disposableBeanNames[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.containedBeanMap.clear();</span><br><span class="line">  <span class="keyword">this</span>.dependentBeanMap.clear();</span><br><span class="line">  <span class="keyword">this</span>.dependenciesForBeanMap.clear();</span><br><span class="line"></span><br><span class="line">  clearSingletonCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最核心的逻辑在for循环里面，遍历所有可销毁的bean数组<code>disposableBeanNames</code>。</p><p>继续一步步进入调用逻辑，按照如下调用顺序就可以找到最后的执行逻辑：</p><blockquote><p>DefaultSingletonBeanRegistry.destroySingletons() -&gt; DefaultSingletonBeanRegistry.destroySingleton() -&gt; DisposableBeanAdapter.destroy()</p></blockquote><p>DisposableBeanAdapter.destory()才是最后的处理逻辑。不得不说这个调用层次实在是太深了！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!CollectionUtils.isEmpty(<span class="keyword">this</span>.beanPostProcessors)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (DestructionAwareBeanPostProcessor processor : <span class="keyword">this</span>.beanPostProcessors) &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 执行后置处理器的销毁回调方法</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@PreDestroy</span>注释的方法就是在这里执行的。默认实现有</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@see</span> InitDestroyAnnotationBeanPostProcessor#postProcessBeforeDestruction(Object, String)</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">      processor.postProcessBeforeDestruction(<span class="keyword">this</span>.bean, <span class="keyword">this</span>.beanName);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.invokeDisposableBean) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;Invoking destroy() on bean with name &#x27;&quot;</span> + <span class="keyword">this</span>.beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行DisposableBean接口的destory()方法。</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">          ((DisposableBean) <span class="keyword">this</span>.bean).destroy();</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;, <span class="keyword">this</span>.acc);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        ((DisposableBean) <span class="keyword">this</span>.bean).destroy();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      String msg = <span class="string">&quot;Invocation of destroy method failed on bean with name &#x27;&quot;</span> + <span class="keyword">this</span>.beanName + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.warn(msg, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.warn(msg + <span class="string">&quot;: &quot;</span> + ex);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 1. 执行自定义的销毁方法，比如下面自定义的销毁方法就是beanDestoryCallbackMethod()</span></span><br><span class="line">    <span class="comment">//         @Bean(destroyMethod = &quot;beanDestoryCallbackMethod&quot;)</span></span><br><span class="line">    <span class="comment">// 2. 执行实现Closable接口的close()方法。</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.destroyMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">    invokeCustomDestroyMethod(<span class="keyword">this</span>.destroyMethod);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.destroyMethodName != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Method methodToInvoke = determineDestroyMethod(<span class="keyword">this</span>.destroyMethodName);</span><br><span class="line">    <span class="keyword">if</span> (methodToInvoke != <span class="keyword">null</span>) &#123;</span><br><span class="line">      invokeCustomDestroyMethod(ClassUtils.getInterfaceMethodIfPossible(methodToInvoke));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>首先遍历后置处理器的<code>postProcessBeforeDestruction()</code>方法，这个方法是对所有bean生效的。</p></li><li><p><code>@PreDestory</code>注解标注的方法也是通过后置处理器执行的。当遍历到<code>InitDestroyAnnotationBeanPostProcessor</code>这个后置处理器的时候，执行的原理和初始化回调是一样的，底层都是通过反射实现。</p></li><li><p>然后是执行单个bean实现的<code>DisposableBean</code>接口的<code>destory()</code>方法，</p></li><li><p>最后是执行在<code>@Bean</code>中自定义的销毁回调方法。</p></li><li><p>执行接口<code>Closable</code>接口的<code>close()</code>方法。</p></li></ol><p>到此，已经把所有的销毁回调的执行都介绍完了。你是否看懂了呢？？</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring初始化回调</title>
      <link href="/2020/11/08/Spring/Spring%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9B%9E%E8%B0%83/"/>
      <url>/2020/11/08/Spring/Spring%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9B%9E%E8%B0%83/</url>
      
        <content type="html"><![CDATA[<p>Spring框架提供了多种方式控制bean初始化的过程，开发者可以自定义初始化的逻辑。</p><p>有如下几种自定义bean初始化逻辑的方式：</p><ol><li>使用<code>@PostConstruct</code>注解</li><li>自定义初始化方法，比如<code>@Bean(initMethod = &quot;method1&quot;)</code></li><li>实现<code>InitializingBean</code>接口的<code>afterPropertiesSet()</code>方法</li><li>实现<code>SmartInitializingSingleton</code>接口的<code>afterSingletonsInstantiated()</code>方法</li></ol><p>这四种方式都可以用于自定义bean的初始化。但是每种方法执行的时机不太一样，通过Spring源码来给大家逐一介绍。</p><p>首先自定义一个bean，分别实现上述4中方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.createbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.SmartInitializingSingleton;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.RootBeanDefinition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证不同方式初始化回调的执行顺序：</span></span><br><span class="line"><span class="comment"> * 0. 执行初始化回调BeanPostProcessor.postProcessBeforeInitialization()方法</span></span><br><span class="line"><span class="comment"> * 1. 执行初始化回调<span class="doctag">@PostConstruct</span>注解定义的方法</span></span><br><span class="line"><span class="comment"> * 2. 执行初始化回调InitializingBean.afterPropertiesSet()方法</span></span><br><span class="line"><span class="comment"> * 3. 执行初始化回调<span class="doctag">@Bean</span>(initMethod = &quot;beanInit&quot;)定义的方法</span></span><br><span class="line"><span class="comment"> * 4. 执行初始化回调BeanPostProcessor.postProcessAfterInitialization()方法</span></span><br><span class="line"><span class="comment"> * 5. 执行初始化回调SmartInitializingSingleton.afterSingletonsInstantiated()方法，</span></span><br><span class="line"><span class="comment"> *         此回调是在bean实例化和初始化完成之后执行的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/18 上午1:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitCallbackBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">SmartInitializingSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果一个类中多个方法都使用<span class="doctag">@PostConstruct</span>注解声明，则会根据方法名按照字母升序顺序执行。</span></span><br><span class="line"><span class="comment">     * 比如init()和afterPropertiesSet()都加了注解，那么先执行afterPropertiesSet()方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行初始化回调@PostConstruct注解定义的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行初始化回调@PostConstruct注解定义的方法init2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果用户在afterPropertiesSet()方法上也使用了<span class="doctag">@PostConstruct</span>注解，此方法在后置处理器中会先被执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> InitDestroyAnnotationBeanPostProcessor#postProcessBeforeInitialization(java.lang.Object, java.lang.String)</span></span><br><span class="line"><span class="comment">     * 然后在执行初始化回调接口InitializingBean时不会再次执行。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> AbstractAutowireCapableBeanFactory#invokeInitMethods(String, Object, RootBeanDefinition)</span></span><br><span class="line"><span class="comment">     * 也就是说同时在回调接口InitializingBean上同时使用<span class="doctag">@PostConstruct</span>注解只会执行一次，但是可以改变方法的执行时机，</span></span><br><span class="line"><span class="comment">     * 比如本类中init()和afterPropertiesSet()都加了<span class="doctag">@PostConstruct</span>注解，那么先执行afterPropertiesSet()方法，</span></span><br><span class="line"><span class="comment">     * 如果afterPropertiesSet()方法不加<span class="doctag">@PostConstruct</span>注解，那么会先执行init()方法，再执行afterProperties()方法。</span></span><br><span class="line"><span class="comment">     * 因为<span class="doctag">@PostConstruct</span>注解优先于回调接口InitializingBean执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果<span class="doctag">@Bean</span>注解中自定义的方法也使用<span class="doctag">@PostConstruct</span>注解声明，那么这个方法会重复执行。</span></span><br><span class="line"><span class="comment">     * 1. 后置处理器处理<span class="doctag">@PostConstruct</span>注解方法的时候执行一次，</span></span><br><span class="line"><span class="comment">     * 2. 执行自定义的方法的时候也执行一次</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Bean</span>(initMethod = &quot;afterPropertiesSet&quot;)</span></span><br><span class="line"><span class="comment">     * 如果自定义的方法和InitializingBean的回调方法一致。</span></span><br><span class="line"><span class="comment">     * afterPropertiesSet()方法会执行一次，只执行InitializingBean的回调，不会在执行自定义方法的回调。</span></span><br><span class="line"><span class="comment">     * 原因可以看Spring源码，位置：</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> AbstractAutowireCapableBeanFactory#invokeInitMethods(String, Object, RootBeanDefinition)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Bean</span>(initMethod = &quot;initBean&quot;)</span></span><br><span class="line"><span class="comment">     * 如果自定义的方法也使用了<span class="doctag">@PostConstruct</span>声明，那么initBean()会执行两次。</span></span><br><span class="line"><span class="comment">     * 1. 后置处理器处理<span class="doctag">@PostConstruct</span>注解方法的时候执行一次，</span></span><br><span class="line"><span class="comment">     * 2. 执行自定义的方法的时候也执行一次</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 总结一句话，InitializingBean.afterPropertiesSet()方法只会执行一次。</span></span><br><span class="line"><span class="comment">     *             <span class="doctag">@PostConstruct</span> 声明的方法都会执行，不管有几个，执行顺序按照方法名升序执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @PostConstruct</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行初始化回调InitializingBean.afterPropertiesSet()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterSingletonsInstantiated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行初始化回调SmartInitializingSingleton.afterSingletonsInstantiated()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">beanInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行初始化回调@Bean(initMethod = \&quot;beanInit\&quot;)定义的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>@Bean</code>方式把此类注入到Spring容器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;beanInit&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InitCallbackBean <span class="title">initCallbackBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InitCallbackBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先运行看结果是怎么样的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">执行初始化回调@PostConstruct注解定义的init方法</span><br><span class="line">执行初始化回调@Bean(initMethod = &quot;beanInit&quot;)定义的方法，并且此方法也使用了@PostConstruct注解</span><br><span class="line">执行初始化回调@PostConstruct注解定义的方法init2()</span><br><span class="line">执行初始化回调InitializingBean.afterPropertiesSet()方法</span><br><span class="line">执行初始化回调@Bean(initMethod = &quot;beanInit&quot;)定义的方法，并且此方法也使用了@PostConstruct注解</span><br><span class="line">执行初始化回调SmartInitializingSingleton.afterSingletonsInstantiated()方法</span><br></pre></td></tr></table></figure><p>通过运行结果分析，可以看到使用<code>@PostConstruct</code>注解的方法会第一个执行，<code>beanInit</code>方法同时使用了<code>@PostConstruct</code>注解，并且同时在<code>@Bean</code>中也指定成bean自定义的初始化方法，所以这个方法执行了两次。如果同一个类中有个多个方法都使用了<code>@PostConstruct</code>注解，那么这些被注解的方法都会被执行，但是执行的顺序不一定是方法在类中的代码顺序。</p><p>做点好玩的事情，在<code>afterPropertiesSet()</code>方法上也使用<code>@PostConstruct</code>注解，再运行看看结果是怎么样，会不会执行两遍？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">执行初始化回调@PostConstruct注解定义的init方法</span><br><span class="line">执行初始化回调InitializingBean.afterPropertiesSet()方法</span><br><span class="line">执行初始化回调@Bean(initMethod = &quot;beanInit&quot;)定义的方法，并且此方法也使用了@PostConstruct注解</span><br><span class="line">执行初始化回调@PostConstruct注解定义的方法init2()</span><br><span class="line">执行初始化回调@Bean(initMethod = &quot;beanInit&quot;)定义的方法，并且此方法也使用了@PostConstruct注解</span><br><span class="line">执行初始化回调SmartInitializingSingleton.afterSingletonsInstantiated()方法</span><br></pre></td></tr></table></figure><p>这个就比较有意思了，可以看到<code>afterPropertiesSet()</code>方法只执行了一遍。</p><p>这几种初始化方法执行顺序是怎么设定的呢？为何使用<code>@PostConstruct</code>注解的方法可以执行多次，而<code>afterPropertiesSet()</code>方法却执行一次呢？<br>带这些疑问，我们阅读Spring源码，从源码中找答案。</p><h3 id="不同初始化方式的执行时机"><a href="#不同初始化方式的执行时机" class="headerlink" title="不同初始化方式的执行时机"></a>不同初始化方式的执行时机</h3><p>这些初始化方法都是在有bean实例之后执行的，我们可以大概的猜测到这些初始化回调应该是在Spring框架完成bean实例化，进行属性填充的时候执行的。</p><blockquote><p>如果你对Spring框架bean的实例化、初始化不是很了解的请看之前的系列博客：<a href="https://www.toutiao.com/i6887194772914733571">https://www.toutiao.com/i6887194772914733571</a></p></blockquote><p>直接打开如下类方法，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean</span><br></pre></td></tr></table></figure><p>这个方法是Spring容器非常核心的方法，它处理了很多事情：单例实例化、填充属性、执行初始化回调、注册销毁回调方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> <span class="meta">@Nullable</span> Object[] args)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Instantiate the bean.</span></span><br><span class="line">  BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">    <span class="comment">// 从缓存中查询，如果是bean定义是一个bean工厂实例可以直接拿到。</span></span><br><span class="line">    instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 普通bean，根据bean定义创建bean实例，并包装成BeanWrapper返回</span></span><br><span class="line">    instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取经过jdk1.8的Optional类包装过的非空对象</span></span><br><span class="line">  <span class="keyword">final</span> Object bean = instanceWrapper.getWrappedInstance();</span><br><span class="line">  <span class="comment">// 获取bean的class类型</span></span><br><span class="line">  Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">  <span class="keyword">if</span> (beanType != NullBean.class) &#123;</span><br><span class="line">    mbd.resolvedTargetType = beanType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allow post-processors to modify the merged bean definition.</span></span><br><span class="line">  <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行后置处理器接口MergedBeanDefinitionPostProcessor，bean实例化之后，就可以通过反射获取到类或者属性上的注释信息</span></span><br><span class="line">        <span class="comment">// 处理@Resource、@Autowired、@Value注解的定义信息，并把这些注解的定义信息放在缓存中。待后续属性填充的时候使用。</span></span><br><span class="line">        <span class="comment">// 如果有则吧注解信息转换成AutowiredFieldElement对象或者AutowiredMethodElement对象或者ResourceElement对象</span></span><br><span class="line">        <span class="comment">// 实现类有：AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor等</span></span><br><span class="line">        applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                        <span class="string">&quot;Post-processing of merged bean definition failed&quot;</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class="line">  <span class="comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class="line">  <span class="comment">// 单例bean &amp;&amp; 允许循环依赖 &amp;&amp; bean正在被创建</span></span><br><span class="line">  <span class="keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">                                    isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">  <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                   <span class="string">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行后置处理器SmartInstantiationAwareBeanPostProcessor的getEarlyBeanReference()方法尝试获取一个早期的引用。</span></span><br><span class="line"><span class="comment">             * 并加入的单例工厂缓存中</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> DefaultSingletonBeanRegistry#addSingletonFactory(String, ObjectFactory)</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> #getEarlyBeanReference</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the bean instance.</span></span><br><span class="line">  <span class="comment">// 初始化bean实例，填充属性，注入依赖（@Autowired，@Resource，@Value）注解的属性</span></span><br><span class="line">  Object exposedObject = bean;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">             执行bean的初始化回调方法以及执行后置处理器的初始化方法，包括：</span></span><br><span class="line"><span class="comment">            一，执行Aware接口 ，包括BeanFactoryAware，BeanClassLoaderAware，BeanNameAware</span></span><br><span class="line"><span class="comment">                注意：ApplicationContext的注入是在另外一个后置处理器ApplicationContextAwareProcessor中执行。</span></span><br><span class="line"><span class="comment">              二，执行bean初始化回调，包括：</span></span><br><span class="line"><span class="comment">                0. 执行初始化回调BeanPostProcessor.postProcessBeforeInitialization()方法</span></span><br><span class="line"><span class="comment">                1. 执行初始化回调<span class="doctag">@PostConstruct</span>注解定义的方法</span></span><br><span class="line"><span class="comment">                 2. 执行初始化回调InitializingBean.afterPropertiesSet()方法</span></span><br><span class="line"><span class="comment">                3. 执行初始化回调<span class="doctag">@Bean</span>(initMethod = &quot;beanInit&quot;)定义的初始化方法beanInit()</span></span><br><span class="line"><span class="comment">                 4. 执行初始化回调BeanPostProcessor.postProcessAfterInitialization()方法</span></span><br><span class="line"><span class="comment">                5. 执行初始化回调SmartInitializingSingleton.afterSingletonsInstantiated()方法</span></span><br><span class="line"><span class="comment">                按照上述执行顺序执行</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">        mbd.getResourceDescription(), beanName, <span class="string">&quot;Initialization of bean failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 循环依赖检查</span></span><br><span class="line">  <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">    Object earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">        exposedObject = earlySingletonReference;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">        String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">        Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class="line">        <span class="keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">            actualDependentBeans.add(dependentBean);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                                                     <span class="string">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; has been injected into other beans [&quot;</span> +</span><br><span class="line">                                                     StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                                                     <span class="string">&quot;] in its raw version as part of a circular reference, but has eventually been &quot;</span> +</span><br><span class="line">                                                     <span class="string">&quot;wrapped. This means that said other beans do not use the final version of the &quot;</span> +</span><br><span class="line">                                                     <span class="string">&quot;bean. This is often the result of over-eager type matching - consider using &quot;</span> +</span><br><span class="line">                                                     <span class="string">&quot;&#x27;getBeanNamesOfType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Register bean as disposable.</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 注册bean销毁回调方法，这个方法和前面的initializeBean()方法是对应的。通常情况下初始化方法和销毁方法是同时出现的。</span></span><br><span class="line"><span class="comment">             * 比如回调DisposableBean接口的destroy()方法，需要注意的是这里只是注册，并不会执行销毁回调方法。</span></span><br><span class="line"><span class="comment">             * 销毁方法的调用是在手动执行容器的关闭方法的时候：</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> org.springframework.context.support.AbstractApplicationContext#close()</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> AbstractBeanFactory#registerDisposableBeanIfNecessary(String, Object, RootBeanDefinition)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">      mbd.getResourceDescription(), beanName, <span class="string">&quot;Invalid destruction signature&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 回到调用处：</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> #createBean(String, RootBeanDefinition, Object[])</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">  <span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>initializeBean(beanName, exposedObject, mbd)</code>这行是本次我们需要关注的，所有的初始化回调都是在这个方法中执行的。<br>进入这个方法的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize the given bean instance, applying factory callbacks</span></span><br><span class="line"><span class="comment">     * as well as init methods and bean post processors.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Called from &#123;<span class="doctag">@link</span> #createBean&#125; for traditionally defined beans,</span></span><br><span class="line"><span class="comment">     * and from &#123;<span class="doctag">@link</span> #initializeBean&#125; for existing bean instances.</span></span><br><span class="line"><span class="comment">     * 本方法的作用有</span></span><br><span class="line"><span class="comment">     * 一，执行Aware接口 ，包括BeanFactoryAware，BeanClassLoaderAware，BeanNameAware</span></span><br><span class="line"><span class="comment">   *         注意：ApplicationContext的注入是在另外一个后置处理器ApplicationContextAwareProcessor中执行。</span></span><br><span class="line"><span class="comment">     * 二，执行bean初始化回调，包括：</span></span><br><span class="line"><span class="comment">     *         0. 执行初始化回调BeanPostProcessor.postProcessBeforeInitialization()方法</span></span><br><span class="line"><span class="comment">     *         1. 执行初始化回调<span class="doctag">@PostConstruct</span>注解定义的方法</span></span><br><span class="line"><span class="comment">     *         2. 执行初始化回调InitializingBean.afterPropertiesSet()方法</span></span><br><span class="line"><span class="comment">     *         3. 执行初始化回调<span class="doctag">@Bean</span>(initMethod = &quot;beanInit&quot;)定义的方法</span></span><br><span class="line"><span class="comment">     *         4. 执行初始化回调BeanPostProcessor.postProcessAfterInitialization()方法</span></span><br><span class="line"><span class="comment">     *         5. 执行初始化回调SmartInitializingSingleton.afterSingletonsInstantiated()方法</span></span><br><span class="line"><span class="comment">     * 按照上述执行顺序执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName the bean name in the factory (for debugging purposes)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean the new bean instance we may need to initialize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mbd the bean definition that the bean was created with</span></span><br><span class="line"><span class="comment">     * (can also be &#123;<span class="doctag">@code</span> null&#125;, if given an existing bean instance)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the initialized bean instance (potentially wrapped)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> BeanNameAware</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> BeanClassLoaderAware</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> BeanFactoryAware</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #applyBeanPostProcessorsBeforeInitialization</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #invokeInitMethods</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #applyBeanPostProcessorsAfterInitialization</span></span><br><span class="line"><span class="comment">     * 方法调用处：</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #doCreateBean(String, RootBeanDefinition, Object[]) </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果bean实现了XxxAware接口，则调用这些接口的setXxx()方法</span></span><br><span class="line">  <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">      invokeAwareMethods(beanName, bean);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;, getAccessControlContext());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    invokeAwareMethods(beanName, bean);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 执行后置处理器的postProcessorBeforeInitialization()方法</span></span><br><span class="line"><span class="comment">         * 这里会首先执行第一个初始化回调<span class="doctag">@PostConstruct</span>声明的方法，是这个类实现的</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor#postProcessBeforeInitialization</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">  Object wrappedBean = bean;</span><br><span class="line">  <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">    wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行InitializingBean接口和自定义的初始化方法（@Bean(initMethod = &quot;beanInit&quot;))</span></span><br><span class="line">    invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">      (mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</span><br><span class="line">      beanName, <span class="string">&quot;Invocation of init method failed&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 执行后置处理器的postProcessorAfterInitialization()方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">  <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">    wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 完成各种初始化回调方法，回到调用处：</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> #doCreateBean(String, RootBeanDefinition, Object[]) </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">  <span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此方法中就可以看到初始化回调的执行顺序，首先是<code>applyBeanPostProcessorsBeforeInitialization()</code>这个方法里面会执行<code>@PostContruct</code>注解的方法，是通过后置处理器实现的。</p><p>其次是<code>invokeInitMethods()</code>方法，这个方法内会执行的<code>InitializingBean</code>接口的<code>afterPropertiesSet()</code>方法，以及执行在<code>@Bean</code>注解中定义的初始化方法。</p><p>最后的是<code>applyBeanPostProcessorsAfterInitialization()</code>方法，这个方法会执行后置处理器接口<code>SmartInitializingSingleton</code>的<code>afterSingletonsInstantiated()</code>方法。</p><p>到此解决了一个疑问，不同类型的回调的执行顺序就是在上述代码中设定的。</p><h3 id="PostConstruct注解方法的执行"><a href="#PostConstruct注解方法的执行" class="headerlink" title="PostConstruct注解方法的执行"></a>PostConstruct注解方法的执行</h3><p>此注解执行的处理类是<code>org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor#postProcessBeforeInitialization</code>。</p><p>进入此方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">  <span class="comment">// 获取@PostConstruct注解定义的方法</span></span><br><span class="line">  LifecycleMetadata metadata = findLifecycleMetadata(bean.getClass());</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    metadata.invokeInitMethods(bean, beanName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">&quot;Invocation of init method failed&quot;</span>, ex.getTargetException());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">&quot;Failed to invoke init method&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法逻辑比较简单，<code>findLifecycleMetadata()</code>把使用了注解<code>@PostConstruct</code>定义的方法包装成<code>LifecycleMetadata</code>，然后在<code>invokeInitMethods()</code>方法中执行。这两个方法的最底层都是通过反射实现的。</p><p><strong>回到前面的疑问，<code>@PostConstruct</code>注解的方法为何可以有多个？并且无法控制方法的执行顺序？</strong></p><p>第二个疑问，进入<code>findLifecycleMetadata()</code>方法的实现就知道了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> LifecycleMetadata <span class="title">findLifecycleMetadata</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.lifecycleMetadataCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Happens after deserialization, during destruction...</span></span><br><span class="line">    <span class="keyword">return</span> buildLifecycleMetadata(clazz);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Quick check on the concurrent map first, with minimal locking.</span></span><br><span class="line">  LifecycleMetadata metadata = <span class="keyword">this</span>.lifecycleMetadataCache.get(clazz);</span><br><span class="line">  <span class="keyword">if</span> (metadata == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.lifecycleMetadataCache) &#123;</span><br><span class="line">      metadata = <span class="keyword">this</span>.lifecycleMetadataCache.get(clazz);</span><br><span class="line">      <span class="keyword">if</span> (metadata == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 通过反射获取到使用@PostConstruct注解的方法，并包装成LifecycleMetadata</span></span><br><span class="line">        metadata = buildLifecycleMetadata(clazz);</span><br><span class="line">        <span class="keyword">this</span>.lifecycleMetadataCache.put(clazz, metadata);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> metadata;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法还不是真正实现的地方，还需要继续进入<code>buildLifecycleMetadata()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> LifecycleMetadata <span class="title">buildLifecycleMetadata</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!AnnotationUtils.isCandidateClass(clazz, Arrays.asList(<span class="keyword">this</span>.initAnnotationType, <span class="keyword">this</span>.destroyAnnotationType))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.emptyLifecycleMetadata;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  List&lt;LifecycleElement&gt; initMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  List&lt;LifecycleElement&gt; destroyMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  Class&lt;?&gt; targetClass = clazz;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;LifecycleElement&gt; currInitMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">final</span> List&lt;LifecycleElement&gt; currDestroyMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过反射获取到目标类的方法列表，然后遍历这些方法判断是否有使用@PostConstruct注解</span></span><br><span class="line">    <span class="comment">// 如果有则保存到currInitMethods</span></span><br><span class="line">    ReflectionUtils.doWithLocalMethods(targetClass, method -&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.initAnnotationType != <span class="keyword">null</span> &amp;&amp; method.isAnnotationPresent(<span class="keyword">this</span>.initAnnotationType)) &#123;</span><br><span class="line">        LifecycleElement element = <span class="keyword">new</span> LifecycleElement(method);</span><br><span class="line">        currInitMethods.add(element);</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">          logger.trace(<span class="string">&quot;Found init method on class [&quot;</span> + clazz.getName() + <span class="string">&quot;]: &quot;</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.destroyAnnotationType != <span class="keyword">null</span> &amp;&amp; method.isAnnotationPresent(<span class="keyword">this</span>.destroyAnnotationType)) &#123;</span><br><span class="line">        currDestroyMethods.add(<span class="keyword">new</span> LifecycleElement(method));</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">          logger.trace(<span class="string">&quot;Found destroy method on class [&quot;</span> + clazz.getName() + <span class="string">&quot;]: &quot;</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    initMethods.addAll(<span class="number">0</span>, currInitMethods);</span><br><span class="line">    destroyMethods.addAll(currDestroyMethods);</span><br><span class="line">    targetClass = targetClass.getSuperclass();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (targetClass != <span class="keyword">null</span> &amp;&amp; targetClass != Object.class);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (initMethods.isEmpty() &amp;&amp; destroyMethods.isEmpty() ? <span class="keyword">this</span>.emptyLifecycleMetadata :</span><br><span class="line">          <span class="keyword">new</span> LifecycleMetadata(clazz, initMethods, destroyMethods));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在继续进入<code>doWithLocalMethods()</code>方法， 这个方法还做了一层封装。核心的方法实现在<code>getDeclaredMethods()</code>，这个方法里面最主要一句代码<code>Method[] declaredMethods = clazz.getDeclaredMethods();</code>，这行代码只要用过反射的应该很熟悉。直接通过class获取到类内部的所有方法（包括继承过来的方法）。<code>clazz.getDeclaredMethods()</code>方法返回的是一个数组，里面的元素没有提供排序的入口。所以最终执行的<code>@PostConstruct</code>注解的方法也不知道顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doWithLocalMethods</span><span class="params">(Class&lt;?&gt; clazz, MethodCallback mc)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 通过反射获取目标类内部的方法</span></span><br><span class="line">  Method[] methods = getDeclaredMethods(clazz, <span class="keyword">false</span>);</span><br><span class="line">  <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      mc.doWith(method);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Not allowed to access method &#x27;&quot;</span> + method.getName() + <span class="string">&quot;&#x27;: &quot;</span> + ex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到所有注解的方法之后，直接通过<code>for</code>循环逐个执行。从入口一直到这里执行注解方法的过程中，没有对方法做任何的过滤，直接<code>for</code>循环遍历执行。所以同一个类是支持在多个方法上使用<code>@PostConstruct</code>注解，并且会把所有使用了注解的方法执行。</p><h3 id="InitializingBean接口执行"><a href="#InitializingBean接口执行" class="headerlink" title="InitializingBean接口执行"></a>InitializingBean接口执行</h3><p><code>@PostConstruct</code>注解的方法执行完毕之后，回到<code>initializeBean()</code>方法中，继续往下执行<code>invokeInitMethods()</code>方法。这个方法中就会执行所有实现了<code>InitializingBean</code>接口的实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeInitMethods</span><span class="params">(String beanName, <span class="keyword">final</span> Object bean, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> isInitializingBean = (bean <span class="keyword">instanceof</span> InitializingBean);</span><br><span class="line">  <span class="comment">// 使用@PostConstruct定义的方法在解析bean定义时候会初始化到bean定义属性externallyManagedInitMethods里面</span></span><br><span class="line">  <span class="comment">// 如果用户在afterPropertiesSet()方法上也使用了@PostConstruct注解则不会再执行。</span></span><br><span class="line">  <span class="keyword">if</span> (isInitializingBean &amp;&amp; (mbd == <span class="keyword">null</span> || !mbd.isExternallyManagedInitMethod(<span class="string">&quot;afterPropertiesSet&quot;</span>))) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;Invoking afterPropertiesSet() on bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">          ((InitializingBean) bean).afterPropertiesSet();</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;, getAccessControlContext());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">        <span class="keyword">throw</span> pae.getException();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      ((InitializingBean) bean).afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mbd != <span class="keyword">null</span> &amp;&amp; bean.getClass() != NullBean.class) &#123;</span><br><span class="line">    <span class="comment">// 获取自定义的初始化方法，比如@Bean(initMethod = &quot;beanInit&quot;)，自定义的初始化方法就是beanInit()</span></span><br><span class="line">    String initMethodName = mbd.getInitMethodName();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(initMethodName) &amp;&amp;</span><br><span class="line">        <span class="comment">// 排除自定义的初始化方法也是afterPropertiesSet()方法，避免重复执行</span></span><br><span class="line">        !(isInitializingBean &amp;&amp; <span class="string">&quot;afterPropertiesSet&quot;</span>.equals(initMethodName)) &amp;&amp;</span><br><span class="line">        <span class="comment">// 使用@PostConstruct定义的方法在解析bean定义时候会初始化到bean定义属性externallyManagedInitMethods里面</span></span><br><span class="line">        <span class="comment">// 方式初始化方法重复执行，如果在前面执行@PostConstruct方法已经执行过同名方法则不再执行</span></span><br><span class="line">        <span class="comment">// 另外，如果@Bean自定义的回调方法也是afterPropertiesSet()方法，</span></span><br><span class="line">        <span class="comment">// 这里不会再次执行，因为在前面InitializingBean接口方法已经执行过</span></span><br><span class="line">        !mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</span><br><span class="line">      invokeCustomInitMethod(beanName, bean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法的逻辑也很明了，分为两部分：前面部分就是判断当前bean是否实现了接口，如果是就直接执行接口的<code>afterPropertiesSet()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((InitializingBean) bean).afterPropertiesSet();    </span><br></pre></td></tr></table></figure><p>但是在执行之前有一段校验逻辑<code>mbd.isExternallyManagedInitMethod(&quot;afterPropertiesSet&quot;)</code>，这一行代码就是用于判断，如果前面使用<code>@PostConstruct</code>注解声明的方法中已经包含了<code>afterPropertiesSet</code>则不会在执行这个方法。避免重复执行。这也就是为何演示例子中<code>afterPropertiesSet()</code>方法只会执行一遍的原因。并且是在执行<code>@PostConstruct</code>方法列表的时候就执行了。</p><p>这个方法的第二部分也同样有校验。在执行<code>@Bean</code>自定义的初始化方法之前也是先判断<code>afterPropertiesSet()</code>方法是否已经执行过。避免<code>@Bean(initMethod = &quot;afterPropertiesSet&quot;)</code>这种情况导致方法重复执行。</p><p><code>@Bean</code>中自定义的方法的执行详细逻辑就不贴代码了，最底层也是通过反射执行的。</p><p>好了，完成了<code>@Bean</code>自定义方法和<code>InitializingBean</code>接口方法的执行之后，接着回到<code>initializeBean()</code>方法中，继续往下执行<code>applyBeanPostProcessorsAfterInitialization()</code>方法，这个方法主要是执行后置处理器的<code>postProcessAfterInitialization()</code>方法的。和本篇主题无关，不过多解释。</p><h3 id="afterSingletonsInstantiated-方法执行"><a href="#afterSingletonsInstantiated-方法执行" class="headerlink" title="afterSingletonsInstantiated()方法执行"></a>afterSingletonsInstantiated()方法执行</h3><p>最后就是<code>SmartInitializingSingleton.afterSingletonsInstantiated()</code>方法的执行，此方法的执行和前面的初始化回调不在一个地方，这个方法是在bean实例化完成，并且完成了属性填充之后。才执行的，代码位置在：<code>org.springframework.beans.factory.support.DefaultListableBeanFactory#preInstantiateSingletons</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例化所有除了Spring内部的单例（懒加载的、抽象类、非单例的除外）</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">  <span class="comment">// 省略与本篇无关代码</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// =========================================================================</span></span><br><span class="line">  <span class="comment">// 到此单例bean都已经实例化完毕，紧接着可以对实例对象做一些增强，通过BeanPostProcessor后置处理器增强</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class="line">  <span class="comment">// 判断是否有实现了SmartInittializingSingleton的实现类，通常是Spring内部的实现类，也是Spring提供的一个很重要的扩展点</span></span><br><span class="line">  <span class="comment">// 初始化操作执行顺序：@PostConstruct是最先被执行的，然后是InitializingBean，最后是SmartInitializingSingleton</span></span><br><span class="line">  <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">    Object singletonInstance = getSingleton(beanName);</span><br><span class="line">    <span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line">      <span class="keyword">final</span> SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">      <span class="comment">// bean实例化后调用bean的afterSingletonsInstantiated方法，用户可以实现SmartInitializingSingleton接口，</span></span><br><span class="line">      <span class="comment">// 在所有bean实例化后做一些自定义的操作，比如重置实例的某些属性，但是要注意只能处理非懒加载的单例bean</span></span><br><span class="line">      <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">          smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;, getAccessControlContext());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处也是一个后置处理器，<strong>这个是Spring框架提供的一个对所有bean初始化的入口</strong>。前面的初始化回调都是针对某一个bean做得处理。这个是最大的不同之处。只要你实现了此接口方法<code>afterSingletonsInstantiated()</code>，所有的bean在初始化完成之后执行此方法逻辑。</p><p>好了，到此总算是把所有的初始化回调介绍完毕。你是否搞懂了呢？？</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring后置处理器</title>
      <link href="/2020/10/24/Spring/Spring%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/"/>
      <url>/2020/10/24/Spring/Spring%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>本篇来总结汇总Spring各种类型后置处理器的使用。</p><h3 id="bean定义后置处理器"><a href="#bean定义后置处理器" class="headerlink" title="bean定义后置处理器"></a>bean定义后置处理器</h3><p>bean定义后置处理器是Spring框架提供的第一个扩展点。其中有两个接口，一个是<code>BeanFactoryPostProcessor</code>接口，一个是<code>BeanDefinitionRegistryPostProcessor</code>接口。</p><h4 id="BeanFactroyPostProcessor接口"><a href="#BeanFactroyPostProcessor接口" class="headerlink" title="BeanFactroyPostProcessor接口"></a>BeanFactroyPostProcessor接口</h4><p><code>BeanFactoryPostProcessor</code>接口提供的扩展功能：</p><blockquote><p><strong>允许用户修改容器中的bean定义信息，调整bean定义属性值。容器会在所有bean定义信加载完毕之后回调此接口，用以修改容器中的bean定义信息</strong>。但是不要在此接口直接通过<code>getBean</code>实例化bean，这样会导致bean过早实例化，违反容器规则导致不可预知的副作用。</p><p>如果要实现bean实例化请通过<code>BeanPostProcessor</code>接口实现。</p><p>如果有多个<code>BeanFactoryPostProcessor</code>接口并且需要执行它们的执行顺序可以同时实现<code>PriorityOrdered</code>接口或者<code>Ordered</code>接口。</p><p>简单讲就是，我们可以通过实现此接口获取到<code>BeanFactory</code>对象（就是参数），操作<code>BeanFactory</code>对象，修改里面的<code>BeanDefinition</code>。<br><strong>但是不要去实例化bean</strong>。</p><p>接口的一个典型应用就是<code>PropertySourcesPlaceholderConfigurer</code>。</p></blockquote><h5 id="接口源码"><a href="#接口源码" class="headerlink" title="接口源码"></a>接口源码</h5><p>Spring框架<code>BeanFactoryPostProcessor</code>接口源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.beans.factory.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 允许自定义修改容器中的bean定义信息，调整bean定义属性值。</span></span><br><span class="line"><span class="comment"> * 容器会在所有bean定义信息加载完毕之后回调此接口，用以修改容器中的bean定义信息。</span></span><br><span class="line"><span class="comment"> * 但是不要在此接口直接通过getBean实例化bean，这样会导致bean过早实例化，违反容器规则导致不可预知的副作用。</span></span><br><span class="line"><span class="comment"> * 如果要实现bean实例化请通过BeanPostProcessor接口。</span></span><br><span class="line"><span class="comment"> * 如果有多个BeanFactoryPostProcessor接口并且需要执行它们的执行顺序可以同时实现PriorityOrdered接口或者Ordered接口。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 简单讲就是，我们可以通过实现此接口获取到BeanFactory对象（就是参数），操作BeanFactory对象，修改里面的BeanDefinition。</span></span><br><span class="line"><span class="comment"> * 但是不要去实例化bean。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 另外有一点需要注意的是此接口的实现类会忽略懒加载设置，即使你显式设置了实现类懒加载也是不生效的。</span></span><br><span class="line"><span class="comment"> * 因为Spring需要保证BeanFactoryPostProcessor实现类优先实例化，如果实现类都懒加载了，那么你又如何能修改容器的bean定义呢。。。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam Brannen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 06.07.2003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> BeanPostProcessor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> PropertyResourceConfigurer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在所有的bean定义被加载到容器中后，并且是在所有bean实例化之前就会回调这个接口，</span></span><br><span class="line"><span class="comment">     * 这个接口可以修改容器中的所有bean定义信息，包括重写某些bean的定义属性信息。</span></span><br><span class="line"><span class="comment">     * 比如修改MyServiceImpl为懒加载：beanFactory.getMergedBeanDefinition(MyServiceImpl.class.getName()).setLazyInit(true);</span></span><br><span class="line"><span class="comment">     * 另外一个很典型的应用就是修改bean定义中属性的占位符（PropertySourcesPlaceholderConfigurer），比如读取配置文件把配置文件的配置值注入到类属性上</span></span><br><span class="line"><span class="comment">     * 最常见的就是<span class="doctag">@Value</span>(&quot;$&#123;xxxx&#125;&quot;)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注意：不要在此接口中实例化bean（就是不要调getBean()方法），提前实例化bean会导致不可预知的结果，</span></span><br><span class="line"><span class="comment">     * 因为目前还处在解析完所有bean定义阶段，bean的实例化（实例化就是根据bean的定义信息创建实例对象）还在后面的阶段。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h5><p>自定义一个实现类，验证。</p><ol><li>修改某个bean的定义信息</li><li>接口实现来显式设置为懒加载，看是否有效果（正常情况下应该是无效果的，Spring需要保证实现类提前初始化，否则谈何能修改bean定义）。容器启动的过程中就会打印构造方法的日志</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.beanfactorypostprocessor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanFactoryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Spring的一个扩展点，实现BeanFactoryPostProcess接口。</span></span><br><span class="line"><span class="comment"> * 1. 修改某个bean的定义信息</span></span><br><span class="line"><span class="comment"> * 2. 接口实现来显式设置为懒加载，看是否有效果（正常情况下应该是无效果的，Spring需要保证实现类提前初始化，否则谈何能修改bean定义）</span></span><br><span class="line"><span class="comment"> *        容器启动的过程中就会打印构造方法的日志</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 运行结果：</span></span><br><span class="line"><span class="comment"> * com.ubuntuvim.spring.processor.MyBeanFactoryPostProcessorImpl被加载了。。。</span></span><br><span class="line"><span class="comment"> * com.ubuntuvim.spring.bean.LazyLoadingBean被设置成懒加载了。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 没有看到LazyLoadingBean被加载的日志，把beanFactory.getBeanDefinition(beanName).setLazyInit(true);改成false再运行：</span></span><br><span class="line"><span class="comment"> * com.ubuntuvim.spring.processor.MyBeanFactoryPostProcessorImpl被加载了。。。</span></span><br><span class="line"><span class="comment"> * com.ubuntuvim.spring.bean.LazyLoadingBean被设置成懒加载了。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * com.ubuntuvim.spring.bean.LazyLoadingBean被加载了。。。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 可以看到LazyLoadingBean被加载了，完美的验证了前面的两点描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/23 下午9:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Lazy</span>  <span class="comment">// 显式指定为懒加载</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactoryPostProcessorImpl</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBeanFactoryPostProcessorImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span> + <span class="keyword">this</span>.getClass().getName() + <span class="string">&quot;被加载了。。。\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// @Component注解没有指定名称，所有是默认首字母小写名字</span></span><br><span class="line">        String beanName = <span class="string">&quot;lazyLoadingBean&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span> + beanName + <span class="string">&quot;被设置成懒加载了。\n&quot;</span>);</span><br><span class="line">        beanFactory.getBeanDefinition(beanName).setLazyInit(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义一个普通bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.beanfactorypostprocessor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个bean在MyBeanFactoryPostProcessorImpl中被设置懒加载了，所以容器启动完毕也会不打印构造方法的日志</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/23 下午10:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyLoadingBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LazyLoadingBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span> + <span class="keyword">this</span>.getClass().getName() + <span class="string">&quot;被加载了。。。\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.ubuntuvim.spring.beanfactorypostprocessor.MyBeanFactoryPostProcessorImpl被加载了。。。</span><br><span class="line"></span><br><span class="line">lazyLoadingBean被设置成懒加载了。</span><br></pre></td></tr></table></figure><p><code>MyBeanFactoryPostProcessorImpl</code>被加载了，<code>LazyLoadingBean</code>没有被加载，把<code>beanFactory.getBeanDefinition(beanName).setLazyInit(true);</code>改成<code>false</code>再运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.ubuntuvim.spring.beanfactorypostprocessor.MyBeanFactoryPostProcessorImpl被加载了。。。</span><br><span class="line"></span><br><span class="line">lazyLoadingBean被设置成懒加载了。</span><br><span class="line"></span><br><span class="line">com.ubuntuvim.spring.beanfactorypostprocessor.LazyLoadingBean被加载了。。。</span><br></pre></td></tr></table></figure><p>可以看到<code>MyBeanFactoryPostProcessorImpl</code>被加载了，<code>LazyLoadingBean</code>也被加载了，完美符合预期。</p><h4 id="待跟进"><a href="#待跟进" class="headerlink" title="待跟进"></a>待跟进</h4><p>学习<code>PropertyResourceConfigurer</code>是如何替换类中的占位符<code>@Value(&quot;$&#123;xxx&#125;&quot;)</code>。</p><h4 id="BeanDefinitionRegistryPostProcessor接口"><a href="#BeanDefinitionRegistryPostProcessor接口" class="headerlink" title="BeanDefinitionRegistryPostProcessor接口"></a>BeanDefinitionRegistryPostProcessor接口</h4><p><code>BeanDefinitionRegistryPostProcessor</code>接口的提供的扩展功能是：</p><blockquote><p><code>BeanDefinitionRegistryPostProcessor</code>接口是<code>BeanFactoryPostProcessor</code>接口的子类，它在父类的基础上增加了<code>postProcessBeanDefinitionRegistry()</code>方法。允许用户获取<code>BeanDefinitionRegistry</code>对象，从而可以<strong>通过编码方式动态修改、新增</strong><code>BeanDefinition</code>。</p><p>此接口一个非常重要的实现类就是<code>ConfigurationClassPostProcessor</code>，这个类用于解析<code>@Component</code>，<code>@Service</code>，<code>@ComponentScan</code>，<code>@Configuration</code>等注解，把注解对应的类转换成<code>BeanDefinition</code>然后注册到IoC容器中。</p></blockquote><h5 id="接口源码-1"><a href="#接口源码-1" class="headerlink" title="接口源码"></a>接口源码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanFactoryPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Extension to the standard &#123;<span class="doctag">@link</span> BeanFactoryPostProcessor&#125; SPI, allowing for</span></span><br><span class="line"><span class="comment"> * the registration of further bean definitions &lt;i&gt;before&lt;/i&gt; regular</span></span><br><span class="line"><span class="comment"> * BeanFactoryPostProcessor detection kicks in. In particular,</span></span><br><span class="line"><span class="comment"> * BeanDefinitionRegistryPostProcessor may register further bean definitions</span></span><br><span class="line"><span class="comment"> * which in turn define BeanFactoryPostProcessor instances.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 扩展标准的BeanFactoryPostProcessor SPI，</span></span><br><span class="line"><span class="comment"> * 允许在常规BeanFactoryPostProcessor检测开始之前注册其他的bean定义，特别是，</span></span><br><span class="line"><span class="comment"> * BeanDefinitionRegistryPostProcessor可以注册其他的bean定义，</span></span><br><span class="line"><span class="comment"> * 这些定义反过来可以用于定义BeanFactoryPostProcessor实例。</span></span><br><span class="line"><span class="comment"> * （也就是说可以借此方法往容器中注入bean定义）一个典型的使用就是ConfigurationClassPostProcessor，</span></span><br><span class="line"><span class="comment"> * 这个类用于解析<span class="doctag">@Component</span>，<span class="doctag">@Services</span>，<span class="doctag">@ComponentScan</span>，<span class="doctag">@Configuration</span>等注解，把注解对应的类转换成BeanDefinition然后注册到IoC容器中。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.annotation.ConfigurationClassPostProcessor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistryPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Modify the application context&#x27;s internal bean definition registry after its</span></span><br><span class="line"><span class="comment">     * standard initialization. All regular bean definitions will have been loaded,</span></span><br><span class="line"><span class="comment">     * but no beans will have been instantiated yet. This allows for adding further</span></span><br><span class="line"><span class="comment">     * bean definitions before the next post-processing phase kicks in.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 在标准bean初始化前修改、新增bean定义。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry the bean definition registry used by the application context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h5><p>自定义一个实现类，通过编码的方式往容器注入一个bean定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.beanfactorypostprocessor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.RootBeanDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过编程方式注册InjectBeanFromPostProcessor</span></span><br><span class="line"><span class="comment"> * 同样的本类设置成懒加载也是无效的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/17 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanDefinitionRegistryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBeanDefinitionRegistryPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span> + <span class="keyword">this</span>.getClass().getName() + <span class="string">&quot;被加载了。。。\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">//编程方式注入一个bean定义</span></span><br><span class="line">        registry.registerBeanDefinition(InjectBeanFromPostProcessor.class.getName(),</span><br><span class="line">                <span class="keyword">new</span> RootBeanDefinition(InjectBeanFromPostProcessor.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="comment">// 本方法的功能和BeanFactoryPostProcessor一样。本来就是从BeanFactoryPostProcessor继承过来的。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>InjectBeanFromPostProcessor</code>并没有使用任何注解，也没有通过其他方式导入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.beanfactorypostprocessor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过BeanDefinitionRegistryPostProcessor接口注入本类到容器中。</span></span><br><span class="line"><span class="comment"> * 并没有在类上使用任何注解，也没有通过其他方式导入容器，期望效果是容器启动完毕之后会打印构造方法的日志</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/23 下午11:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectBeanFromPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InjectBeanFromPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span> + <span class="keyword">this</span>.getClass().getName() + <span class="string">&quot;被加载了。。。\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.ubuntuvim.spring.beanfactorypostprocessor.MyBeanDefinitionRegistryPostProcessor被加载了。。。</span><br><span class="line"></span><br><span class="line">com.ubuntuvim.spring.beanfactorypostprocessor.InjectBeanFromPostProcessor被加载了。。。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果符合预期，<code>InjectBeanFromPostProcessor</code>成功注册到IoC容器中，并且可以被IoC容器实例化。</p><p>以上两个接口就是Spring框架提供的第一个扩展点，用于修改为实例化之前的bean定义信息。</p><h4 id="ConfigurationClassPostProcessor接口"><a href="#ConfigurationClassPostProcessor接口" class="headerlink" title="ConfigurationClassPostProcessor接口"></a>ConfigurationClassPostProcessor接口</h4><h5 id="接口源码-2"><a href="#接口源码-2" class="headerlink" title="接口源码"></a>接口源码</h5><h5 id="使用案例-2"><a href="#使用案例-2" class="headerlink" title="使用案例"></a>使用案例</h5><h4 id="SmartInitializingSingleton接口"><a href="#SmartInitializingSingleton接口" class="headerlink" title="SmartInitializingSingleton接口"></a>SmartInitializingSingleton接口</h4><p><strong>这个接口Spring4.1之后才有</strong></p><blockquote><p><code>SmartInitializingSingleton</code>是spring 4.1中引入的新特效，与<code>InitializingBean</code>的功能类似，都是<strong>bean实例化后执行自定义初始化</strong>，都是属于<a href="https://blog.csdn.net/alex_xfboy/article/details/51211054">spring bean生命周期</a>的增强。但是，<code>SmartInitializingSingleton</code>的<strong>定义及触发方式方式上有些区别</strong>，它的定义不在当前的bean中（a bean’s local construction phase），它是回调接口（针对<strong>非lazy单例Bean</strong>），回调的操作是由spring事件<code>ContextRefreshedEvent</code>触发。</p></blockquote><h5 id="接口源码-3"><a href="#接口源码-3" class="headerlink" title="接口源码"></a>接口源码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现该接口后，当所有单例 bean 都初始化完成以后， 容器会回调该接口的方法 afterSingletonsInstantiated。</span></span><br><span class="line"><span class="comment"> * 主要应用场合就是在所有单例 bean 创建完成之后，可以在该回调中做一些事情。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PostConstruct</span>是最先被执行的，然后是InitializingBean，最后是SmartInitializingSingleton</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 为什么是在当所有单例 bean 都初始化完成以后才执行这个接口的原因直接看源码就知道了：</span></span><br><span class="line"><span class="comment"> * AbstractApplicationContext.refresh() -&gt; finishBeanFactoryInitialization() -&gt; ConfigurableListableBeanFactory.preInstantiateSingletons()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 但是需要注意：不要再次接口中提前使用容器管理的bean对象，</span></span><br><span class="line"><span class="comment"> * 因为此时直接通过getBean()方法获取到的实例还没通过IoC容器的其他初始化后置处理的增强。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SmartInitializingSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有单例对象都是实例化完成之后就会回调这个接口实现类的此方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterSingletonsInstantiated</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SmartInitializingSingleton</code>接口的实现主要是Spring框架内部使用，目前Spring框架内部已经有差不多30个实现类。</p><p><img src="https://oscimg.oschina.net/oscnet/up-677ccab99e962d5562335695f80b97a8340.png" alt="SmartInitializingSingleton接口实现类"></p><p>一个很典型的应用是<code>EventListenerMethodProcessor</code>类，这个类的作用的是用来对 <code>@EventListener</code> 提供支持.</p><p>主要是标注了<code>@EventListener</code> 的方法进行解析, 然后转换为一个 <code>ApplicationListener</code>。解析的方法就是实现了<code>SmartInitializingSingleton</code>接口的<code>afterSingletonsInstantiated()</code>方法，在这个方法中处理。</p><h5 id="使用案例-3"><a href="#使用案例-3" class="headerlink" title="使用案例"></a>使用案例</h5><p>定义一个实现类，同时实现了<code>SmartInitializingSingleton</code>接口和<code>InitializingBean</code>接口，并且在类中使用<code>@PostConstruct</code>注解。验证这几种方式的初始化执行顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.beanpostprocess;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.SmartInitializingSingleton;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在所有bean实例化之后（初始化前）回调这个接口afterSingletonsInstantiated</span></span><br><span class="line"><span class="comment"> * 初始化操作执行顺序：<span class="doctag">@PostConstruct</span>是最先被执行的，然后是InitializingBean，最后是SmartInitializingSingleton</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySmartInitializingSingletonImpl</span> <span class="keyword">implements</span> <span class="title">SmartInitializingSingleton</span>, <span class="title">ApplicationContextAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokePostConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1. @PostConstruct注释方法被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterSingletonsInstantiated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3. SmartInitializingSingleton接口的afterSingletonsInstantiated()方法被执行了&quot;</span>);</span><br><span class="line">        InitBean initBean = applicationContext.getBean(InitBean.class);</span><br><span class="line">        initBean.f();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2. InitializingBean接口的afterPropertiesSet()方法被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. @PostConstruct注释方法被执行</span><br><span class="line">2. InitializingBean接口的afterPropertiesSet()方法被执行了</span><br><span class="line">3. SmartInitializingSingleton接口的afterSingletonsInstantiated()方法被执行了</span><br><span class="line">com.ubuntuvim.spring.beanpostprocess.InitBean的方法f()被调用</span><br></pre></td></tr></table></figure><h4 id="InstantiationAwareBeanPostProcessor接口"><a href="#InstantiationAwareBeanPostProcessor接口" class="headerlink" title="InstantiationAwareBeanPostProcessor接口"></a>InstantiationAwareBeanPostProcessor接口</h4><p>此接口主要的作用于目标对象实例化过程需要处理的事情，包括实例化对象前后过程以及实例化属性的设置。<code>InstantiationAwareBeanPostProcessor</code>是Spring框架非常非常重要的接口，不亚于<code>BeanPostProcessor</code>接口。特别是Spring框架内部，非常多的扩展功能都是通过实现<code>InstantiationAwareBeanPostProcessor</code>接口完成的。比如：<code>AutowiredAnnotationBeanPostProcessor</code>就是实现这个接口的实现了<code>@Autowire</code>和<code>@Value</code>注解的处理，这个接口还有一个很重要的子接口<code>SmartInstantiationAwareBeanPostProcessor</code>。</p><p>对于Spring框架的用户，Spring推荐使用它的一个适配器类<code>InstantiationAweraBeanPostProcessorAdapter</code>。</p><h5 id="接口源码-4"><a href="#接口源码-4" class="headerlink" title="接口源码"></a>接口源码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.beans.factory.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyDescriptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InstantiationAwareBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 它在目标对象实例化之前调用，该方法的返回值类型是Object，我们可以返回任何类型的值。</span></span><br><span class="line"><span class="comment">     * 由于这个时候目标对象还未实例化，所以这个返回值可以用来代替原本该生成的目标对象的实例(比如代理对象)。</span></span><br><span class="line"><span class="comment">     * 如果该方法的返回值代替原本该生成的目标对象，后续只有postProcessAfterInitialization方法会调用，其它方法不再调用；否则按照正常的流程走</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在目标对象实例化之后调用，这个时候对象已经被实例化，但是该实例的属性还未被设置，都是null。</span></span><br><span class="line"><span class="comment">     * 因为它的返回值是决定要不要调用postProcessPropertyValues方法的其中一个因素（因为还有一个因素是mbd.getDependencyCheck()）；</span></span><br><span class="line"><span class="comment">     * 如果该方法返回false,并且不需要check，那么postProcessPropertyValues就会被忽略不执行；如果返回true，postProcessPropertyValues就会被执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 和postProcessPropertyValues方法同样的作用，Spring5.1之后新增的方法，用于替换postProcessPropertyValues。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> PropertyValues <span class="title">postProcessProperties</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性值进行修改；如果postProcessAfterInstantiation方法返回false，该方法不会被调用。</span></span><br><span class="line"><span class="comment">     * 声明为过程，Spring5.1之后推荐使用postProcessProperties()方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> PropertyValues <span class="title">postProcessPropertyValues</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此接口的主要作用在<strong>目标对象的实例化过程中需要处理的事情</strong>，包括实例化对象的前后过程以及实例的属性设置。此接口是Spring框架内部使用的非常重要的接口，它是<code>BeanPostProcessor</code>的一个子接口，总共有6个方法。</p><ol><li><p><code>postProcessBeforeInitialization()</code>方法，继承至父类<code>BeanPostProcessor</code>接口中的方法,在Bean<strong>实例化完成且初始化方法执行之前</strong>执行</p></li><li><p><code>postProcessAfterInitialization()</code>方法，继承至父类<code>BeanPostProcessor</code>接口中的方法，在Bean<strong>实例化完成且初始化方法执行完成之后</strong>执行</p></li><li><p><code>postProcessBeforeInstantiation()</code>方法，自身方法，是最先执行的方法，它在目标对象<strong>实例化之前</strong>调用，该方法的返回值类型是<code>Object</code>，我们可以返回任何类型的值。<br>由于这个时候目标对象还未实例化，所以这个返回值可以用来代替原本该生成的目标对象的实例(比如代理对象)。<br>如果该方法的返回值代替原本该生成的目标对象，后续只有<code>postProcessAfterInitialization()</code>方法会调用，其它方法不再调用；否则按照正常的流程走</p></li><li><p><code>postProcessAfterInstantiation()</code>方法，在目标对象<strong>实例化之后</strong>调用，这个时候对象已经被实例化，但是该实例的属性还未被设置，都是null。<br>因为它的返回值是决定要不要调用<code>postProcessPropertyValues()</code>方法的其中一个因素（因为还有一个因素是<code>mbd.getDependencyCheck()</code>）；<br>如果该方法返回<code>false</code>,并且不需要check，那么<code>postProcessPropertyValues()</code>方法就会被忽略不执行；如果返回<code>true</code>，<code>postProcessPropertyValues()</code>方法就会被执行</p></li><li><p><code>postProcessPropertyValues()</code>方法（已经声明为过时，5.1版本之后推荐使用<code>postProcessPropertyValues()</code>方法），自身方法，对属性值进行修改；如果<code>postProcessAfterInstantiation()</code>方法返回false，该方法不会被调用。可以在该方法内对属性值进行修改</p></li><li><p><code>postProcessProperties()</code>方法，此方法和<code>postProcessPropertyValues()</code>方法是同样的作用。5.1版本之后推荐使用的方法。</p></li></ol><p>这个几个方法执行顺序如下图：</p><p><img src="https://oscimg.oschina.net/oscnet/up-1b60268dfc0f4c62017d84ec5f611d3ab27.png" alt="InstantiationAwareBeanPostProcessor方法执行顺序"></p><h5 id="使用案例-4"><a href="#使用案例-4" class="headerlink" title="使用案例"></a>使用案例</h5><p>接下来，通过学习Spring框架内部使用的实现类来学习这个接口的使用场景。</p><h5 id="实现类之一AutowiredAnnotationBeanPostProcessor"><a href="#实现类之一AutowiredAnnotationBeanPostProcessor" class="headerlink" title="实现类之一AutowiredAnnotationBeanPostProcessor"></a>实现类之一AutowiredAnnotationBeanPostProcessor</h5><p>此后置处理器是一个集大成者，它做了非常非常多的事情。是Spring框架非常重要第一个后置处理器，首先看下类结构。</p><pre class="mermaid">graph BTAutowiredAnnotationBeanPostProcessor -.-> MergedBeanDefinitionPostProcessorMergedBeanDefinitionPostProcessor --> BeanPostProcessorAutowiredAnnotationBeanPostProcessor -.-> PriorityOrderedPriorityOrdered --> OrderedAutowiredAnnotationBeanPostProcessor --> InstantiationAwareBeanPostProcessorAdapterInstantiationAwareBeanPostProcessorAdapter -.-> SmartInstantiationAwareBeanPostProcessorSmartInstantiationAwareBeanPostProcessor --> InstantiationAwareBeanPostProcessorInstantiationAwareBeanPostProcessor --> BeanPostProcessorAutowiredAnnotationBeanPostProcessor -.-> BeanFactoryAwareBeanFactoryAware --> Aware</pre><p>从类继承关系可以看到，它继承两个非常重要的后置处理器，第一个是<code>MergedBeanDefinitionBeanPostProcessor</code>，第二个是<code>InstantiationAwareBeanPostProcessor</code>。第一个在下一篇将会为你解析，第二个后置处理器在前面介绍过，<code>AutowiredAnnotationBeanPostProcessor</code>就是它的一个很重要的实现。</p><p>那么<code>AutowiredAnnotationBeanPostProcessor</code>重新实现这两个接口之后有做了什么呢？？</p><p>首先大概介绍它的功能：</p><ol><li>处理<code>@Value</code>注解</li><li><code>处理@Autowired</code>注解</li><li>处理<code>@Inject</code>注解</li><li>处理构造方法属性注入</li></ol><p><strong>注意</strong>：如果一个属性同时使用了<code>@Autowired</code>注解，也使用xml方式注入。那么注解注入的值会被xml注入的值覆盖，也就是说xml方式的注入是在注解注入之后执行。</p><p>另外<code>AutowiredAnnotationBeanPostProcessor</code>这个后置处理器在框架内部不是必须加载的，只有在项目中使用了<code>@ComponentScan</code>注解或者使用了<code>&lt;context:component-scan&gt;</code>标签或者使用<code>&lt;context:annotation-config&gt;</code>标签，Spring容器会自动加载此后置处理器。如果你自定义了或者重写了它，在项目加载时请把它排除，以免冲突。</p><p>摘其中2个很重要的方法讲下，一个是<code>postProcessMergedBeanDefinition()</code>方法，此方法用于查找出bean中使用了<code>@Autowired</code>注解的属性和使用此注解的方法，并且把属性名和方法名缓存起来；另一个方法是<code>postProcessProperties()</code>，这个方法用于属性值的注入，直接从缓存中获取到属性名或者方法名，然后通过反射注入值。</p><h4 id="postProcessMergedBeanDefinition方法"><a href="#postProcessMergedBeanDefinition方法" class="headerlink" title="postProcessMergedBeanDefinition方法"></a>postProcessMergedBeanDefinition方法</h4><p>查找出bean中使用了<code>@Autowired</code>注解的属性和使用此注解的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现接口MergedBeanDefinitionPostProcessor的方法：</span></span><br><span class="line"><span class="comment">     *  查询bean定义中是否有使用<span class="doctag">@Autowired</span>注解的属性并设置到缓存injectionMetadataCache中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanDefinition the merged bean definition for the bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanType the actual type of the managed bean instance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessMergedBeanDefinition</span><span class="params">(RootBeanDefinition beanDefinition, Class&lt;?&gt; beanType, String beanName)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 查询bean实例的属性中使用@Autowired注解的属性或者方法并缓存好。</span></span><br><span class="line">  InjectionMetadata metadata = findAutowiringMetadata(beanName, beanType, <span class="keyword">null</span>);</span><br><span class="line">  <span class="comment">// 检查属性是否已经被注入过，如果没有则把属性设置到缓存externallyManagedConfigMembers中。</span></span><br><span class="line">  metadata.checkConfigMembers(beanDefinition);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> InjectionMetadata <span class="title">findAutowiringMetadata</span><span class="params">(String beanName, Class&lt;?&gt; clazz, <span class="meta">@Nullable</span> PropertyValues pvs)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Fall back to class name as cache key, for backwards compatibility with custom callers.</span></span><br><span class="line">        String cacheKey = (StringUtils.hasLength(beanName) ? beanName : clazz.getName());</span><br><span class="line">        <span class="comment">// Quick check on the concurrent map first, with minimal locking.</span></span><br><span class="line">        InjectionMetadata metadata = <span class="keyword">this</span>.injectionMetadataCache.get(cacheKey);</span><br><span class="line">        <span class="keyword">if</span> (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>.injectionMetadataCache) &#123;</span><br><span class="line">                metadata = <span class="keyword">this</span>.injectionMetadataCache.get(cacheKey);</span><br><span class="line">                <span class="keyword">if</span> (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (metadata != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        metadata.clear(pvs);</span><br><span class="line">                    &#125;</span><br><span class="line">                    metadata = buildAutowiringMetadata(clazz);</span><br><span class="line">                    <span class="keyword">this</span>.injectionMetadataCache.put(cacheKey, metadata);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> metadata;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个方法是在创建bean的过程中回调方法。调用位置在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AbstractAutowireCapableBeanFactory#doCreateBean</span><br><span class="line">  &gt; AbstractAutowireCapableBeanFactory#applyMergedBeanDefinitionPostProcessors</span><br></pre></td></tr></table></figure><p>详细调用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Allow post-processors to modify the merged bean definition.</span></span><br><span class="line"><span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 执行后置处理器接口MergedBeanDefinitionPostProcessor，bean实例化之后，就可以通过反射获取到类或者属性上的注释信息</span></span><br><span class="line">      <span class="comment">// 处理@Resource、@Autowired、@Value注解的定义信息，并把这些注解的定义信息放在缓存中。待后续属性填充的时候使用。</span></span><br><span class="line">      <span class="comment">// 如果有则吧注解信息转换成AutowiredFieldElement对象或者AutowiredMethodElement对象或者ResourceElement对象</span></span><br><span class="line">      <span class="comment">// 实现类有：AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor等</span></span><br><span class="line">      applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                      <span class="string">&quot;Post-processing of merged bean definition failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用的时机是：bean实例化之后，属性填充之前（当然也是在初始化之前，属性填充完成才到初始化回调）。</p><p>通过方法<code>findAutowiringMetadata()</code>把使用<code>@Autowired</code>属性或者方法都找到并缓存到<code>injectionMetadataCache</code>里面，然后在填充属性的时候使用。</p><h4 id="postProcessProperties方法"><a href="#postProcessProperties方法" class="headerlink" title="postProcessProperties方法"></a>postProcessProperties方法</h4><p>此方法用于注入属性值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PropertyValues <span class="title">postProcessProperties</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 扫描查找到bean实例里面使用@Autowired的属性或者方法，</span></span><br><span class="line">  <span class="comment">// 但是在postProcessMergedBeanDefinition()方法中已经完成了属性或者方法是查找，并且缓存起来了</span></span><br><span class="line">  <span class="comment">// 所以再调此方法时直接从缓存里面获取。</span></span><br><span class="line">  InjectionMetadata metadata = findAutowiringMetadata(beanName, bean.getClass(), pvs);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 通过反射完成属性注入：field.set(target, value)</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> org.springframework.beans.factory.annotation.InjectionMetadata#inject</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    metadata.inject(bean, beanName, pvs);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> ex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">&quot;Injection of autowired dependencies failed&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pvs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>postProcessProperties()</code>方法的调用时机是在<code>postProcessMergedBeanDefinition()</code>方法之后，调用外置也是在创建bean的时候。调用位置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AbstractAutowireCapableBeanFactory#doCreateBean</span><br><span class="line">    &gt;AbstractAutowireCapableBeanFactory#populateBean </span><br></pre></td></tr></table></figure><p>调用时机：bean实例化完成之后，初始化之前，而且是在<code>postProcessAfterInstantiation()</code>方法之后。如果不记得请回到文章开头的调用顺序图。Spring框架内部的后置处理器回调时机是非常重要的。</p><p>调用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> BeanWrapper bw)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ………… 篇幅有限省略其他代码</span></span><br><span class="line">  PropertyDescriptor[] filteredPds = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">    <span class="comment">// 依赖注入模式不是byType或者byName的情况有可能为空，这两种情况执行了pvs = newPvs不会为null</span></span><br><span class="line">    <span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line">      pvs = mbd.getPropertyValues();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 属性注入，包括依赖对象注入，依赖集合注入，</span></span><br><span class="line"><span class="comment">                     * 比如下面这3种写法，都会在此完成属性注入</span></span><br><span class="line"><span class="comment">                     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">                     * private Fruit apple;</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">                     * private List&lt;InterfaceA&gt; interfaceAList;</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 同理，Map也是一样的</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">                     * private Map&lt;String, InterfaceA&gt; interfaceAMap;</span></span><br><span class="line"><span class="comment">                     * key就是实现类的beanName，value就是实现类实例对象。</span></span><br><span class="line"><span class="comment">                     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">                     * 其中AutowiredAnnotationBeanPostProcessor这个后置处理器用于给<span class="doctag">@Autowired</span>注解或者<span class="doctag">@Value</span>注解定义的属性注入值，</span></span><br><span class="line"><span class="comment">                     * 注入的步骤：1. 扫描bean实例中使用<span class="doctag">@Autowired</span>注解的属性和方法，2. 根据注入的类型从IoC容器中在匹配的bean；3. 通过反射执行赋值操作</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@see</span> org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#postProcessProperties</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@see</span> org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#postProcessPropertyValues</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 其中CommonAnnotationBeanPostProcessor这个后置处理器用于给<span class="doctag">@Resource</span>注解定义的属性注入值</span></span><br><span class="line"><span class="comment">                     * 同时这个类还处理了<span class="doctag">@PostConstruct</span>/<span class="doctag">@PreDestroy</span>这两个注解</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@see</span> org.springframework.context.annotation.CommonAnnotationBeanPostProcessor#postProcessProperties</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">        InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">        <span class="comment">// postProcessProperties()方法已经声明为过时。推荐使用postProcessPropertyValues()方法</span></span><br><span class="line">        PropertyValues pvsToUse = ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);</span><br><span class="line">        <span class="keyword">if</span> (pvsToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (filteredPds == <span class="keyword">null</span>) &#123;</span><br><span class="line">            filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">          &#125;</span><br><span class="line">          pvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">          <span class="comment">// 如果返回的属性值为null直接退出当前方法，说明没有可填充的属性</span></span><br><span class="line">          <span class="comment">// 在实现后置处理器的时候特别要注意接口方法的返回值已经执行顺序，如果第一个后置处理器就返回了null，</span></span><br><span class="line">          <span class="comment">// 那么同一类型的其他排在后面的就不会执行了</span></span><br><span class="line">          <span class="keyword">if</span> (pvsToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pvs = pvsToUse;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ………… 篇幅有限省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码的逻辑是比较简单的，获取到后置处理器后执行对应的回调完成的。详细的解释也可以看源码的注释。</p><p>到此通过Spring框架内部的<code>AutowiredAnnotationBeanPostProcessor</code>类学习了<code>InstantiationAwareBeanPostProcessor</code>这个后置处理器的使用。</p><p>如果你在开发过程中也需要用到一些自定义的注解，而又不知道该在什么时候让自定义的注解生效。那么你可以参考<code>AutowiredAnnotationBeanPostProcessor</code>的实现，来完成自定义注解的解析、应用。</p><h4 id="MergedBeanDefinitionPostProcessor接口"><a href="#MergedBeanDefinitionPostProcessor接口" class="headerlink" title="MergedBeanDefinitionPostProcessor接口"></a>MergedBeanDefinitionPostProcessor接口</h4><h5 id="接口源码-5"><a href="#接口源码-5" class="headerlink" title="接口源码"></a>接口源码</h5><h5 id="使用案例-5"><a href="#使用案例-5" class="headerlink" title="使用案例"></a>使用案例</h5><h4 id="SmartInstantiationAwareBeanPostProcessor接口"><a href="#SmartInstantiationAwareBeanPostProcessor接口" class="headerlink" title="SmartInstantiationAwareBeanPostProcessor接口"></a>SmartInstantiationAwareBeanPostProcessor接口</h4><h5 id="接口源码-6"><a href="#接口源码-6" class="headerlink" title="接口源码"></a>接口源码</h5><h5 id="使用案例-6"><a href="#使用案例-6" class="headerlink" title="使用案例"></a>使用案例</h5><h4 id="BeanFactoryAware-ApplicationContextAware-BeanNameAware接口"><a href="#BeanFactoryAware-ApplicationContextAware-BeanNameAware接口" class="headerlink" title="BeanFactoryAware/ApplicationContextAware/BeanNameAware接口"></a>BeanFactoryAware/ApplicationContextAware/BeanNameAware接口</h4><h5 id="接口源码-7"><a href="#接口源码-7" class="headerlink" title="接口源码"></a>接口源码</h5><h5 id="使用案例-7"><a href="#使用案例-7" class="headerlink" title="使用案例"></a>使用案例</h5><h4 id="CommonAnnotationBeanPostProcessor"><a href="#CommonAnnotationBeanPostProcessor" class="headerlink" title="CommonAnnotationBeanPostProcessor"></a>CommonAnnotationBeanPostProcessor</h4><h5 id="接口源码-8"><a href="#接口源码-8" class="headerlink" title="接口源码"></a>接口源码</h5><h5 id="使用案例-8"><a href="#使用案例-8" class="headerlink" title="使用案例"></a>使用案例</h5><h4 id="AutowiredAnnotationBeanPostProcessor"><a href="#AutowiredAnnotationBeanPostProcessor" class="headerlink" title="AutowiredAnnotationBeanPostProcessor"></a>AutowiredAnnotationBeanPostProcessor</h4><p>同前面的<code>InstantiationAwareBeanPostProcessor</code></p><h4 id="InitDestroyAnnotationBeanPostProcessor接口"><a href="#InitDestroyAnnotationBeanPostProcessor接口" class="headerlink" title="InitDestroyAnnotationBeanPostProcessor接口"></a>InitDestroyAnnotationBeanPostProcessor接口</h4><h5 id="接口源码-9"><a href="#接口源码-9" class="headerlink" title="接口源码"></a>接口源码</h5><h5 id="使用案例-9"><a href="#使用案例-9" class="headerlink" title="使用案例"></a>使用案例</h5>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring IoC原理</title>
      <link href="/2020/10/24/Spring/Spring%20IoC%E5%8E%9F%E7%90%86/"/>
      <url>/2020/10/24/Spring/Spring%20IoC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注意：本篇的源码使用Spring5.0以上版本。</p></blockquote><h2 id="BeanDefinition对象"><a href="#BeanDefinition对象" class="headerlink" title="BeanDefinition对象"></a>BeanDefinition对象</h2><p>Bean定义主要对象包括如下几个属性：</p><table><thead><tr><th>Property</th><th align="right">描述</th></tr></thead><tbody><tr><td>Class</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-class">bean实例</a></td></tr><tr><td>Name</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-beanname">Bean名称</a></td></tr><tr><td>Scope</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes">Bean类型（单例、原型..)</a></td></tr><tr><td>构造函数参数</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-collaborators">Dependency Injection</a></td></tr><tr><td>Properties</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-collaborators">Dependency Injection</a></td></tr><tr><td>Autowirging mode</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-autowire">自动注入模型</a></td></tr><tr><td>Lazy initizlization</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-lazy-init">懒加载模型</a></td></tr><tr><td>Iniitialization method</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-lifecycle-initializingbean">初始化方法</a></td></tr><tr><td>Destruction method</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-lifecycle-disposablebean">销毁方法</a></td></tr></tbody></table><p>bean定义所有属性大概有上百个。就以最常用的<code>RootBeanDefinition</code>为例，这个类是bean定义最核心的实现类。类中定义非常多属性，这些属性都是bean的定义信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Map with String keys and Object values. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; attributes = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Object source;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant for the default scope name: &#123;<span class="doctag">@code</span> &quot;&quot;&#125;, equivalent to singleton</span></span><br><span class="line"><span class="comment">     * status unless overridden from a parent bean definition (if applicable).</span></span><br><span class="line"><span class="comment">     * 默认bean作用域</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCOPE_DEFAULT = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates no external autowiring at all.</span></span><br><span class="line"><span class="comment">     * 自动注入模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setAutowireMode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUTOWIRE_NO = AutowireCapableBeanFactory.AUTOWIRE_NO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates autowiring bean properties by name.</span></span><br><span class="line"><span class="comment">     * 自动注入通过bean名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setAutowireMode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUTOWIRE_BY_NAME = AutowireCapableBeanFactory.AUTOWIRE_BY_NAME;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates autowiring bean properties by type.</span></span><br><span class="line"><span class="comment">     * 自动注入通过bean类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setAutowireMode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUTOWIRE_BY_TYPE = AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates autowiring a constructor.</span></span><br><span class="line"><span class="comment">     * 自动注入通过构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setAutowireMode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUTOWIRE_CONSTRUCTOR = AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates determining an appropriate autowire strategy</span></span><br><span class="line"><span class="comment">     * through introspection of the bean class.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setAutowireMode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> as of Spring 3.0: If you are using mixed autowiring strategies,</span></span><br><span class="line"><span class="comment">     * use annotation-based autowiring for clearer demarcation of autowiring needs.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUTOWIRE_AUTODETECT = AutowireCapableBeanFactory.AUTOWIRE_AUTODETECT;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates no dependency check at all.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setDependencyCheck</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEPENDENCY_CHECK_NONE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates dependency checking for object references.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setDependencyCheck</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEPENDENCY_CHECK_OBJECTS = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates dependency checking for &quot;simple&quot; properties.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setDependencyCheck</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.springframework.beans.BeanUtils#isSimpleProperty</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEPENDENCY_CHECK_SIMPLE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates dependency checking for all properties</span></span><br><span class="line"><span class="comment">     * (object references as well as &quot;simple&quot; properties).</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setDependencyCheck</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEPENDENCY_CHECK_ALL = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates the container should attempt to infer the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #setDestroyMethodName destroy method name&#125; for a bean as opposed to</span></span><br><span class="line"><span class="comment">     * explicit specification of a method name. The value &#123;<span class="doctag">@value</span>&#125; is specifically</span></span><br><span class="line"><span class="comment">     * designed to include characters otherwise illegal in a method name, ensuring</span></span><br><span class="line"><span class="comment">     * no possibility of collisions with legitimately named methods having the same</span></span><br><span class="line"><span class="comment">     * name.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Currently, the method names detected during destroy method inference</span></span><br><span class="line"><span class="comment">     * are &quot;close&quot; and &quot;shutdown&quot;, if present on the specific bean class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INFER_METHOD = <span class="string">&quot;(inferred)&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> Object beanClass;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String scope = SCOPE_DEFAULT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> abstractFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Boolean lazyInit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> autowireMode = AUTOWIRE_NO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> dependencyCheck = DEPENDENCY_CHECK_NONE;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String[] dependsOn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> autowireCandidate = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> primary = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, AutowireCandidateQualifier&gt; qualifiers = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Supplier&lt;?&gt; instanceSupplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> nonPublicAccessAllowed = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> lenientConstructorResolution = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String factoryBeanName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String factoryMethodName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> ConstructorArgumentValues constructorArgumentValues;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> MutablePropertyValues propertyValues;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MethodOverrides methodOverrides = <span class="keyword">new</span> MethodOverrides();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String initMethodName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String destroyMethodName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> enforceInitMethod = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> enforceDestroyMethod = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> synthetic = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> role = BeanDefinition.ROLE_APPLICATION;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Resource resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> BeanDefinitionHolder decoratedDefinition;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> AnnotatedElement qualifiedElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Determines if the definition needs to be re-merged. */</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> stale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> allowCaching = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isFactoryMethodUnique = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">volatile</span> ResolvableType targetType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field for caching the determined Class of a given bean definition. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">volatile</span> Class&lt;?&gt; resolvedTargetType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field for caching if the bean is a factory bean. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">volatile</span> Boolean isFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field for caching the return type of a generically typed factory method. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">volatile</span> ResolvableType factoryMethodReturnType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field for caching a unique factory method candidate for introspection. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">volatile</span> Method factoryMethodToIntrospect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Common lock for the four constructor fields below. */</span></span><br><span class="line"><span class="keyword">final</span> Object constructorArgumentLock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field for caching the resolved constructor or factory method. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">Executable resolvedConstructorOrFactoryMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field that marks the constructor arguments as resolved. */</span></span><br><span class="line"><span class="keyword">boolean</span> constructorArgumentsResolved = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field for caching fully resolved constructor arguments. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">Object[] resolvedConstructorArguments;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field for caching partly prepared constructor arguments. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">Object[] preparedConstructorArguments;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Common lock for the two post-processing fields below. */</span></span><br><span class="line"><span class="keyword">final</span> Object postProcessingLock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field that indicates MergedBeanDefinitionPostProcessor having been applied. */</span></span><br><span class="line"><span class="keyword">boolean</span> postProcessed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field that indicates a before-instantiation post-processor having kicked in. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">volatile</span> Boolean beforeInstantiationResolved;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Member&gt; externallyManagedConfigMembers;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; externallyManagedInitMethods;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; externallyManagedDestroyMethods;</span><br></pre></td></tr></table></figure><h2 id="Spring中Bean生命周期"><a href="#Spring中Bean生命周期" class="headerlink" title="Spring中Bean生命周期"></a>Spring中Bean生命周期</h2><p><img src="/Users/ubuntuvim/code/xcoding/source/_posts/Spring/up-ee3f05213d700d84185d441cd3add81063f.png" alt="Spring中Bean生命周期"></p><p>这个图还缺少一个后置处理器，在最上面应该还有一个<code>BeanDefinitionRegistryPostProcess</code>，这个后置处理器在<code>BeanFactoryPostProcessor</code>之前执行。</p><h2 id="Spring-IoC体系结构"><a href="#Spring-IoC体系结构" class="headerlink" title="Spring IoC体系结构"></a>Spring IoC体系结构</h2><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>Spring Bean的创建是典型的工厂模式，这一系列的Bean工厂也就是IoC容器为开发者管理对象间的依赖关系提供了很多的便利和基础服务，在Spring中有许多的实现提供用户选择和使用。最核心的类结构如下：</p><pre class="mermaid">graph BTListableBeanFactory --> BeanFactoryConfigurableListableBeanFactory --> ListableBeanFactoryDefaultListableBeanFactory -.-> ConfigurableListableBeanFactoryHierarchicalBeanFactory --> BeanFactoryConfigurableBeanFactory --> HierarchicalBeanFactoryConfigurableListableBeanFactory --> ConfigurableBeanFactoryAutowireCapableBeanFactory --> BeanFactoryConfigurableListableBeanFactory --> AutowireCapableBeanFactoryAbstractAutowireCapableBeanFactory -.-> ConfigurableBeanFactoryDefaultListableBeanFactory --> AbstractAutowireCapableBeanFactory</pre><p>其中<code>BeanFactory</code>作为顶层的接口，它定义了IoC容器的基本功能实现，比如<code>getBean()</code>方法就是这个接口定义的。<br>它有三个子类（或者是实现类），它们是：<code>ListableBeanFactory</code>、<code>HierarchicalBeanFactory</code>和<code>AutowireCapableBeanFactory</code>。但是从上图可以看到最终的默认实现类是<code>DefaultListableBeanFactory</code>。它实现了所有的接口，这样做的目的是什么呢？<br>查阅相关的资料可以发现，这些几个接口的实现都是有特定的使用场景的，它们主要是在Spring内部操作对象的传递和转换的过程中，对对象的数据访问所做的限制。比如<code>ListableBeanFactory</code>接口表示这些bean是可列表的；<code>HierarchicalBeanFactory</code>表示这些bean是有继承关系的，也就是说这些bean是可能有父类bean；<code>AutowireCapableBeanFactory</code>接口定义了bean的自动装配规则。这四个接口共同定义了Bean的集合，Bean之间的关系，Bean的行为，从而组成了IoC容器的基本结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对FactoryBean的转义定义，如果使用beanName获取到的是FactoryBean接口中getObject()方法返回的实例</span></span><br><span class="line"><span class="comment">     * 如果要拿到FactoryBean本身则需要加上&amp;前缀，applicationContext.getBean(&amp;beanName)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String FACTORY_BEAN_PREFIX = <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据beanName获取容器中实例化好的bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的名字和Class类型来得到bean实例，增加了类型安全验证机制。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取bean实例时可以传递构造方法的参数，args就是构造方法的参数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的类型获取bean实例。比如getBean(User.class)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的类型和构造函数的参数获取bean实例。比如getBean(User.class, age, name)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个提供器类型的bean，通常是Spring框架内部使用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">ObjectProvider&lt;T&gt; <span class="title">getBeanProvider</span><span class="params">(Class&lt;T&gt; requiredType)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">ObjectProvider&lt;T&gt; <span class="title">getBeanProvider</span><span class="params">(ResolvableType requiredType)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供对bean的检索，看看是否在IOC容器有这个名字的bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsBean</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isPrototype</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String name, Class&lt;?&gt; typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到bean实例的Class类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getType(String name, <span class="keyword">boolean</span> allowFactoryBeanInit) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到bean的别名，如果根据别名检索，那么其原名也会被检索出来    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] getAliases(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FactoryBean</code>只定义了IoC容器的基本行为，它并不关心bean是如何定义，怎么加载的。<br>而具体是定义和加载是在其他的实现类中处理的，比如<code>XmlBeanFactory</code>、<code>ClasspathXmlApplicationContext</code>等。<br><code>XmlBeanFactory</code>是容器的最基本实现（<em>但是目前这个类已经声明为过时</em>），其他的加载类都是在此基础上的扩展。</p><h4 id="BeanDefinition（bean定义信息，IoC核心数据结构）"><a href="#BeanDefinition（bean定义信息，IoC核心数据结构）" class="headerlink" title="BeanDefinition（bean定义信息，IoC核心数据结构）"></a>BeanDefinition（bean定义信息，IoC核心数据结构）</h4><p>Spring容器管理了我们定义的各种bean对象及其相互关系，bean在对象实现是以<code>BeanDefinition</code>类描述的。</p><pre class="mermaid">graph BTAttributeAccessorSupport -.-> AttributeAccessorBeanMatadataAttributeAccessor --> AttributeAccessorSupportBeanMatadataAttributeAccessor -.-> BeanMatadataElementAbstractBeanDefinition --> BeanMatadataAttributeAccessorRootBeanDefinition --> AbstractBeanDefinitionGenericBeanDefinition --> AbstractBeanDefinitionChildBeanDefinition --> AbstractBeanDefinitionBeanDefinition --> AttributeAccessorBeanDefinition --> BeanMatadataElementAbstractBeanDefinition -.-> BeanDefinition</pre><p>Bean的解析过程非常复杂，功能被分的很细，因为这里需要被扩展的地方非常多，也提供了很多接口给开发者用于修改bean的定义。保证了足够的灵活性，以应对变化。Bean的解析主要是对Spring配置文件或者配置类的解析，解析过程如下：</p><pre class="mermaid">graph BTXmlBeanDefinitionReader --> AbstractBeanDefinitionReaderAbstractBeanDefinitionReader -.-> BeanDefinitionReaderXmlBeanDefinitionReader -.-> DefaultBeanDefinitionDocumentReaderDefaultBeanDefinitionDocumentReader -.-> BeanDefinitionDocumentReaderXmlBeanDefinitionReader -.-> BeanDefinitionDocumentReader</pre><h2 id="IoC-容器初始化、bean实例化（核心内容）"><a href="#IoC-容器初始化、bean实例化（核心内容）" class="headerlink" title="IoC 容器初始化、bean实例化（核心内容）"></a>IoC 容器初始化、bean实例化（核心内容）</h2><p>IoC容器的初始化包括<code>BeanDefinition</code>的<code>Resource</code>定位、载入和注册三个基本过程。我们以<code>ApplicationContext</code>为例，这个类是我们最常见也是最常用的。</p><p>主要类关系如下：</p><pre class="mermaid">graph BTFileSystemXmlApplicationContext --> AbstractXmlApplicationContextClassPathXmlApplicationContext --> AbstractXmlApplicationContextAbstractXmlApplicationContext --> AbstractRefreshableConfigApplicationContextAbstractRefreshableConfigApplicationContext --> AbstractRefreshableApplicationContextAbstractRefreshableApplicationContext --> AbstractApplicationContextAbstractApplicationContext --> DefaultResourceLoaderDefaultResourceLoader -.-> ResourceLoaderAbstractApplicationContext -.-> ConfigurableApplicationContextConfigurableApplicationContext --> ApplicationContextApplicationContext --> ListableBeanFactoryXmlWebApplication --> AbstractRefreshableWebApplicationContextAbstractRefreshableWebApplicationContext --> AbstractRefreshableConfigApplicationContextAbstractRefreshableWebApplicationContext -.-> ConfigurableWebApplicationContextConfigurableWebApplicationContext --> ConfigurableApplicationContextConfigurableWebApplicationContext --> WebApplicationContextWebApplicationContext --> ApplicationContextApplicationContext --> HierarchicalBeanFactoryAnnotactionConfigApplicationContext --> GenericApplicationContext AnnotactionConfigApplicationContext -.-> AnnotationConfigRegistryGenericApplicationContext --> AbstractApplicationContextGenericApplicationContext -.-> BeanDefinitionRegistry</pre><p><code>ApplicationContext</code>运行上下文嵌套，通过保持父上下文可以维持一个上下文体系。对于bean的查找可以在这个上下文体系中发生，首先检查当前上下文，其次是父上下文，逐级向上，这样为不同的Spring应用提供了一个共享的bean定义环境。</p><p>主要有三种方式可以使用容器：<code>ClassPathXmlApplicationContext</code>、<code>FileSystemXmlApplicationContext</code>、<code>AnnotactionConfigApplicationContext</code>、<code>XmlWebApplicationContext</code>，其中第三种是最常用的，也是使用最广泛、最简单的。对于3.0之前更多是使用的xml配置方式，但是现在使用最多的是基于注解的方式，特别是springboot，全部都是基于注解做到零配置。<code>XmlWebApplicationContext</code>基本都是在SpringMVC的项目中使用。</p><blockquote><p>以<code>FileSystemXmlApplicationContext</code>为例讲解IoC容器从读取xml -&gt; 解析xml配置信息 -&gt; 转换成BeanDefinition -&gt; 初始化bean对象 -&gt; 设置bean属性（依赖） -&gt; bean销毁 整个bean生命周期过程。</p></blockquote><h3 id="bean定义资源准备（设置xml配置文件路径、设置资源加载器）"><a href="#bean定义资源准备（设置xml配置文件路径、设置资源加载器）" class="headerlink" title="bean定义资源准备（设置xml配置文件路径、设置资源加载器）"></a>bean定义资源准备（设置xml配置文件路径、设置资源加载器）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title">AbstractXmlApplicationContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemXmlApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemXmlApplicationContext</span><span class="params">(ApplicationContext parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemXmlApplicationContext</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> String[] &#123;configLocation&#125;, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemXmlApplicationContext</span><span class="params">(String... configLocations)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(configLocations, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemXmlApplicationContext</span><span class="params">(String[] configLocations, ApplicationContext parent)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(configLocations, <span class="keyword">true</span>, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemXmlApplicationContext</span><span class="params">(String[] configLocations, <span class="keyword">boolean</span> refresh)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(configLocations, refresh, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemXmlApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            String[] configLocations, <span class="keyword">boolean</span> refresh, <span class="meta">@Nullable</span> ApplicationContext parent)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建资源加载器</span></span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        setConfigLocations(configLocations);</span><br><span class="line">        <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">            refresh();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 这个方法会在解析xml的子类AbstractBeanDefinitionReader中回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Resource <span class="title">getResourceByPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path.startsWith(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">            path = path.substring(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileSystemResource(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类提供了非常多的扩展，可以使用不同类型的构造函数来创建容器。但是都最终会调用到这个构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileSystemXmlApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            String[] configLocations, <span class="keyword">boolean</span> refresh, <span class="meta">@Nullable</span> ApplicationContext parent)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        setConfigLocations(configLocations);</span><br><span class="line">        <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">            refresh();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个构造方法在执行的时候首先执行父类<code>AbstractXmlApplicationContext</code>的构造方法，父类构造方法会先设置bean资源加载器。然后再调用父类的<code>setConfigLocations(configLoacations)</code>方法，这个方法用于设置bean定义资源文件（xml文件）的路径。通过类层架追踪，xml资源的加载最终是在<code>FileSystemXmlApplicationContext</code>的父类再网上几层的父类<code>AbstractXmlApplicationContext</code>中实现的。</p><pre class="mermaid">graph BTFileSystemXmlApplicationContext -->|super方法| AbstractXmlApplicationContextAbstractXmlApplicationContext -->|super方法| AbstractRefreshableConfigApplicationContextAbstractRefreshableConfigApplicationContext -->|super方法| AbstractRefreshableApplicationContextAbstractRefreshableApplicationContext -->|super方法| AbstractApplicationContextAbstractApplicationContext --> |this| AbstractApplicationContextAbstractApplicationContext --> getResourcePatternResolver获取资源加载器</pre><p><code>AbstractApplicationContext</code>的资源加载过程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FileSystemXmlApplicationContext不断的通过super()方法找到父类的父类的父类。。。</span></span><br><span class="line"><span class="comment">// 最终到达它真正的实现地方</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获取资源处理器（读取spring配置文件）</span></span><br><span class="line">  <span class="keyword">this</span>.resourcePatternResolver = getResourcePatternResolver();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ResourcePatternResolver <span class="title">getResourcePatternResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 因为AbstractApplicationContext继承了DefaultResourceLoader</span></span><br><span class="line">  <span class="comment">// DefaultResourceLoader实现了ResourceLoader接口，所以可以直接传this进去</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> PathMatchingResourcePatternResolver(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源加载器初始化完成之后，开始设置资源路径。<code>setConfigLocations(configLocations);</code>这个方法也是调用父类<code>AbstractRefreshableConfigApplicationContext</code>的方法完成的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigLocations</span><span class="params">(<span class="meta">@Nullable</span> String... locations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (locations != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Assert.noNullElements(locations, <span class="string">&quot;Config locations must not be null&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.configLocations = <span class="keyword">new</span> String[locations.length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; locations.length; i++) &#123;</span><br><span class="line">                <span class="keyword">this</span>.configLocations[i] = resolvePath(locations[i]).trim();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.configLocations = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个方法执行完毕之后，我们需要加载的bean资源文件都转成一个<code>String</code>数组，保存到变量<code>configLocations</code>中。</p><p>资源加载器准备好之后就是开始加载解析bean配置，然后根据bean定义执行各种操作，包括定义解析、bean初始化等等。</p><h3 id="加载、解析、转换XML定义，实例化bean"><a href="#加载、解析、转换XML定义，实例化bean" class="headerlink" title="加载、解析、转换XML定义，实例化bean"></a>加载、解析、转换XML定义，实例化bean</h3><p>Spring IoC容器对bean定义的加载是从<code>refresh()</code>方法开始的，这个方法是一个模板方法，它的作用是：在创建IoC容器前，如果已经有容器则把容器销毁关闭，然后再重新创建一个新的容器，然后再对容器做初始化。<code>FileSystemXmlApplicationContext</code>通过调用父类的<code>AbstractApplicationContext.refresh()</code>方法实现容器的创建，加载，初始等一系列操作。回到这个类的构造方法，可以看到在构造方法内部调用了<code>refresh()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileSystemXmlApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            String[] configLocations, <span class="keyword">boolean</span> refresh, <span class="meta">@Nullable</span> ApplicationContext parent)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// 通过类层级，一直通过super()方法一层层往上找父类的父类的父类。。。。</span></span><br><span class="line">        <span class="comment">// 最终找到AbstractApplicationContext的构造方法，</span></span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        setConfigLocations(configLocations);</span><br><span class="line">        <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">            refresh();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过类层级往上找，他的父类<code>AbstractXmlApplicationContext</code>、<code>AbstractRefreshableConfigApplicationContext</code>、<code>AbstractRefreshableApplicationContext</code>都没有重写<code>refresh()</code>方法，这个方法的实现是在<code>AbstractApplicationContet</code>中实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">            <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">            <span class="comment">// 准备此上下文以进行刷新。</span></span><br><span class="line">            prepareRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">            <span class="comment">// 获取beanFactory实例</span></span><br><span class="line">            ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">            <span class="comment">// 准备上下文使用的BeanFactory</span></span><br><span class="line">            prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">                <span class="comment">// 允许子类处理BeanFactory后置处理器</span></span><br><span class="line">                postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">                <span class="comment">// 转到ConfigurationClassPostProcessor里面执行</span></span><br><span class="line">                <span class="comment">// 执行bean工厂的后置处理器，里面会有非常多的，非常复杂的BeanFactoryPostProcessor实现类的执行。</span></span><br><span class="line">                invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">                <span class="comment">// 转到PostProcessorRegistrationDelegate</span></span><br><span class="line">                <span class="comment">// 注册bean工厂的后置处理器（仅仅是把Spring内部定义的和用户定义的BeanPostProcessor注册到容器中，后面的步骤才会真正执行），</span></span><br><span class="line">                <span class="comment">// 这些后置处理器在bean的构造方法执行之后，在执行init方法前后执行指定的逻辑</span></span><br><span class="line">                registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">                <span class="comment">// 初始化上下文的消息资源，比如message-xxx.properties</span></span><br><span class="line">                initMessageSource();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">                <span class="comment">// 初始化上下文多波器</span></span><br><span class="line">                initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">                <span class="comment">// 在上下文中初始化其他的bean，子类实现</span></span><br><span class="line">                onRefresh();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">                <span class="comment">// 检查并注册监听器</span></span><br><span class="line">                registerListeners();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">                <span class="comment">// 初始化剩下其他的单例bean，包括FactoryBean，（用户定义的大部分类都是在这里实例化的）</span></span><br><span class="line">                <span class="comment">// 非常非常重要的方法，是整个IOC容器核心部分</span></span><br><span class="line">                finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">                <span class="comment">// 初始化上下文生命周期处理器，发布事件</span></span><br><span class="line">                finishRefresh();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                    logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">                destroyBeans();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">                cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line">                <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">                resetCommonCaches();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>refresh()</code>方法的主要作用为了IoC容器bean的生命周期管理提供条件，Spring IoC容器载入bean定义资源文件从其子类<code>refreshBeanFactory()</code>方法启动。在创建IoC容器前，如果已经存在则把已经创建的容器销毁关闭，以保障<code>refresh()</code>之后是新建的、单例的容器。</p><p>这个方法就是Spring最最最核心的实现，整个Spring最核心的特性也是在这个方法实现的，包括后置处理器、事件发布、bean加载、<code>@Component @Autowired</code>等等注解、AOP等，下面逐个方法解析学习。</p><h3 id="prepareRefresh"><a href="#prepareRefresh" class="headerlink" title="prepareRefresh()"></a><code>prepareRefresh()</code></h3><p>这个方法比较简单，就是为容器的创建做准备，标记容器的状态（激活状态为true，关闭状态为false），打印容器开始启动的时间。</p><h3 id="obtainFreshBeanFactory"><a href="#obtainFreshBeanFactory" class="headerlink" title="obtainFreshBeanFactory();"></a><code>obtainFreshBeanFactory();</code></h3><p>这个方法为容器的做了非常多的工作，设置bean定义的资源加载器，加载bean定义为<code>BeanDefinition</code>对象，并保存到容器的缓存中（保存在<code>ConfigurableListableBeanFactory</code>实例的Map成员属性中）。当然这一步仅仅是加载把定义信息转换成容器所需要的数据结构，并未做bean的实例化。目前的bean还没开始创建呢，还是在内存中的一些定义信息。</p><p><code>AbstractApplicationContext</code>的<code>obtainFreshBeanFactory()</code>方法调用子类容器的<code>refreshBaenFactory()</code>方法，启动容器载入bean定义资源文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 调用子类AbstractRefreshableApplicationContext.refreshBeanFactory()方法</span></span><br><span class="line">  <span class="comment">// 此方法由子类实现，使用委派设计模式，父类定义了抽象refreshBeanFactory方法，具体实现调用子类的方法。</span></span><br><span class="line">  refreshBeanFactory();  </span><br><span class="line">  <span class="keyword">return</span> getBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建容器、加载bean定义信息"><a href="#创建容器、加载bean定义信息" class="headerlink" title="创建容器、加载bean定义信息"></a>创建容器、加载bean定义信息</h4><p>通过调用<code>AbstractRefreshableApplicationContext.refreshBeanFactory()</code>创建一个新的容器（主要是创建了<code>DefaultListableBeanFactory</code>实例对象，准备好用于保存bean定义的缓存Map，然后加载bean定义到Map中（非常复杂的步骤）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This implementation performs an actual refresh of this context&#x27;s underlying</span></span><br><span class="line"><span class="comment">     * bean factory, shutting down the previous bean factory (if any) and</span></span><br><span class="line"><span class="comment">     * initializing a fresh bean factory for the next phase of the context&#x27;s lifecycle.</span></span><br><span class="line"><span class="comment">     * 实现上下文刷新，如果已经有bean fatory则先关闭，再重新初始化一个bean factory。</span></span><br><span class="line"><span class="comment">     * 此方法会在AbstractApplicationContext的refresh()方法中被调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// 先判断是否已经存在BeanFactory，如果当前线程已经初始化过了，则先销毁重新创建一个</span></span><br><span class="line">        <span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">            destroyBeans();</span><br><span class="line">            closeBeanFactory();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">            beanFactory.setSerializationId(getId());</span><br><span class="line">            <span class="comment">// 容器定制化，设置启动参数、开启注解自动装配等等。</span></span><br><span class="line">            customizeBeanFactory(beanFactory);</span><br><span class="line">            <span class="comment">// 加载bean定义，非常重要的一个方法</span></span><br><span class="line">            <span class="comment">// 由子类AbstractXmlApplicationContext实现加载bean定义</span></span><br><span class="line">            <span class="comment">// 使用委派模式，父类定义抽象，具体实现由子类实现</span></span><br><span class="line">            loadBeanDefinitions(beanFactory);</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">                <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">&quot;I/O error parsing bean definition source for &quot;</span> + getDisplayName(), ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="加载bean定义"><a href="#加载bean定义" class="headerlink" title="加载bean定义"></a>加载bean定义</h5><p><code>AbstractXmlApplicationContext.loadBeanDefinitions(beanFactory)</code>方法在一级子类<code>AbstractRefreshableApplicationContext</code>并没有实现，也是声明为<code>abstract</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException</span>;</span><br></pre></td></tr></table></figure><p>在他的二级子类<code>AbstractRefreshableConfigApplicationContext</code>也没有实现，而是在它的三级级子类<code>AbstractXmlApplicationContext</code>才实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Loads the bean definitions via an XmlBeanDefinitionReader.</span></span><br><span class="line"><span class="comment">     * 通过XmlBeanDefinitionReader加载所有的bean定义，</span></span><br><span class="line"><span class="comment">     * 此方法在AbstractApplicationContext中定义了抽象，由子类实现。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.springframework.beans.factory.xml.XmlBeanDefinitionReader</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #initBeanDefinitionReader</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #loadBeanDefinitions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">  <span class="comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></span><br><span class="line">  <span class="comment">// 创建bean定义读取器，通过回调设置到容器中，不同的子类设置不同的读取器（有些是读取xml配置，有的是读取java代码的bean定义）</span></span><br><span class="line">  XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Configure the bean definition reader with this context&#x27;s</span></span><br><span class="line">  <span class="comment">// resource loading environment.</span></span><br><span class="line">  <span class="comment">// 加载上下文的环境配置，配置bean定义</span></span><br><span class="line">  beanDefinitionReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</span><br><span class="line">  <span class="comment">// 设置资源加载器，</span></span><br><span class="line">  <span class="comment">// 因为本类的最上层父类DefaultResourceLoader也继承了DefaultResourceLoader，所以可以直接传this。</span></span><br><span class="line">  beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);</span><br><span class="line">  beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allow a subclass to provide custom initialization of the reader,</span></span><br><span class="line">  <span class="comment">// then proceed with actually loading the bean definitions.</span></span><br><span class="line">  <span class="comment">// 允许子类提供自定义的初始化读取器reader，然后处理加载bean定义</span></span><br><span class="line">  initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">  <span class="comment">// 加载bean定义</span></span><br><span class="line">  loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-AbstractXmlApplicationContext-loadBeanDefinitions-beanDefinitionReader"><a href="#1-AbstractXmlApplicationContext-loadBeanDefinitions-beanDefinitionReader" class="headerlink" title="1. AbstractXmlApplicationContext.loadBeanDefinitions(beanDefinitionReader)"></a>1. AbstractXmlApplicationContext.loadBeanDefinitions(beanDefinitionReader)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">  <span class="comment">// 获取到工厂开始加载之前就设置的配置文件路径，</span></span><br><span class="line">  <span class="comment">// ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;spring-env-test.xml&quot;);</span></span><br><span class="line">  <span class="comment">// 由子类实现bean定义资源，子类实现getConfigResources()方法，比如ClassPathXmlApplicationContext的构造方法里就重写了setConfigLocations()</span></span><br><span class="line">  Resource[] configResources = getConfigResources();</span><br><span class="line">  <span class="keyword">if</span> (configResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">    reader.loadBeanDefinitions(configResources);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 子类实现bean定义资源路径，子类实现getConfigLocations()方法</span></span><br><span class="line">  <span class="comment">// 如果资源定位configResources为空，则获取子类的路径资源，</span></span><br><span class="line">  <span class="comment">// 比如，子类FileSystemXmlApplicationContext构造方法中实现了getConfigLocations()方法，指定的文件路径。</span></span><br><span class="line">  String[] configLocations = getConfigLocations();</span><br><span class="line">  <span class="keyword">if</span> (configLocations != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用AbstractBeanDefinitionReader.loadBeanDefinitions()方法</span></span><br><span class="line">    reader.loadBeanDefinitions(configLocations);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-AbstractBeanDefinitionReader-loadBeanDefinitions-方法"><a href="#2-AbstractBeanDefinitionReader-loadBeanDefinitions-方法" class="headerlink" title="2. AbstractBeanDefinitionReader.loadBeanDefinitions()方法"></a>2. AbstractBeanDefinitionReader.loadBeanDefinitions()方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location, <span class="meta">@Nullable</span> Set&lt;Resource&gt; actualResources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到实例化的资源读取器。在构造方法里面已经做了初始化</span></span><br><span class="line">  <span class="comment">// 初始化：this.resourceLoader = new PathMatchingResourcePatternResolver();</span></span><br><span class="line">  ResourceLoader resourceLoader = getResourceLoader();</span><br><span class="line">  <span class="keyword">if</span> (resourceLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">      <span class="string">&quot;Cannot load bean definitions from location [&quot;</span> + location + <span class="string">&quot;]: no ResourceLoader available&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// resourceLoader就是PathMatchingResourcePatternResolve。</span></span><br><span class="line">  <span class="comment">// PathMatchingResourcePatternResolver实现了ResourcePatternResolver接口</span></span><br><span class="line">  <span class="keyword">if</span> (resourceLoader <span class="keyword">instanceof</span> ResourcePatternResolver) &#123;</span><br><span class="line">    <span class="comment">// Resource pattern matching available.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 把符合路径下配置封装成Resource</span></span><br><span class="line">      Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class="line">      <span class="comment">// 加载bean定义比如ClassPathXmlApplicationContext中指定的classpath*:/application.xml</span></span><br><span class="line">      <span class="keyword">int</span> count = loadBeanDefinitions(resources);</span><br><span class="line">      <span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Collections.addAll(actualResources, resources);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Loaded &quot;</span> + count + <span class="string">&quot; bean definitions from location pattern [&quot;</span> + location + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">        <span class="string">&quot;Could not resolve bean definition resource pattern [&quot;</span> + location + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Can only load single resources by absolute URL.</span></span><br><span class="line">    <span class="comment">// 通过绝对路径加载单个配置文件，比如FileSystemXmlApplicationContext中指定的</span></span><br><span class="line">    Resource resource = resourceLoader.getResource(location);</span><br><span class="line">    <span class="comment">// 调用子类的XmlBeanDefinitionReader.loadBeanDefinitions(Resource)方法</span></span><br><span class="line">    <span class="keyword">int</span> count = loadBeanDefinitions(resource);</span><br><span class="line">    <span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">      actualResources.add(resource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;Loaded &quot;</span> + count + <span class="string">&quot; bean definitions from location [&quot;</span> + location + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-DefaultResourceLoader-resourceLoader-getResource-location"><a href="#3-DefaultResourceLoader-resourceLoader-getResource-location" class="headerlink" title="3. DefaultResourceLoader.resourceLoader.getResource(location)"></a>3. DefaultResourceLoader.resourceLoader.getResource(location)</h5><p>以<code>FileSystemXmlApplicationContext</code>为例，加载资源会跳转到<code>resourceLoader.getResource(location)</code>这行，进入后发现最终会交给<code>DefaultResourceLoader.getResource()</code>方法实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Resource <span class="title">getResource</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">  Assert.notNull(location, <span class="string">&quot;Location must not be null&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 协议类的路径</span></span><br><span class="line">  <span class="keyword">for</span> (ProtocolResolver protocolResolver : getProtocolResolvers()) &#123;</span><br><span class="line">    Resource resource = protocolResolver.resolve(location, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (resource != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> resource;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 文件系统方式</span></span><br><span class="line">  <span class="keyword">if</span> (location.startsWith(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// getResourceByPath也被子类FileSystemXmlApplicationContext重写了，</span></span><br><span class="line">    <span class="comment">// 如果是使用FileSystemXmlApplicationContext来初始化容器，则会回调子类重写的方法。返回FileSystemResource对象</span></span><br><span class="line">    <span class="keyword">return</span> getResourceByPath(location);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 类路径方式：classpath:*/application.xml</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (location.startsWith(CLASSPATH_URL_PREFIX)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ClassPathResource(location.substring(CLASSPATH_URL_PREFIX.length()), getClassLoader());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Try to parse the location as a URL...</span></span><br><span class="line">      URL url = <span class="keyword">new</span> URL(location);</span><br><span class="line">      <span class="keyword">return</span> (ResourceUtils.isFileURL(url) ? <span class="keyword">new</span> FileUrlResource(url) : <span class="keyword">new</span> UrlResource(url));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (MalformedURLException ex) &#123;</span><br><span class="line">      <span class="comment">// No URL -&gt; resolve as resource path.</span></span><br><span class="line">      <span class="keyword">return</span> getResourceByPath(location);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是加载本地文件系统资源之后，进入到<code>getResource</code>第二种情况<code>startWitch(&quot;/&quot;)</code>，然后执行<code>getResourceByPath()</code>方法，此方法被<code>FileSystemApplicationContext</code>重写了，所以执行的时候是执行子类重写了的方法体，拿到一个<code>FileSystemResource</code>对象。</p><p>拿到资源之后，回到<code>AbstractBeanDefinitionReader.loadBeanDefinitions()</code>。调用<code>loadBeanDefinitions()</code>方法开始加载资源文件里面的bean定义信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(EncodedResource encodedResource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">  <span class="comment">// 其他无关主题代码省略</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// resourcesCurrentlyBeingLoaded是一个ThreadLocal，get()方法拿到的就是当前线程的资源</span></span><br><span class="line">  Set&lt;EncodedResource&gt; currentResources = <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line">  <span class="keyword">if</span> (currentResources == <span class="keyword">null</span>) &#123;</span><br><span class="line">    currentResources = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 把当前资源加入到currentResources中，如果已经存在add()方法返回false，说明此资源已经添加过，无需再次添加</span></span><br><span class="line">  <span class="comment">// 并提示开发者资源名称重复定义了。</span></span><br><span class="line">  <span class="keyword">if</span> (!currentResources.add(encodedResource)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">      <span class="string">&quot;Detected cyclic loading of &quot;</span> + encodedResource + <span class="string">&quot; - check your import definitions!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 将xml定义文件转成IO流程</span></span><br><span class="line">    InputStream inputStream = encodedResource.getResource().getInputStream();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      InputSource inputSource = <span class="keyword">new</span> InputSource(inputStream);</span><br><span class="line">      <span class="keyword">if</span> (encodedResource.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 真正实现加载bean定义的方法</span></span><br><span class="line">      <span class="keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">      inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">      <span class="string">&quot;IOException parsing XML document from &quot;</span> + encodedResource.getResource(), ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 已经加载过的资源从加载列表中移除</span></span><br><span class="line">    currentResources.remove(encodedResource);</span><br><span class="line">    <span class="keyword">if</span> (currentResources.isEmpty()) &#123;</span><br><span class="line">      <span class="comment">// 已经加载完成的资源一定要从本地线程变量中删除，以防内存泄漏</span></span><br><span class="line">      <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-AbstractBeanDefinitionReader-doLoadBeanDefinitions-inputSource-encodedResource-getResource"><a href="#4-AbstractBeanDefinitionReader-doLoadBeanDefinitions-inputSource-encodedResource-getResource" class="headerlink" title="4. AbstractBeanDefinitionReader.doLoadBeanDefinitions(inputSource, encodedResource.getResource())"></a>4. AbstractBeanDefinitionReader.doLoadBeanDefinitions(inputSource, encodedResource.getResource())</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Actually load bean definitions from the specified XML file.</span></span><br><span class="line"><span class="comment">     * 加载指定配置文件里的bean定义</span></span><br><span class="line"><span class="comment">     * 比如最简单的bean定义：&lt;bean id=&quot;testBean&quot; class=&quot;com.ubuntuvim.spring.TestBean&quot; /&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取配置资源并封装成Docment对象</span></span><br><span class="line">            Document doc = doLoadDocument(inputSource, resource);</span><br><span class="line">            <span class="comment">// 根据Document加载bean定义，非常重要的方法。</span></span><br><span class="line">            <span class="keyword">int</span> count = registerBeanDefinitions(doc, resource);</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Loaded &quot;</span> + count + <span class="string">&quot; bean definitions from &quot;</span> + resource);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 其他无关主题代码省略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过<code>doLoadDocument()</code>方法将文件转成<code>document</code>对象，然后解析里面的内容，再根据内容做处理（处理过程非常复杂，根据bean定义的各种属性进行不同的操作。</p><h5 id="5-创建一个document解析工厂"><a href="#5-创建一个document解析工厂" class="headerlink" title="5. 创建一个document解析工厂"></a>5. 创建一个document解析工厂</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Document <span class="title">loadDocument</span><span class="params">(InputSource inputSource, EntityResolver entityResolver,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ErrorHandler errorHandler, <span class="keyword">int</span> validationMode, <span class="keyword">boolean</span> namespaceAware)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据校验模式、命名解析创建解析工厂</span></span><br><span class="line">  DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware);</span><br><span class="line">  <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">    logger.trace(<span class="string">&quot;Using JAXP provider [&quot;</span> + factory.getClass().getName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler);</span><br><span class="line">  <span class="keyword">return</span> builder.parse(inputSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> DocumentBuilderFactory <span class="title">createDocumentBuilderFactory</span><span class="params">(<span class="keyword">int</span> validationMode, <span class="keyword">boolean</span> namespaceAware)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> ParserConfigurationException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建document解析工厂</span></span><br><span class="line">  DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">  factory.setNamespaceAware(namespaceAware);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置工厂的属性</span></span><br><span class="line">  <span class="keyword">if</span> (validationMode != XmlValidationModeDetector.VALIDATION_NONE) &#123;</span><br><span class="line">    factory.setValidating(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (validationMode == XmlValidationModeDetector.VALIDATION_XSD) &#123;</span><br><span class="line">      <span class="comment">// Enforce namespace aware for XSD...</span></span><br><span class="line">      factory.setNamespaceAware(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">        ParserConfigurationException pcex = <span class="keyword">new</span> ParserConfigurationException(</span><br><span class="line">          <span class="string">&quot;Unable to validate using XSD: Your JAXP provider [&quot;</span> + factory +</span><br><span class="line">          <span class="string">&quot;] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? &quot;</span> +</span><br><span class="line">          <span class="string">&quot;Upgrade to Apache Xerces (or Java 1.5) for full XSD support.&quot;</span>);</span><br><span class="line">        pcex.initCause(ex);</span><br><span class="line">        <span class="keyword">throw</span> pcex;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是根据Document对象解析里面的bean定义信息，这个解析过程非常复杂！！！！</p><p><code>XmlBeanDefinitionReader</code>类中的<code>doLoadBeanDefinitions()</code>方法是从指定路径的xml加载bean定义成document对象。然后调用<code>registerBeanDefinitions()</code>方法启动bean定义的解析。</p><h5 id="6-调用registerBeanDefinitions-方法启动bean定义解析"><a href="#6-调用registerBeanDefinitions-方法启动bean定义解析" class="headerlink" title="6. 调用registerBeanDefinitions()方法启动bean定义解析"></a>6. 调用<code>registerBeanDefinitions()</code>方法启动bean定义解析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">  <span class="comment">// 通过反射拿到DefaultBeanDefinitionDocumentReader</span></span><br><span class="line">  BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">  <span class="comment">// 获取解析之前的bean数量</span></span><br><span class="line">  <span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">  documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">  <span class="comment">// bean总数 - 解析之前的数量，就是本次解析的bean数量</span></span><br><span class="line">  <span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> BeanDefinitionDocumentReader <span class="title">createBeanDefinitionDocumentReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// this.documentReaderClass = DefaultBeanDefinitionDocumentReader</span></span><br><span class="line">  <span class="keyword">return</span> BeanUtils.instantiateClass(<span class="keyword">this</span>.documentReaderClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-标签转换成BeanDefinition"><a href="#7-标签转换成BeanDefinition" class="headerlink" title="7.  标签转换成BeanDefinition"></a>7.  <bean>标签转换成BeanDefinition</h5><p>通过<code>BeanDefinitionDocumentReader.registerBeanDefinitions(doc, createReaderContext(resource))</code>把xml配置转换成容器内部的数据结构BeanDefinition对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ……省略其他代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 留给子类实现，在解析bean定义前做一些自定义的操作，可能用于后续框架的扩展</span></span><br><span class="line">preProcessXml(root);</span><br><span class="line"><span class="comment">// 解析bean定义，从&lt;beans&gt;开始解析所有子标签&lt;bean&gt;</span></span><br><span class="line">parseBeanDefinitions(root, <span class="keyword">this</span>.delegate);</span><br><span class="line"><span class="comment">// 留个子类实现，在解析完bean定义之后做一些自定义逻辑，可能用于后续框架的扩展</span></span><br><span class="line">postProcessXml(root);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.delegate = parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ……省略其他代码</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Parse the elements at the root level in the document:</span></span><br><span class="line"><span class="comment">     * &quot;import&quot;, &quot;alias&quot;, &quot;bean&quot;.</span></span><br><span class="line"><span class="comment">     * 解析最顶层的元素，比如bean，import，alias标签</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root the DOM root element of the document</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">    NodeList nl = root.getChildNodes();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">      Node node = nl.item(i);</span><br><span class="line">      <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">        Element ele = (Element) node;</span><br><span class="line">        <span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">          <span class="comment">// 处理普通的子元素，比如&lt;bean&gt;、&lt;alise&gt;</span></span><br><span class="line">          parseDefaultElement(ele, delegate);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 处理一些功能性配置，比如：&lt;context:component-scan /&gt;</span></span><br><span class="line">          <span class="comment">// &lt;aop:aspectj-autoproxy /&gt;</span></span><br><span class="line">          delegate.parseCustomElement(ele);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    delegate.parseCustomElement(root);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>parseDefaultElement(ele, delegate);</code>和<code>delegate.parseCustomElement(ele);</code>两个方法内部就是复杂而详细的解析过程。</p><p>包括<code>&lt;Import/&gt;</code>、<code>&lt;bean/&gt;</code>、<code>&lt;Alias</code>、<code>&lt;aop:aspectj-autoproxy /&gt;</code>等等标签的解析。详细代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseDefaultElement</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 处理&lt;import&gt;标签，import标签用于导入其他的配置文件</span></span><br><span class="line">  <span class="keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">    importBeanDefinitionResource(ele);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理&lt;alias&gt;标签</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">    processAliasRegistration(ele);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理&lt;bean&gt;标签，最重要的一个方法</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">    processBeanDefinition(ele, delegate);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理&lt;beans&gt;标签，递归调用</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">    <span class="comment">// recurse</span></span><br><span class="line">    doRegisterBeanDefinitions(ele);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processBeanDefinition</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 解析bean标签，解析完成后得到&lt;bean&gt;标签上面的属性信息，比如name、id、class等</span></span><br><span class="line">  BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line">  <span class="keyword">if</span> (bdHolder != <span class="keyword">null</span>) &#123;</span><br><span class="line">    bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Register the final decorated instance.</span></span><br><span class="line">      <span class="comment">// 解析完成后注册bean定义信息</span></span><br><span class="line">      <span class="comment">// 所谓的注册其实就是把bean定义信息put到工厂的beanDefinitionMap&lt;beanName, BeanDefinition&gt;中</span></span><br><span class="line">      BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">      getReaderContext().error(<span class="string">&quot;Failed to register bean definition with name &#x27;&quot;</span> +</span><br><span class="line">                               bdHolder.getBeanName() + <span class="string">&quot;&#x27;&quot;</span>, ele, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Send registration event.</span></span><br><span class="line">    getReaderContext().fireComponentRegistered(<span class="keyword">new</span> BeanComponentDefinition(bdHolder));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ……其他方法的详细实现不展开说明。直接查看DefaultBeanDefinitionDocumentReader源码实现即可。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过上述Spring容器对载入的bean定义Document解析可以看出，我们在使用配置文件时可以使用<code>&lt;Import&gt;</code>标签直接导入另外一个资源文件。使用<code>&lt;Alias&gt;</code>标签定义别名时，容器首先将别名元素定义注册到容器中。</p><p>如果是<code>&lt;beans&gt;</code>元素则递归调用，解析标签下的最原子定义。</p><p>如果是<code>&lt;bean&gt;</code>直接解析并转换成<code>BeanDefinition</code>对象put到容器缓存中。通过如下这2行代码实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xml定义转成容器的BeanDefinition</span></span><br><span class="line">BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line"><span class="comment">// 把BeanDefinition保存到容器缓存Map中</span></span><br><span class="line">BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br></pre></td></tr></table></figure><p>xml转换成BeanDefinition。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">parseBeanDefinitionElement</span><span class="params">(Element ele, <span class="meta">@Nullable</span> BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到&lt;bean&gt;定义的id属性值</span></span><br><span class="line">  String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line">  <span class="comment">// 拿到&lt;bean&gt;定义的name属性值</span></span><br><span class="line">  String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line"></span><br><span class="line">  List&lt;String&gt; aliases = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="comment">// 如果name属性定义别名，比如&lt;bean name=&quot;beanA, beanB, beanC&quot; class=&quot;com.ubuntuvim.service.impl.UserServiceImpl/&gt;</span></span><br><span class="line">  <span class="comment">// 直接把一个class定义成三个bean名，等价于如下三个定义：</span></span><br><span class="line">  <span class="comment">//  &lt;bean name=&quot;beanA&quot; class=&quot;com.ubuntuvim.service.impl.UserServiceImpl/&gt;</span></span><br><span class="line">  <span class="comment">//  &lt;bean name=&quot;beanB&quot; class=&quot;com.ubuntuvim.service.impl.UserServiceImpl/&gt;</span></span><br><span class="line">  <span class="comment">//  &lt;bean name=&quot;beanC&quot; class=&quot;com.ubuntuvim.service.impl.UserServiceImpl/&gt;</span></span><br><span class="line">  <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">    String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">    aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// beanName默认使用id属性的值，如果id属性为空，则获取name属性，如果name属性有多个值直接用第一个值作为beanName</span></span><br><span class="line">  String beanName = id;</span><br><span class="line">  <span class="keyword">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">    beanName = aliases.remove(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;No XML &#x27;id&#x27; specified - using &#x27;&quot;</span> + beanName +</span><br><span class="line">                   <span class="string">&quot;&#x27; as bean name and &quot;</span> + aliases + <span class="string">&quot; as aliases&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (containingBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 校验&lt;beans&gt;标签下是否有重复的&lt;bean&gt;定义</span></span><br><span class="line">    checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 进一步解析bean的其他所有属性并统一封装至GenericBeanDefinition类型实例中</span></span><br><span class="line">  AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line">  <span class="keyword">if</span> (beanDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (containingBean != <span class="keyword">null</span>) &#123;</span><br><span class="line">          beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class="line">            beanDefinition, <span class="keyword">this</span>.readerContext.getRegistry(), <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          beanName = <span class="keyword">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class="line">          <span class="comment">// Register an alias for the plain bean class name, if still possible,</span></span><br><span class="line">          <span class="comment">// if the generator returned the class name plus a suffix.</span></span><br><span class="line">          <span class="comment">// This is expected for Spring 1.2/2.0 backwards compatibility.</span></span><br><span class="line">          String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line">          <span class="keyword">if</span> (beanClassName != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">              beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class="line">              !<span class="keyword">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">            aliases.add(beanClassName);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">          logger.trace(<span class="string">&quot;Neither XML &#x27;id&#x27; nor &#x27;name&#x27; specified - &quot;</span> +</span><br><span class="line">                       <span class="string">&quot;using generated bean name [&quot;</span> + beanName + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        error(ex.getMessage(), ele);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line">    <span class="comment">// 所有属性解析、校验完成后封装成BeanDefinitionHolder实例并返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractBeanDefinition <span class="title">parseBeanDefinitionElement</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  Element ele, String beanName, <span class="meta">@Nullable</span> BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> BeanEntry(beanName));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析class属性值</span></span><br><span class="line">  String className = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class="line">    className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 解析parent属性值</span></span><br><span class="line">  String parent = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class="line">    parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 创建用于承载属性的AbstractBeanDefinition类型的GenericBeanDefinition</span></span><br><span class="line">    AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析&lt;bean&gt;标签的扩展属性，比如singleton/scope/abstract/lazy-init/autowire等属性</span></span><br><span class="line">    parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line">    <span class="comment">// 解析描述信息</span></span><br><span class="line">    bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class="line"></span><br><span class="line">    parseMetaElements(ele, bd);</span><br><span class="line">    parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">    parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析&lt;constructor-arg&gt;子元素</span></span><br><span class="line">    parseConstructorArgElements(ele, bd);</span><br><span class="line">    <span class="comment">// 解析&lt;property&gt;子元素</span></span><br><span class="line">    parsePropertyElements(ele, bd);</span><br><span class="line">    <span class="comment">// 解析&lt;qualifier&gt;子元素</span></span><br><span class="line">    parseQualifierElements(ele, bd);</span><br><span class="line"></span><br><span class="line">    bd.setResource(<span class="keyword">this</span>.readerContext.getResource());</span><br><span class="line">    bd.setSource(extractSource(ele));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bd;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">    error(<span class="string">&quot;Bean class [&quot;</span> + className + <span class="string">&quot;] not found&quot;</span>, ele, ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (NoClassDefFoundError err) &#123;</span><br><span class="line">    error(<span class="string">&quot;Class that bean class [&quot;</span> + className + <span class="string">&quot;] depends on not found&quot;</span>, ele, err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    error(<span class="string">&quot;Unexpected failure during bean definition parsing&quot;</span>, ele, ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.parseState.pop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有bean相关定义信息解析完毕之后并不是直接就实例化成对象，目前仅仅只是解析成BeanDefinition对象，会在后面依赖注入的时候才从BeanDefinition缓存中拿出来实例化。</p><p>这些方法，每个展开都是一下详细实现细节。就补贴源码了。直接看Spring源码类<code>BeanDefinitionParserDelegate</code>即可。主要就是对<code>&lt;property&gt;</code>、<code>&lt;list&gt;</code>、<code>&lt;set&gt;</code>、<code>&lt;array&gt;</code>等等标签的解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析&lt;constructor-arg&gt;子元素</span></span><br><span class="line">parseConstructorArgElements(ele, bd);</span><br><span class="line"><span class="comment">// 解析&lt;property&gt;子元素</span></span><br><span class="line">parsePropertyElements(ele, bd);</span><br><span class="line"><span class="comment">// 解析&lt;qualifier&gt;子元素</span></span><br><span class="line">parseQualifierElements(ele, bd);</span><br></pre></td></tr></table></figure><h4 id="保存转换后的BeanDefinition到容器缓存中"><a href="#保存转换后的BeanDefinition到容器缓存中" class="headerlink" title="保存转换后的BeanDefinition到容器缓存中"></a>保存转换后的BeanDefinition到容器缓存中</h4><p>经过一系列的解析之后，得到容器需要的数据结构——BeanDefinition。然后通过<code>registerBeanDefinition()</code>方法设置到容器缓存中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Register bean definition under primary name.</span></span><br><span class="line">  <span class="comment">// 获取定义的bean名称</span></span><br><span class="line">  String beanName = definitionHolder.getBeanName();</span><br><span class="line">  <span class="comment">// 往容器中注册bean（就是put到容器缓存Map中），最终会保存在DefaultListableBeanFactory实例的一个Map成员属性上。</span></span><br><span class="line">  registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Register aliases for bean name, if any.</span></span><br><span class="line">  <span class="comment">// 如果有别名则注册bean的别名</span></span><br><span class="line">  String[] aliases = definitionHolder.getAliases();</span><br><span class="line">  <span class="keyword">if</span> (aliases != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line">      registry.registerAlias(beanName, alias);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>registerBeanDefinition()</code>方法的调用层级：</p><ul><li>BeanDefinitionRegistry  (org.springframework.beans.factory.support)  <ul><li>SimpleBeanDefinitionRegistry  (org.springframework.beans.factory.support)  <ul><li>DefaultListableBeanFactory  (org.springframework.beans.factory.support)</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ……其他无关代码省略</span></span><br><span class="line"></span><br><span class="line">  BeanDefinition existingDefinition = <span class="keyword">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line">  <span class="keyword">if</span> (existingDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// ……其他无关代码省略</span></span><br><span class="line">    <span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line">      <span class="comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanDefinitionMap) &#123;</span><br><span class="line">        <span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">        List&lt;String&gt; updatedDefinitions = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames.size() + <span class="number">1</span>);</span><br><span class="line">        updatedDefinitions.addAll(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line">        updatedDefinitions.add(beanName);</span><br><span class="line">        <span class="keyword">this</span>.beanDefinitionNames = updatedDefinitions;</span><br><span class="line">        removeManualSingletonName(beanName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Still in startup registration phase</span></span><br><span class="line">      <span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">      <span class="keyword">this</span>.beanDefinitionNames.add(beanName);</span><br><span class="line">      removeManualSingletonName(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.frozenBeanDefinitionNames = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (existingDefinition != <span class="keyword">null</span> || containsSingleton(beanName)) &#123;</span><br><span class="line">    resetBeanDefinition(beanName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，bean定义资源文件被解析后，已经注册到容器中，被管理起来，完成了容器的初始化工作。回到我们一开始的<code>AbstractApplicationContext.refresh()</code>方法，现在只是完成了这个方法的<code>obtainFreshBeanFactory()</code>调用。不过已经完成IoC容器的创建并且读取加载了所有bean定义到容器中，这些信息已经是可以使用的信息，可以被get出来（当然get出来的也只是定义信息，或者说是bean的原材料）。后续容器的所有功能都是对这些bean定义信息的操作。这些bean定义信息就是IoC容器的控制反转的基础，真是有了这些信息，容器才能做到依赖注入，包括aop等。</p><p>真是万里长征第一步啊，不过是非常重要的第一步。</p><h3 id="prepareBeanFactory-beanFactory"><a href="#prepareBeanFactory-beanFactory" class="headerlink" title="prepareBeanFactory(beanFactory)"></a>prepareBeanFactory(beanFactory)</h3><p>这个方法比较简单，主要是进一步增强BeanFactory的功能。说白了就是往容器中set一些后续会使用的到功能类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Tell the internal bean factory to use the context&#x27;s class loader etc.</span></span><br><span class="line">  <span class="comment">// 设置类加载器，存在则直接设置（一般是ApplicationClassLoader)，不存在则创建一个新的默认加载器设置到容器中</span></span><br><span class="line">  <span class="comment">// 不存在会一直往上找，一直找到java根加载器BoostrapClassLoader</span></span><br><span class="line">  beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class="line">  <span class="comment">// 设置EL表达式解析器</span></span><br><span class="line">  beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class="line">  <span class="comment">// 设置属性注册解析器</span></span><br><span class="line">  beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> ResourceEditorRegistrar(<span class="keyword">this</span>, getEnvironment()));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将当前的ApplicationContext对象交给ApplicationContextAwareProcessor类来处理，</span></span><br><span class="line">  <span class="comment">// 从而在Aware接口实现类中的注入applicationContext</span></span><br><span class="line">  <span class="comment">// Configure the bean factory with context callbacks.</span></span><br><span class="line">  beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置忽略的自动装配接口</span></span><br><span class="line">  beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class="line">  beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class="line">  beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class="line">  beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class="line">  beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class="line">  beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册自动装配使用到的类</span></span><br><span class="line">  <span class="comment">// BeanFactory interface not registered as resolvable type in a plain factory.</span></span><br><span class="line">  <span class="comment">// MessageSource registered (and found for autowiring) as a bean.</span></span><br><span class="line">  beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class="line">  beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="keyword">this</span>);</span><br><span class="line">  beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="keyword">this</span>);</span><br><span class="line">  beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册容器使用的监听器</span></span><br><span class="line">  <span class="comment">// Register early post-processor for detecting inner beans as ApplicationListeners.</span></span><br><span class="line">  beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果当前BeanFactory包含loadTimeWeaver Bean，说明存在类加载期织入AspectJ，</span></span><br><span class="line">  <span class="comment">// 则把当前BeanFactory交给类加载期BeanPostProcessor实现类LoadTimeWeaverAwareProcessor来处理，</span></span><br><span class="line">  <span class="comment">// 从而实现类加载期织入AspectJ的目的。</span></span><br><span class="line">  <span class="comment">// Detect a LoadTimeWeaver and prepare for weaving, if found.</span></span><br><span class="line">  <span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">    <span class="comment">// Set a temporary ClassLoader for type matching.</span></span><br><span class="line">    beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  注册当前容器环境environment组件Bean</span></span><br><span class="line">  <span class="comment">// Register default environment beans.</span></span><br><span class="line">  <span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">    beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 注册当前电脑系统环境systemProperties组件Bean</span></span><br><span class="line">  <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class="line">    beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 注册当前电脑系统的环境变量信息systemEnvironment</span></span><br><span class="line">  <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">    beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>设置类加载器</li><li>设置EL表达式解析器（bean创建完成后填充属性使用比如@Value注解）、设置属性注册解析器</li><li>利用BeanPostProcessor特性给各种Aware接口实现类注入ApplicationContext中对象的属性？？</li><li>设置各种Aware接口实现类为忽略自自动装配</li><li>设置自动装配类，包括<code>BeanFactory</code>,<code>ResourceLoader</code>,<code>ApplicationEventPublisher</code>,<code>ApplicationContext</code></li><li>如果BeanFactory中存在loadTimeWeave的bean，则添加动态织入功能</li><li>注册各种可用组件（环境变量信息），比如<code>envrironment</code>,<code>systemProperties</code>,<code>systemEnvironment</code></li></ol><h3 id="postProcessBeanFactory-beanFactory"><a href="#postProcessBeanFactory-beanFactory" class="headerlink" title="postProcessBeanFactory(beanFactory)"></a>postProcessBeanFactory(beanFactory)</h3><p>这个方法是提供给子类定义一些后置处理器（也是往容器中set一些功能类）。比如子类<code>AbstractRefreshableWebApplicationContext</code>。这个是web项目中使用到初始化IoC容器的类，在容器启动之后增加了一些web项目用到的扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">  beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ServletContextAwareProcessor(<span class="keyword">this</span>.servletContext, <span class="keyword">this</span>.servletConfig));</span><br><span class="line">  beanFactory.ignoreDependencyInterface(ServletContextAware.class);</span><br><span class="line">  beanFactory.ignoreDependencyInterface(ServletConfigAware.class);</span><br><span class="line"></span><br><span class="line">  WebApplicationContextUtils.registerWebApplicationScopes(beanFactory, <span class="keyword">this</span>.servletContext);</span><br><span class="line">  WebApplicationContextUtils.registerEnvironmentBeans(beanFactory, <span class="keyword">this</span>.servletContext, <span class="keyword">this</span>.servletConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="invokeBeanFactoryPostProcessors-beanFactory"><a href="#invokeBeanFactoryPostProcessors-beanFactory" class="headerlink" title="invokeBeanFactoryPostProcessors(beanFactory)"></a>invokeBeanFactoryPostProcessors(beanFactory)</h3><p>执行bean工厂的后置处理器，里面会有非常多的，非常复杂的BeanFactoryPostProcessor实现类的执行。</p><p>用于读取使用<code>@Component</code>、<code>@Service</code>等bean定义声明的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到当前应用上下文的BeanFactoryPostProcessor，</span></span><br><span class="line">  <span class="comment">// 1. 如果是使用FileSystemXmlApplicationContext启动容器默认情况getBeanFactoryPostProcessors()是空的。</span></span><br><span class="line">  <span class="comment">//         当用户手动调set方法注册BeanFactory后置处理器才有值，默认情况下调这个方法不会对BeanDefinition做任何修改，因为还没有任何后置处理器</span></span><br><span class="line">  <span class="comment">// 2. 如果使用AnnotactionConfigApplicationContext启动容器，则有一个后置处理器：org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span></span><br><span class="line">  <span class="comment">//      用于加载使用@Component/@Service/@Controller等bean定义注解的类，并把类信息转成BeanDefinition保存到容器中</span></span><br><span class="line">  PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span></span><br><span class="line">  <span class="comment">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span></span><br><span class="line">  <span class="keyword">if</span> (beanFactory.getTempClassLoader() == <span class="keyword">null</span> &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">    beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细的Bean定义后置处理器的执行委托给<code>PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors()</code>处理。这个方法才是具体处理实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行bean实例化前的后置处理器，用于对BeanDefinition增强，加载使用注解声明的类</span></span><br><span class="line"><span class="comment"> * 调用来源：AbstractApplication.refresh() -&gt; AbstractApplication.invokeBeanFactoryPostProcessors()</span></span><br><span class="line"><span class="comment"> * -&gt; 当前类：invokeBeanFactoryPostProcessors()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanFactoryPostProcessors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span></span><br><span class="line">  <span class="comment">// 如果有BeanDefinitionRegistryPostProcessor则先执行</span></span><br><span class="line">  Set&lt;String&gt; processedBeans = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 判断beanFactory是否是BeanDefinitionRegistry接口类型，</span></span><br><span class="line">  <span class="comment">// beanFactory为DefaultLitableBeanFactory实例，而DefaultListableBeanFactory实现了BeanDefinitionRegistry接口，</span></span><br><span class="line">  <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;</span><br><span class="line">    BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</span><br><span class="line">    <span class="comment">// 存放普通的后置处理器</span></span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 存放BeanDefinitionRegistryPostProcessor，bean定义注册后置处理器</span></span><br><span class="line">    List&lt;BeanDefinitionRegistryPostProcessor&gt; registryProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 处理入参beanFactoryPostProcessor列表，遍历所有工厂后置处理器</span></span><br><span class="line">    <span class="comment">// 把BeanDefinitionRegistryPostProcessor和BeanFactoryPostProcessor区分，放在不同的List中</span></span><br><span class="line">    <span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</span><br><span class="line">      <span class="keyword">if</span> (postProcessor <span class="keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;</span><br><span class="line">        BeanDefinitionRegistryPostProcessor registryProcessor =</span><br><span class="line">          (BeanDefinitionRegistryPostProcessor) postProcessor;</span><br><span class="line">        <span class="comment">// 执行postProcessBeanDefinitionRegistry方法</span></span><br><span class="line">        registryProcessor.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">        registryProcessors.add(registryProcessor);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        regularPostProcessors.add(postProcessor);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">    <span class="comment">// uninitialized to let the bean factory post-processors apply to them!</span></span><br><span class="line">    <span class="comment">// Separate between BeanDefinitionRegistryPostProcessors that implement</span></span><br><span class="line">    <span class="comment">// PriorityOrdered, Ordered, and the rest.</span></span><br><span class="line">    List&lt;BeanDefinitionRegistryPostProcessor&gt; currentRegistryProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">    <span class="comment">// 默认情况下postProcessorNames是空数组。</span></span><br><span class="line">    <span class="comment">// 如果项目中使用&lt;context:component-scan/&gt;或者&lt;context:annotation-config/&gt;或者@ComponentScan注解</span></span><br><span class="line">    <span class="comment">// postProcessorNames会有一个后置处理器：ConfigurationAnnotationProcessor</span></span><br><span class="line">    <span class="comment">// 这个类的postProcessBeanDefinitionRegistry()方法被调用时，</span></span><br><span class="line">    <span class="comment">// 会把用户使用`@Component`/`@Service`/`@Controller`/`@Import`/`@Bean`等注解定义的类转换成`BeanDefinition`对象并保存到容器中。</span></span><br><span class="line">    String[] postProcessorNames =</span><br><span class="line">      beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">      <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">        <span class="comment">// 执行BeanDefinitionRegistryPostProcessors后置处理器时bean实际上还没实例化，</span></span><br><span class="line">        <span class="comment">// 还是保存在内存中的BeanDefinition信息，所以显式调用getBean()方法，提前创建bean实例</span></span><br><span class="line">        <span class="comment">// 比如ConfigurationAnnotationProcessor这个类就是在getBean内部通过反射BeanUtils.instantiateClass(clazz)拿到实例</span></span><br><span class="line">        currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">        processedBeans.add(ppName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">    registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">    <span class="comment">// ConfigurationAnnotationProcessor实现了PriorityOrdered接口，</span></span><br><span class="line">    <span class="comment">// 在这里就会类的postProcessBeanDefinitionRegistry()方法，加载所有使用注解声明的类定义信息并注册到容器中</span></span><br><span class="line">    invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">    currentRegistryProcessors.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span></span><br><span class="line">    <span class="comment">// 默认情况下数组是空的</span></span><br><span class="line">    postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">      <span class="comment">// 排除前面已经执行过的，实现了PriorityOrdered接口的PostProcessor</span></span><br><span class="line">      <span class="keyword">if</span> (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">        currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">        processedBeans.add(ppName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">    registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">    invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">    currentRegistryProcessors.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span></span><br><span class="line">    <span class="comment">// 最后，执行剩下没有实现PriorityOrdered接口和Ordered接口的BeanDefinitionRegistryPostProcessor</span></span><br><span class="line">    <span class="keyword">boolean</span> reiterate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (reiterate) &#123;</span><br><span class="line">      reiterate = <span class="keyword">false</span>;</span><br><span class="line">      <span class="comment">// 默认情况下数组是空的</span></span><br><span class="line">      postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">        <span class="comment">// 排除前面已经执行过的实现了PriorityOrdered接口或者实现了Ordered接口的PostProcessor</span></span><br><span class="line">        <span class="keyword">if</span> (!processedBeans.contains(ppName)) &#123;</span><br><span class="line">          currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">          processedBeans.add(ppName);</span><br><span class="line">          reiterate = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">      registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">      invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">      currentRegistryProcessors.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span></span><br><span class="line">    <span class="comment">// 执行这些processor的postProcessBeanFactory()方法</span></span><br><span class="line">    invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);</span><br><span class="line">    <span class="comment">// 执行普通的PostProcessor，这些PostProcessor是没有实现接口BeanDefinitionRegistryPostProcessor的</span></span><br><span class="line">    <span class="comment">// 直接执行这些实现类的postProcessBeanFactory()方法</span></span><br><span class="line">    <span class="comment">//regularPostProcessors = AnnotationConfigApplicationContext</span></span><br><span class="line">    invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Invoke factory processors registered with the context instance.</span></span><br><span class="line">    invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 到这里[bean定义注册后置处理器]都已经全部处理完，下面是接着处理[bean工厂后置处理器]</span></span><br><span class="line">  <span class="comment">// ===========================================================================</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">  <span class="comment">// uninitialized to let the bean factory post-processors apply to them!</span></span><br><span class="line">  <span class="comment">// 不要再这里初始化FactoryBean，我们需要保留到所有未初始化的普通bean以便bean工厂后置处理可以处理</span></span><br><span class="line">  <span class="comment">// 如果开启了注解方式（项目中使用&lt;context:component-scan/&gt;或者&lt;context:annotation-config/&gt;或者@ComponentScan注解)，</span></span><br><span class="line">  <span class="comment">// 这里仍然可以获取到ConfigurationAnnotationProcessor，</span></span><br><span class="line">  <span class="comment">// 因为它也实现了BeanFactoryPostProcessor接口（postProcessBeanFactory()方法）</span></span><br><span class="line">  String[] postProcessorNames =</span><br><span class="line">    beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span></span><br><span class="line">  <span class="comment">// Ordered, and the rest.</span></span><br><span class="line">  List&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="comment">// 根据bean后置处理器的接口类型分类</span></span><br><span class="line">  <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">    <span class="comment">// 排除前面已经执行过的bean工厂后置处理器（BeanDefinitionRegistryPostProcessor)</span></span><br><span class="line">    <span class="keyword">if</span> (processedBeans.contains(ppName)) &#123;</span><br><span class="line">      <span class="comment">// skip - already processed in first phase above</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">      priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">      orderedPostProcessorNames.add(ppName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">  sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">  <span class="comment">// 执行ConfigurationAnnotationProcessor的postProcessBeanFactory()方法</span></span><br><span class="line">  <span class="comment">// 用于解析@Configuration注解的类中用@Bean注解的声明的bean，并把声明的bean转换BeanDefinition，注册到容器中</span></span><br><span class="line">  invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span></span><br><span class="line">  List&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;(orderedPostProcessorNames.size());</span><br><span class="line">  <span class="keyword">for</span> (String postProcessorName : orderedPostProcessorNames) &#123;</span><br><span class="line">    orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">  &#125;</span><br><span class="line">  sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">  invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Finally, invoke all other BeanFactoryPostProcessors.</span></span><br><span class="line">  List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;(nonOrderedPostProcessorNames.size());</span><br><span class="line">  <span class="keyword">for</span> (String postProcessorName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">    nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">  &#125;</span><br><span class="line">  invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Clear cached merged bean definitions since the post-processors might have</span></span><br><span class="line">  <span class="comment">// modified the original metadata, e.g. replacing placeholders in values...</span></span><br><span class="line">  <span class="comment">// 清除元数据缓存，因为后置处理器可能已经修改的原始元数据，比如替换值的占位符。。。</span></span><br><span class="line">  beanFactory.clearMetadataCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完<code>invokeBeanFactoryPostProcessors()</code>方法之后，对bean定义的修改已经完成。如果是使用注解方式定义bean，那么会通过<code>ConfigurationAnnotationProcessor</code>这个类把用户使用<code>@Component</code>/<code>@Service</code>/<code>@Controller</code>/<code>@Import</code>/<code>@Bean</code>/<code>@Configuration</code>等注解定义的类转换成<code>BeanDefinition</code>对象并保存到容器中。</p><p><strong>这一步会执行各种bean定义后置处理器。是IoC容器提供的一个非常重要的扩展点。同时，如果项目开启了注解方式，这一步就会把所有注解类加载成<code>BeanDefinition</code>并注册到容器中。</strong></p><p>接着详细解析一下<code>ConfigurationClassPostProcessor</code>是如何解析注解类并把bean定义注册到容器中。主要是通过这个类实现的<code>postProcessBeanDefinitionRegistry()</code>方法和<code>postProcessBeanFactory()</code>方法实现的。</p><p><code>ConfigurationClassPostProcessor</code>是专门用于解析注解bean定义后置处理器，非常非常重要。</p><p>先看下类图：</p><pre class="mermaid">graph BTConfigurationClassPostProcessor -.-> BeanClassLoaderAwareBeanClassLoaderAware -.-> AwareConfigurationClassPostProcessor -.-> ResourceLoaderAwareResourceLoaderAware -.-> AwareConfigurationClassPostProcessor -.-> EnvironmentAwareEnvironmentAware -.-> AwareConfigurationClassPostProcessor -.-> PriorityOrderedPriorityOrdered --> OrderedConfigurationClassPostProcessor -.-> BeanDefinitionRegistryPostProcessorBeanDefinitionRegistryPostProcessor --> BeanFactoryPostProcessor</pre><p>通过类图可以看到<code>ConfigurationClassPostProcessor</code>同时具有<code>BeanDefinitiionRegistryPostProcessor</code>和<code>BeanFactoryPostProcessor</code>两个接口功能。</p><h4 id="postProcessBeanDefinitionRegistry-方法"><a href="#postProcessBeanDefinitionRegistry-方法" class="headerlink" title="postProcessBeanDefinitionRegistry()方法"></a>postProcessBeanDefinitionRegistry()方法</h4><p>方法主目录代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现BeanDefinitionRegistryPostProcessor接口的postProcessBeanDefinitionRegistry方法。在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.springframework.context.support.AbstractApplicationContext 的refresh() -&gt; invokeBeanFactoryPostProcessors()方法会调用，</span></span><br><span class="line"><span class="comment">     * 作用是往容器中注册bean定义，包括使用`<span class="doctag">@Component</span>`/`<span class="doctag">@Service</span>`/`<span class="doctag">@Controller</span>`/`<span class="doctag">@Import</span>`/`<span class="doctag">@Bean</span>`等注解定义的类,</span></span><br><span class="line"><span class="comment">     * 这些类会被转换成BeanDefinition注册到容器中。</span></span><br><span class="line"><span class="comment">     * Derive further bean definitions from the configuration classes in the registry.</span></span><br><span class="line"><span class="comment">     * 从注册表中的配置类派生更多的bean定义。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> registryId = System.identityHashCode(registry);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.registriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">      <span class="string">&quot;postProcessBeanDefinitionRegistry already called on this post-processor against &quot;</span> + registry);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.factoriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">      <span class="string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> + registry);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.registriesPostProcessed.add(registryId);</span><br><span class="line">  <span class="comment">// 非常重要的方法，在此方法内解析bean定义</span></span><br><span class="line">  processConfigBeanDefinitions(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面的9行代码主要是用于防重的，暂不关注。主要是最后一行。</p><h5 id="processConfigBeanDefinitions-方法"><a href="#processConfigBeanDefinitions-方法" class="headerlink" title="processConfigBeanDefinitions()方法"></a>processConfigBeanDefinitions()方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build and validate a configuration model based on the registry of</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Configuration&#125; classes.</span></span><br><span class="line"><span class="comment">     * 基于配置类的注册表构建并校验配置模型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 在这个processConfigBeanDefinitions方法中会做很多事情，</span></span><br><span class="line"><span class="comment">     * 会解析类上面标注了<span class="doctag">@ComponentScan</span>、<span class="doctag">@Import</span>、<span class="doctag">@bean</span>、<span class="doctag">@Component</span>等注解信息，</span></span><br><span class="line"><span class="comment">     * 对于<span class="doctag">@ComponentScan</span>会解析出需要扫描的包，然后利用ASM技术得到这个类，然后再次解析类上面的注解，</span></span><br><span class="line"><span class="comment">     * 对于<span class="doctag">@Import</span>来说，由于支持带入普通类、ImportSelector的实现类和ImportBeanDefinitionRegistrar的实现了，</span></span><br><span class="line"><span class="comment">     * 所以在解析<span class="doctag">@Import</span>的时候，会进行判断三种情况，</span></span><br><span class="line"><span class="comment">     * 然后执行ImportBeanDefinitionRegistrar和ImportSelector接口中的方法，对于导入的类，也会进行判断类中标注的注解（使用递归），</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processConfigBeanDefinitions</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">  List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="comment">// 获取容器中所有的bean定义名称</span></span><br><span class="line">  String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (String beanName : candidateNames) &#123;</span><br><span class="line">    <span class="comment">// 通过bean名称拿到对应的bean定义</span></span><br><span class="line">    BeanDefinition beanDef = registry.getBeanDefinition(beanName);</span><br><span class="line">    <span class="comment">// 判断是否被解析过了</span></span><br><span class="line">    <span class="comment">// 如果BeanDefinition中configurationClass属性为full或者lite，则说明配置类已经处理过</span></span><br><span class="line">    <span class="keyword">if</span> (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Bean definition has already been processed as a configuration class: &quot;</span> + beanDef);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否为配置类，比如一个类上面使用@Configuraton注解</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">      <span class="comment">// 添加到候选的配置类集合中</span></span><br><span class="line">      configCandidates.add(<span class="keyword">new</span> BeanDefinitionHolder(beanDef, beanName));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Return immediately if no @Configuration classes were found</span></span><br><span class="line">  <span class="comment">// 在bean列表中没有找到任何一个使用了@Configuration注解的类</span></span><br><span class="line">  <span class="keyword">if</span> (configCandidates.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sort by previously determined @Order value, if applicable</span></span><br><span class="line">  <span class="comment">// 如果容器中扫描到多个使用了@Configuration注解的配置类，则根据@Order排序</span></span><br><span class="line">  <span class="comment">/* 比如如下的使用方式：可以返回第一个名为</span></span><br><span class="line"><span class="comment">        @Configuration</span></span><br><span class="line"><span class="comment">        public class JavaConfigA &#123;</span></span><br><span class="line"><span class="comment">            @Bean(name=&quot;bmw&quot;)</span></span><br><span class="line"><span class="comment">            public Car getBMW()&#123;</span></span><br><span class="line"><span class="comment">                // 返回实现了Car的名为bmw的单例</span></span><br><span class="line"><span class="comment">                return new BMW();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">  configCandidates.sort((bd1, bd2) -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());</span><br><span class="line">    <span class="keyword">int</span> i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(i1, i2);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Detect any custom bean name generation strategy supplied through the enclosing application context</span></span><br><span class="line">  SingletonBeanRegistry sbr = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (registry <span class="keyword">instanceof</span> SingletonBeanRegistry) &#123;</span><br><span class="line">    sbr = (SingletonBeanRegistry) registry;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.localBeanNameGeneratorSet) &#123;</span><br><span class="line">      <span class="comment">// CONFIGURATION_BEAN_NAME_GENERATOR=&quot;org.springframework.context.annotation.internalConfigurationBeanNameGenerator&quot;</span></span><br><span class="line">      BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(</span><br><span class="line">        AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR);</span><br><span class="line">      <span class="keyword">if</span> (generator != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 设置@ComponentScan导入的bean的名字生成器</span></span><br><span class="line">        <span class="keyword">this</span>.componentScanBeanNameGenerator = generator;</span><br><span class="line">        <span class="comment">// 设置@Import导入进来的bean的名字生成器</span></span><br><span class="line">        <span class="keyword">this</span>.importBeanNameGenerator = generator;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.environment == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化一个标准的环境变量实例，里面会默认初始化喜欢环境变量，</span></span><br><span class="line">    <span class="comment">// 项目属性:System.getEnv()/System.getProperties()</span></span><br><span class="line">    <span class="keyword">this</span>.environment = <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Parse each @Configuration class</span></span><br><span class="line">  <span class="comment">// 创建一个@Configuration解析器</span></span><br><span class="line">  ConfigurationClassParser parser = <span class="keyword">new</span> ConfigurationClassParser(</span><br><span class="line">    <span class="keyword">this</span>.metadataReaderFactory, <span class="keyword">this</span>.problemReporter, <span class="keyword">this</span>.environment,</span><br><span class="line">    <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.componentScanBeanNameGenerator, registry);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于将之前加入的configCandidate进行去重，Spring内部是没有重复的，但是不能保证用户添加了重复，有可能一个项目定义了多个配置类</span></span><br><span class="line">  Set&lt;BeanDefinitionHolder&gt; candidates = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(configCandidates);</span><br><span class="line">  <span class="comment">// 存放已经解析出来的配置类，用于判断是否已处理过</span></span><br><span class="line">  Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="keyword">new</span> HashSet&lt;&gt;(configCandidates.size());</span><br><span class="line">  <span class="keyword">do</span> &#123;  <span class="comment">// 因为前面已经配置了数组非空，所以肯定有一个配置类才到这里</span></span><br><span class="line">    <span class="comment">// 解析配置类，这个方法里面的解析过程也是非常复杂而繁琐的。</span></span><br><span class="line">    <span class="comment">// 这个和AbstractApplicationContext.refresh() -&gt; obtainFreshBeanFactory()方法里面的解析xml配置有点类似</span></span><br><span class="line">    parser.parse(candidates);</span><br><span class="line">    parser.validate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拿到解析出来的配置类</span></span><br><span class="line">    Set&lt;ConfigurationClass&gt; configClasses = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(parser.getConfigurationClasses());</span><br><span class="line">    <span class="comment">// 配置类已经解析完毕，从已经解析的列表</span></span><br><span class="line">    configClasses.removeAll(alreadyParsed);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the model and create bean definitions based on its content</span></span><br><span class="line">    <span class="comment">// 在上下文中读取并创建bean定义</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.reader == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.reader = <span class="keyword">new</span> ConfigurationClassBeanDefinitionReader(</span><br><span class="line">        registry, <span class="keyword">this</span>.sourceExtractor, <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.environment,</span><br><span class="line">        <span class="keyword">this</span>.importBeanNameGenerator, parser.getImportRegistry());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把配置类中配置的bean定义加载注册到容器</span></span><br><span class="line">    <span class="keyword">this</span>.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">    alreadyParsed.addAll(configClasses);</span><br><span class="line"></span><br><span class="line">    candidates.clear();</span><br><span class="line">    <span class="comment">// candidateNames包括了容器中的所有普通的bean定义（除了@Configuration注册的bean定义）</span></span><br><span class="line">    <span class="comment">// 再获取一下容器中的所有bean定义，如果有增加说明前面的已经有bean被解析并且注册到容器中</span></span><br><span class="line">    <span class="keyword">if</span> (registry.getBeanDefinitionCount() &gt; candidateNames.length) &#123;</span><br><span class="line">      String[] newCandidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">      Set&lt;String&gt; oldCandidateNames = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(candidateNames));</span><br><span class="line">      Set&lt;String&gt; alreadyParsedClasses = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (ConfigurationClass configurationClass : alreadyParsed) &#123;</span><br><span class="line">        alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (String candidateName : newCandidateNames) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!oldCandidateNames.contains(candidateName)) &#123;</span><br><span class="line">          BeanDefinition bd = registry.getBeanDefinition(candidateName);</span><br><span class="line">          <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, <span class="keyword">this</span>.metadataReaderFactory) &amp;&amp;</span><br><span class="line">              !alreadyParsedClasses.contains(bd.getBeanClassName())) &#123;</span><br><span class="line">            candidates.add(<span class="keyword">new</span> BeanDefinitionHolder(bd, candidateName));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      candidateNames = newCandidateNames;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (!candidates.isEmpty());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes</span></span><br><span class="line">  <span class="keyword">if</span> (sbr != <span class="keyword">null</span> &amp;&amp; !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) &#123;</span><br><span class="line">    sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.metadataReaderFactory <span class="keyword">instanceof</span> CachingMetadataReaderFactory) &#123;</span><br><span class="line">    <span class="comment">// Clear cache in externally provided MetadataReaderFactory; this is a no-op</span></span><br><span class="line">    <span class="comment">// for a shared cache since it&#x27;ll be cleared by the ApplicationContext.</span></span><br><span class="line">    ((CachingMetadataReaderFactory) <span class="keyword">this</span>.metadataReaderFactory).clearCache();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上述方法解析之后，已经把通过注解声明的类定义信息都加载到容器中。包括使用<code>@Component</code>，<code>@Service</code>，<code>@Controller</code>，<code>@ComponentScan</code>，<code>@ComponentScans</code>，<code>@Configuration</code>，@Bean，<code>@Import</code>，<code>@ImportSource</code>定义的类以及实现<code>ImportBeanDefinitionRegistrar</code>接口、<code>ImportSelector</code>接口，在接口中导入的类。解析成BeanDefinition然后加载到容器中保存到容器的<code>beanDefinitionMap</code>。</p><h6 id="parser-parse-candidates-解析候选配置类"><a href="#parser-parse-candidates-解析候选配置类" class="headerlink" title="parser.parse(candidates)解析候选配置类"></a>parser.parse(candidates)解析候选配置类</h6><p>解析配置类（使用@Configuration声明的类）。</p><p><code>parse()</code>方法只是做了简单的类型判断，最终的处理会交给<code>processConfigurationClass</code>方法，</p><p><code>processConfigurationClass</code>又调用了<code>doProcessConfigurationClass    </code>方法。</p><h6 id="doProcessConfigurationClass解析配置类具体方法"><a href="#doProcessConfigurationClass解析配置类具体方法" class="headerlink" title="doProcessConfigurationClass解析配置类具体方法"></a>doProcessConfigurationClass解析配置类具体方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Apply processing and build a complete &#123;<span class="doctag">@link</span> ConfigurationClass&#125; by reading the</span></span><br><span class="line"><span class="comment">     * annotations, members and methods from the source class. This method can be called</span></span><br><span class="line"><span class="comment">     * multiple times as relevant sources are discovered.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 一个配置类的成员类(配置类内嵌套定义的类)也可能适配类，先遍历这些成员配置类，调用processConfigurationClass处理它们;</span></span><br><span class="line"><span class="comment">     * 2. 处理配置类上的注解<span class="doctag">@PropertySources</span>,<span class="doctag">@PropertySource</span></span></span><br><span class="line"><span class="comment">     * 3. 处理配置类上的注解<span class="doctag">@ComponentScans</span>,<span class="doctag">@ComponentScan</span></span></span><br><span class="line"><span class="comment">     * 4. 处理配置类上的注解<span class="doctag">@Import</span></span></span><br><span class="line"><span class="comment">     * 5. 处理配置类上的注解<span class="doctag">@ImportResource</span></span></span><br><span class="line"><span class="comment">     * 6. 处理配置类中每个带有<span class="doctag">@Bean</span>注解的方法</span></span><br><span class="line"><span class="comment">     * 7. 处理配置类所实现接口的缺省方法</span></span><br><span class="line"><span class="comment">     * 8. 检查父类是否需要处理，如果父类需要处理返回父类，否则返回null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configClass the configuration class being build</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceClass a source class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the superclass, or &#123;<span class="doctag">@code</span> null&#125; if none found or previously processed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> SourceClass <span class="title">doProcessConfigurationClass</span><span class="params">(ConfigurationClass configClass, SourceClass sourceClass)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用了@Configuration注解的类肯定是也是@Component注解的类，因为@Configuration继承了@Component</span></span><br><span class="line">  <span class="keyword">if</span> (configClass.getMetadata().isAnnotated(Component.class.getName())) &#123;</span><br><span class="line">    <span class="comment">// Recursively process any member (nested) classes first</span></span><br><span class="line">    <span class="comment">// 默认情况下会执行进去，但是方法内判断会不通过，相当于没做任何事情</span></span><br><span class="line">    processMemberClasses(configClass, sourceClass);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Process any @PropertySource annotations</span></span><br><span class="line">  <span class="comment">// 2、处理属性资源文件，使用@PropertySource注解可以导入Properties属性文件</span></span><br><span class="line">  <span class="keyword">for</span> (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">    sourceClass.getMetadata(), PropertySources.class,</span><br><span class="line">    org.springframework.context.annotation.PropertySource.class)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.environment <span class="keyword">instanceof</span> ConfigurableEnvironment) &#123;</span><br><span class="line">      processPropertySource(propertySource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      logger.info(<span class="string">&quot;Ignoring @PropertySource annotation on [&quot;</span> + sourceClass.getMetadata().getClassName() +</span><br><span class="line">                  <span class="string">&quot;]. Reason: Environment must implement ConfigurableEnvironment&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Process any @ComponentScan annotations</span></span><br><span class="line">  <span class="comment">// 处理@ComponentScan/@ComponentScans注解，获取注解上的属性值，比如basePackages属性值</span></span><br><span class="line">  Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">    sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);</span><br><span class="line">  <span class="keyword">if</span> (!componentScans.isEmpty() &amp;&amp;</span><br><span class="line">      !<span class="keyword">this</span>.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">    <span class="comment">// 解析basePackages指定的包和子包下的类并转换成BeanDefinition</span></span><br><span class="line">    <span class="keyword">for</span> (AnnotationAttributes componentScan : componentScans) &#123;</span><br><span class="line">      <span class="comment">// The config class is annotated with @ComponentScan -&gt; perform the scan immediately</span></span><br><span class="line">      Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =</span><br><span class="line">        <span class="keyword">this</span>.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line">      <span class="comment">// Check the set of scanned definitions for any further config classes and parse recursively if needed</span></span><br><span class="line">      <span class="keyword">for</span> (BeanDefinitionHolder holder : scannedBeanDefinitions) &#123;</span><br><span class="line">        BeanDefinition bdCand = holder.getBeanDefinition().getOriginatingBeanDefinition();</span><br><span class="line">        <span class="keyword">if</span> (bdCand == <span class="keyword">null</span>) &#123;</span><br><span class="line">          bdCand = holder.getBeanDefinition();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果扫描的basePackages指定的包和子包下的类还有使用了@Configuration注解则递归解析</span></span><br><span class="line">        <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">          parse(bdCand.getBeanClassName(), holder.getBeanName());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Process any @Import annotations</span></span><br><span class="line">  <span class="comment">// 处理@Import注解，@Import(MyImportSelector.class)，MyImportSelector必须实现importSelector接口</span></span><br><span class="line">  <span class="comment">/* 用法如下：</span></span><br><span class="line"><span class="comment">        public class MyImportSelector implements ImportSelector &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span></span><br><span class="line"><span class="comment">                return new String[] &#123;</span></span><br><span class="line"><span class="comment">                    MyImportSelectorBean.class.getName()</span></span><br><span class="line"><span class="comment">                &#125;;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">  <span class="comment">// @Import注解要和@Configuration一起用</span></span><br><span class="line">  processImports(configClass, sourceClass, getImports(sourceClass), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Process any @ImportResource annotations</span></span><br><span class="line">  <span class="comment">// 处理 @ImportResource(locations=&#123;&quot;classpath:applicationContext.xml&quot;&#125;)</span></span><br><span class="line">  <span class="comment">// @ImportResource注解要和@Configuration一起用</span></span><br><span class="line">  AnnotationAttributes importResource =</span><br><span class="line">    AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);</span><br><span class="line">  <span class="keyword">if</span> (importResource != <span class="keyword">null</span>) &#123;</span><br><span class="line">    String[] resources = importResource.getStringArray(<span class="string">&quot;locations&quot;</span>);</span><br><span class="line">    Class&lt;? extends BeanDefinitionReader&gt; readerClass = importResource.getClass(<span class="string">&quot;reader&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String resource : resources) &#123;</span><br><span class="line">      String resolvedResource = <span class="keyword">this</span>.environment.resolveRequiredPlaceholders(resource);</span><br><span class="line">      configClass.addImportedResource(resolvedResource, readerClass);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理@Configuration配置类中使用@Bean注解的方法，比如：</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">        <span class="doctag">@Configuration</span></span></span><br><span class="line"><span class="comment">        public class AppConfig &#123;</span></span><br><span class="line"><span class="comment">            <span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment">            public myServiceImpl() &#123;</span></span><br><span class="line"><span class="comment">                return new MyServiceImpl();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">  <span class="comment">// Process individual @Bean methods</span></span><br><span class="line">  Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);</span><br><span class="line">  <span class="keyword">for</span> (MethodMetadata methodMetadata : beanMethods) &#123;</span><br><span class="line">    configClass.addBeanMethod(<span class="keyword">new</span> BeanMethod(methodMetadata, configClass));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Process default methods on interfaces</span></span><br><span class="line">  processInterfaces(configClass, sourceClass);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理配置类的父类，比如：</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">        public class AnnotationConfigApplicationContextConfig</span></span><br><span class="line"><span class="comment">            extends AnnotationConfigApplicationContextConfigParent &#123;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        public class AnnotationConfigApplicationContextConfigParent &#123;</span></span><br><span class="line"><span class="comment">            <span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment">            public ParentConfigService parentConfigService() &#123;</span></span><br><span class="line"><span class="comment">                return new ParentConfigService();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">  <span class="comment">// Process superclass, if any</span></span><br><span class="line">  <span class="keyword">if</span> (sourceClass.getMetadata().hasSuperClass()) &#123;</span><br><span class="line">    String superclass = sourceClass.getMetadata().getSuperClassName();</span><br><span class="line">    <span class="comment">// 排除java.xxx开头的包类，因为所有的类终究会继承顶层父类java.lang.Object。</span></span><br><span class="line">    <span class="keyword">if</span> (superclass != <span class="keyword">null</span> &amp;&amp; !superclass.startsWith(<span class="string">&quot;java&quot;</span>) &amp;&amp;</span><br><span class="line">        !<span class="keyword">this</span>.knownSuperclasses.containsKey(superclass)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.knownSuperclasses.put(superclass, configClass);</span><br><span class="line">      <span class="comment">// Superclass found, return its annotation metadata and recurse</span></span><br><span class="line">      <span class="keyword">return</span> sourceClass.getSuperClass();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// No superclass -&gt; processing is complete</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有注解类的bean定义都已经解析完毕，回到<code>processConfigBeanDefinition</code>方法，然后在另外方法注册bean定义。</p><h6 id="this-reader-loadBeanDefinitions-configClasses-注册bean定义"><a href="#this-reader-loadBeanDefinitions-configClasses-注册bean定义" class="headerlink" title="this.reader.loadBeanDefinitions(configClasses)注册bean定义"></a>this.reader.loadBeanDefinitions(configClasses)注册bean定义</h6><p>经过<code>parser.parse()</code>方法之后，所有注解类都已经转化成bean定义。然后在<code>loadBeanDefinitions</code>方法中注册bean定义到容器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitionsForConfigurationClass</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略其他无关主题的判断……</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (configClass.isImported()) &#123;</span><br><span class="line">    registerBeanDefinitionForImportedConfigurationClass(configClass);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (BeanMethod beanMethod : configClass.getBeanMethods()) &#123;</span><br><span class="line">    <span class="comment">// 注册@Bean注解方法指定的bean定义到容器中</span></span><br><span class="line">    loadBeanDefinitionsForBeanMethod(beanMethod);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置类是否使用了@ImportResource注解，通过这个注入可以导入其他的类</span></span><br><span class="line">  loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());</span><br><span class="line">  <span class="comment">// 配置类是否实现ImportBeanDefinitionRegistrar接口。如果有则执行接口registerBeanDefinitions方法</span></span><br><span class="line">  loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此<code>processConfigBeanDefinitions()</code>方法处理完毕，所有注解类都已经转化成bean定义并注册到容器中。</p><p>再回到ConfigurationClassPostProcessor.postProcessorBeanDefinitionRegistry()`方法。</p><p>再回到<code>PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessor()</code>方法，</p><p>再回到<code>PostProcessorRegistrationDeletegate.invokeBeanFactoryPostProcessors()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br></pre></td></tr></table></figure><h4 id="invokeBeanDefinitionRegistryPostProcessors-currentRegistryProcessors-registry-方法执行流程图"><a href="#invokeBeanDefinitionRegistryPostProcessors-currentRegistryProcessors-registry-方法执行流程图" class="headerlink" title="invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry)方法执行流程图"></a>invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry)方法执行流程图</h4><pre class="mermaid">sequenceDiagramautonumberAbstractApplicationContext ->> PostProcessorRegistrationDelegate: invokeBeanFactoryPostProcessors()PostProcessorRegistrationDelegate ->> ConfigurationClassPostProcessor: postProcessorBeanDefinitionRegistry()ConfigurationClassPostProcessor ->> ConfigurationClassPostProcessor:processorConfigBeanDefinitions()ConfigurationClassPostProcessor ->> ConfigurationClassParser:parse(condidates)ConfigurationClassParser ->> ConfigurationClassParser:processConfigurationClass()ConfigurationClassParser ->> ConfigurationClassParser:doProcessConfigurationClass(configClass, sourceClass)ConfigurationClassParser ->> ConfigurationClassParser.doProcessConfigurationClass():processPropertySourceConfigurationClassParser ->> ConfigurationClassParser.doProcessConfigurationClass():componentScan()ConfigurationClassParser ->> ConfigurationClassParser.doProcessConfigurationClass():processImports()ConfigurationClassParser ->> ConfigurationClassParser.doProcessConfigurationClass():importResourceConfigurationClassParser ->> ConfigurationClassParser.doProcessConfigurationClass():beanMethod()ConfigurationClassParser ->> ConfigurationClassParser.doProcessConfigurationClass():superClass()ConfigurationClassPostProcessor ->> ConfigurationClassBeanDefinitionReader:loadBeanDefinitions()ConfigurationClassBeanDefinitionReader ->> ConfigurationClassBeanDefinitionReader:loadBeanDefinitionsForConfigurationClass()ConfigurationClassBeanDefinitionReader ->> ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass:registerBeanDefinitionForImportedConfigurationClass()ConfigurationClassBeanDefinitionReader ->> ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass:loanBeanDefinitionsForBeanMethod()ConfigurationClassBeanDefinitionReader ->> ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass:loadBeanDefinitionsFromImportedResources()ConfigurationClassBeanDefinitionReader ->> ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass:loadBeanDefinitionsFromRegstrars()</pre><h4 id="bean定义后置处理器使用"><a href="#bean定义后置处理器使用" class="headerlink" title="bean定义后置处理器使用"></a>bean定义后置处理器使用</h4><p>经过<code>invokeBeanDefinitionFactoryPostProcessor()</code>方法的理解，我们知道了这个方法提供了用户注册<code>BeanDefinition</code>扩展。这个是Spring框架第一个非常非常重要的扩展点，通过实现如下两个接口实现就可以使用扩展。</p><ol><li>实现<code>BeanFactoryPostProcessor</code>接口</li><li>实现<code>BeanDefinitionRegistryPostProcessor</code>接口</li></ol><p>下面我们通过自定义的bean定义后置处理器实现类进一步学习如何修改容器的中的<code>BeanDefinition</code>，如何注册自己的<code>BeanDefinition</code>到容器中。</p><p>由于篇幅太大，在另外一篇<a href="/Users/ubuntuvim/code/xcoding/source/_posts/Spring/Spring%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8.md">《Spring后置处理器》</a>中详解。</p><h3 id="registerBeanPostProcessors-beanFactory"><a href="#registerBeanPostProcessors-beanFactory" class="headerlink" title="registerBeanPostProcessors(beanFactory)"></a>registerBeanPostProcessors(beanFactory)</h3><blockquote><p>注册bean工厂的后置处理器（仅仅是把Spring内部定义的和用户定义的<code>BeanPostProcessor</code>注册到容器中，后面的步骤才会真正执行），这些后置处理器在bean的构造方法执行之后，在执行init方法前后执行指定的逻辑。</p><p>主要是通过的接口的两个方法实现，一个是在所有的bean的<code>InitializingBean</code>的<code>afterPropertiesSet()</code>方法或者是自定义的init方法（比如<code>@PostConstruct</code>注解的方法）之前执行的回调方法<code>postProcessBeforeInitialization()</code>；一个是在所有的bean的<code>InitializingBean</code>的<code>afterPropertiesSet()</code>方法或者是自定义的init方法（比如<code>@PostConstruct</code>注解的方法）之后执行的回调方法<code>postProcessAfterInitialization()</code></p><p>后置处理器的执行顺序可以看第二章《Spring中Bean生命周期》</p></blockquote><p>是不是就是上述所说的呢？？带着疑问我们接着看源码。</p><p>回到<code>AbstractApplicationContext.refresh()</code>方法，从方法内调用的<code>registerBeanPostProcessors()</code>继续。</p><p>这个方法只是注册后置处理，并且委托给<code>PostProcessorRegistrationDeletgate</code>类处理具体注册逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">  PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来来来，仔细看一眼这个方法处理细节，是不是有一种似曾相似的感觉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//        postProcessorNames = &#123;String[2]@1992&#125;</span></span><br><span class="line">  <span class="comment">//        0 = &quot;org.springframework.context.annotation.internalAutowiredAnnotationProcessor&quot;</span></span><br><span class="line">  <span class="comment">//        1 = &quot;org.springframework.context.annotation.internalCommonAnnotationProcessor&quot;</span></span><br><span class="line">  String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Register BeanPostProcessorChecker that logs an info message when</span></span><br><span class="line">  <span class="comment">// a bean is created during BeanPostProcessor instantiation, i.e. when</span></span><br><span class="line">  <span class="comment">// a bean is not eligible for getting processed by all BeanPostProcessors.</span></span><br><span class="line">  <span class="keyword">int</span> beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + <span class="number">1</span> + postProcessorNames.length;</span><br><span class="line">  beanFactory.addBeanPostProcessor(<span class="keyword">new</span> BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据BeanPostProcessor的实现不同区分开</span></span><br><span class="line">  <span class="comment">// Separate between BeanPostProcessors that implement PriorityOrdered,</span></span><br><span class="line">  <span class="comment">// Ordered, and the rest.</span></span><br><span class="line">  List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  List&lt;BeanPostProcessor&gt; internalPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">    <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">      BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">      priorityOrderedPostProcessors.add(pp);</span><br><span class="line">      <span class="comment">// 同时实现了PriorityOrdered接口和MergedBeanPostProcessor接口的实现类</span></span><br><span class="line">      <span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">        internalPostProcessors.add(pp);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">      orderedPostProcessorNames.add(ppName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">  sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">  registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Next, register the BeanPostProcessors that implement Ordered.</span></span><br><span class="line">  List&lt;BeanPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;(orderedPostProcessorNames.size());</span><br><span class="line">  <span class="keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;</span><br><span class="line">    BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">    orderedPostProcessors.add(pp);</span><br><span class="line">    <span class="comment">// 同时实现了Ordered接口和MergeBeanPostProcessor接口的</span></span><br><span class="line">    <span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">      internalPostProcessors.add(pp);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">  <span class="comment">// 每次注册到容器时都是先删除再添加，所以不会重复</span></span><br><span class="line">  registerBeanPostProcessors(beanFactory, orderedPostProcessors);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Now, register all regular BeanPostProcessors.</span></span><br><span class="line">  List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;(nonOrderedPostProcessorNames.size());</span><br><span class="line">  <span class="keyword">for</span> (String ppName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">    BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">    nonOrderedPostProcessors.add(pp);</span><br><span class="line">    <span class="comment">// 没有实现PriorityOrdered接口，没有实现Ordered接口，但是仅实现了MergedBeanPosProcessor接口的</span></span><br><span class="line">    <span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">      internalPostProcessors.add(pp);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 每次注册到容器时都是先删除再添加，所以不会重复</span></span><br><span class="line">  registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Finally, re-register all internal BeanPostProcessors.</span></span><br><span class="line">  <span class="comment">// 重新注册内部BeanPostProcessor，作用是把内部BeabPostProcessor放在数组最后面</span></span><br><span class="line">  sortPostProcessors(internalPostProcessors, beanFactory);</span><br><span class="line">  <span class="comment">// 每次注册到容器时都是先删除再添加，所以不会重复</span></span><br><span class="line">  registerBeanPostProcessors(beanFactory, internalPostProcessors);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Re-register post-processor for detecting inner beans as ApplicationListeners,</span></span><br><span class="line">  <span class="comment">// moving it to the end of the processor chain (for picking up proxies etc).</span></span><br><span class="line">  <span class="comment">// 重新注册，目的就是把此BeanPostProcessor放在数组末尾</span></span><br><span class="line">  beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(applicationContext));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这方方法的处理逻辑和前面的bean定义后置处理逻辑几乎是一样的，都是先做分类、排序。唯一不同的是本方法不会执行后置处理器，而只是注册到容器中。这些后置处理器的执行放在<code>AbstractApplicationContext.refresh()</code>的<code>finishBeanFactoryInitialization(beanFactory);</code>里面执行。这些注册好的后置处理器会在bean实例化、属性初始化的过程中执行。详细执行过程到<code>finishBeanFactoryInitialization()</code>方法再介绍。</p><h3 id="initMessageSource"><a href="#initMessageSource" class="headerlink" title="initMessageSource()"></a>initMessageSource()</h3><p>bean后置处理器注册完毕之后，接着是初始化信息资源。</p><p>这个方法用于初始化上下文的消息资源，比如message-xxx.properties。</p><p>用户可以自定义一个名为messageSource的bean用于指定某些properties属性的国际化信息。</p><p>这个方法的源码也比较简单，也不是Spring框架学习的重点，就简单做一个例子学习如何使用即可。</p><h4 id="Spring方法源码"><a href="#Spring方法源码" class="headerlink" title="Spring方法源码"></a>Spring方法源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initMessageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获取容器实例，也可以直接通过入参传递</span></span><br><span class="line">  ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">  <span class="comment">// 监测容器中是否已经注册了名为messageSource的bean</span></span><br><span class="line">  <span class="keyword">if</span> (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) &#123;</span><br><span class="line">    <span class="comment">// 获取bean实例，这里显式调用getBean()方法提前实例化bean</span></span><br><span class="line">    <span class="keyword">this</span>.messageSource = beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource.class);</span><br><span class="line">    <span class="comment">// Make MessageSource aware of parent MessageSource.</span></span><br><span class="line">    <span class="comment">// 果对应的messageSource是一个HierarchicalMessageSource，</span></span><br><span class="line">    <span class="comment">// 则会在父容器存在的情况下取父容器对应的messageSource作为当前messageSource的parentMessageSource</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.messageSource <span class="keyword">instanceof</span> HierarchicalMessageSource) &#123;</span><br><span class="line">      HierarchicalMessageSource hms = (HierarchicalMessageSource) <span class="keyword">this</span>.messageSource;</span><br><span class="line">      <span class="keyword">if</span> (hms.getParentMessageSource() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Only set parent context as parent MessageSource if no parent MessageSource</span></span><br><span class="line">        <span class="comment">// registered already.</span></span><br><span class="line">        hms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;Using MessageSource [&quot;</span> + <span class="keyword">this</span>.messageSource + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果容器中还没有名为messageSource的bean则创建并注册一个，实例是DelegatingMessageSource对象</span></span><br><span class="line">    <span class="comment">// Use empty MessageSource to be able to accept getMessage calls.</span></span><br><span class="line">    DelegatingMessageSource dms = <span class="keyword">new</span> DelegatingMessageSource();</span><br><span class="line">    dms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">    <span class="keyword">this</span>.messageSource = dms;</span><br><span class="line">    beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, <span class="keyword">this</span>.messageSource);</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;No &#x27;&quot;</span> + MESSAGE_SOURCE_BEAN_NAME + <span class="string">&quot;&#x27; bean, using [&quot;</span> + <span class="keyword">this</span>.messageSource + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h4><p>首先定义三个Properties文件，一个是默认使用的配置，一个是中文环境下使用的配置，一个是英文环境下使用的配置。Spring会自动根据所在系统环境读取对应的配置。</p><ul><li>msgSource.properties</li><li>msgSource_zh.properties</li><li>msgSource_en.properties</li></ul><p>需要注意的是这三个文件中的key是一样的，只是内容会不一样。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># msgSource.properties</span></span><br><span class="line"><span class="meta">test.key</span>=<span class="string">这个时候默认值。</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># msgSource_zh.properties</span></span><br><span class="line"><span class="meta">test.key</span>=<span class="string">中文环境下的值。</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># msgSource_en.properties</span></span><br><span class="line"><span class="meta">test.key</span>=<span class="string">english value</span></span><br></pre></td></tr></table></figure><p>然后手动定义一个名为messageSource的bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.msg;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ResourceBundleMessageSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/26 上午12:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义messageSource，并交给容器管理，容器在启动的时候就会执行到</span></span><br><span class="line"><span class="comment">     * AbstractApplicationContext.refresh() -&gt; initMessageSource()方法</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这个接口有三个实现类：</span></span><br><span class="line"><span class="comment">        1. ResourceBundleMessageSource：</span></span><br><span class="line"><span class="comment">        2. ReloadableResourceBundleMessageSource：</span></span><br><span class="line"><span class="comment">        3. StaticMessageSource：</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">        messageSource.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 一定要设置配置文件的名称前缀，我定义的properties文件的都是以msgSource开头的</span></span><br><span class="line">        messageSource.setBasename(<span class="string">&quot;msgSource&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>messageSource</code>这个bean获取配置值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.msg;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.AbstractApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/26 上午12:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgSourceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        MessageSource messageSource = (MessageSource) applicationContext.getBean(AbstractApplicationContext.MESSAGE_SOURCE_BEAN_NAME);</span><br><span class="line">        <span class="comment">// 指定获取中文环境下的值</span></span><br><span class="line">        String message = messageSource.getMessage(<span class="string">&quot;test.key&quot;</span>, <span class="keyword">null</span>, Locale.CHINESE);</span><br><span class="line">        System.out.println(message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定获取英文环境下的值</span></span><br><span class="line">        String message2 = messageSource.getMessage(<span class="string">&quot;test.key&quot;</span>, <span class="keyword">null</span>, Locale.ENGLISH);</span><br><span class="line">        System.out.println(message2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定获取默认值getDefault会自动根据系统环境判断使用那个环境的配置文件</span></span><br><span class="line">        String message3 = messageSource.getMessage(<span class="string">&quot;test.key&quot;</span>, <span class="keyword">null</span>, Locale.getDefault());</span><br><span class="line">        System.out.println(message3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果找不到匹配的语言环境配置文件则使用msgSource.properties的配置</span></span><br><span class="line">        String message4 = messageSource.getMessage(<span class="string">&quot;test.key&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(message4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">中文环境下的值。</span><br><span class="line">english value</span><br><span class="line">中文环境下的值。</span><br><span class="line">中文环境下的值。</span><br></pre></td></tr></table></figure><p>在紧接着是<code>AbstractApplicationContext.refresh()</code>的<code>initApplicationEventMulticaster()</code>方法。</p><h3 id="initApplicationEventMulticaster"><a href="#initApplicationEventMulticaster" class="headerlink" title="initApplicationEventMulticaster()"></a>initApplicationEventMulticaster()</h3><p>这个方法和前面的<code>initMessageSource</code>很类似，只是作用不同。本方法用于初始化事件派发器。主要是通过观察者模式实现（叫作发布订阅模式Publish/Subscribe，定义对象间一对多的依赖关系，使得每当一个对象改变状态，则所有依赖与它的对象都会得到通知，并被自动更新。）。事件的发布、监听不是学习Spring框架的主要内容，就做一个简单的案例学习略过。</p><p>同时需要注意的是这个方法和接下来的<code>registerListeners()</code>方法是有关联关系的。<code>initApplicationEvenMultiCaseter()</code>方法初始化的事件会在<code>registrListeners()</code>方法中被监听。</p><h4 id="Spring中的观察者模式"><a href="#Spring中的观察者模式" class="headerlink" title="Spring中的观察者模式"></a>Spring中的观察者模式</h4><p>Spring在事件处理机制中使用了观察者模式：</p><ul><li>事件，<code>ApplicationEvent</code>，该抽象类继承了<code>EventObject</code>，<code>EventObject</code>是JDK中的类，并建议所有的事件都应该继承自<code>EventObject</code>。</li><li>事件监听器，<code>ApplicationListener</code>，是一个接口，该接口继承了<code>EventListener</code>接口。<code>EventListener</code>接口是JDK中的，建议所有的事件监听器都应该继承<code>EventListener</code>。</li><li>事件发布，<code>ApplicationEventPublisher</code>，<code>ApplicationContext</code>继承了该接口，在<code>ApplicationContext</code>的抽象实现类<code>AbstractApplicationContext</code>中做了实现</li></ul><p><strong>工作起来就是，事件发布器发布事件，监听器接受事件，结束。</strong></p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initApplicationEventMulticaster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">  <span class="comment">// 判断容器中是否存在bdName为applicationEventMulticaster的bean</span></span><br><span class="line">  <span class="keyword">if</span> (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.applicationEventMulticaster =</span><br><span class="line">      beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;Using ApplicationEventMulticaster [&quot;</span> + <span class="keyword">this</span>.applicationEventMulticaster + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果容器中还没有创建过名为applicationEvMulticaster的bean则创建一个SimpleApplicationEventMulticaster</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">this</span>.applicationEventMulticaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster(beanFactory);</span><br><span class="line">    beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, <span class="keyword">this</span>.applicationEventMulticaster);</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;No &#x27;&quot;</span> + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + <span class="string">&quot;&#x27; bean, using &quot;</span> +</span><br><span class="line">                   <span class="string">&quot;[&quot;</span> + <span class="keyword">this</span>.applicationEventMulticaster.getClass().getSimpleName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><p>定义一个事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.event;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/26 上午1:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">21162432L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事件的内容必须是实现Serializable接口的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(EventContent source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.event;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个事件监听器。</span></span><br><span class="line"><span class="comment"> * Spring4.1之后有两种实现监听器：</span></span><br><span class="line"><span class="comment"> * 1. 实现ApplicationListener接口</span></span><br><span class="line"><span class="comment"> * 2. 使用<span class="doctag">@EventListener</span>注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/26 上午2:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">MyEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(MyEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName() + <span class="string">&quot;监听到了发布的事件，事件内容是: &quot;</span> + event.getSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenerEvent</span><span class="params">(MyEvent myEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用@EventListener方式，监听到了发布的事件，事件内容是: &quot;</span> + myEvent.getSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过容器发布事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.event;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/26 上午2:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        <span class="comment">// 发布事件</span></span><br><span class="line">        applicationContext.publishEvent(<span class="keyword">new</span> MyEvent(<span class="keyword">new</span> EventContent(<span class="string">&quot;中国的原子弹搞出来了。&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用@EventListener方式，监听到了发布的事件，事件内容是: EventContent&#123;content=&#x27;中国的原子弹搞出来了。&#x27;&#125;</span><br><span class="line">com.ubuntuvim.spring.event.MyListener监听到了发布的事件，事件内容是: EventContent&#123;content=&#x27;中国的原子弹搞出来了。&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh()"></a>onRefresh()</h3><p>这个方法留给子类扩展用。用于初始化一些子类特有的功能。</p><p>比如<code>AbstractRefreshableWebApplicationContext</code>、<code>StaticWebApplicationContext</code>和<code>GenericWebApplicationContext</code>这三个子类都重写了这个方法，用于初始化了一些SpringMVC相关的主题资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.themeSource = UiApplicationContextUtils.initThemeSource(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="registerListeners"><a href="#registerListeners" class="headerlink" title="registerListeners()"></a>registerListeners()</h3><p>这个方法用于注册事件监听器，和前面<code>initApplicationEventMulticaster()</code>方法是配合使用的。前面例子中的<code>MyListener</code>就是在这里注册的，但是也仅仅是注册监听器，还没有发布任何事件，事件的发布在最后面容器所有bean都实例化、属性初始化完毕之后的方法<code>finishRefresh()</code>中发布，就是这行代码<code>publishEvent(new ContextRefreshedEvent(this));</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerListeners</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Register statically specified listeners first.</span></span><br><span class="line">  <span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</span><br><span class="line">    getApplicationEventMulticaster().addApplicationListener(listener);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">  <span class="comment">// uninitialized to let post-processors apply to them!</span></span><br><span class="line">  <span class="comment">// 注册用户定义的监听器，比如com.ubuntuvim.spring.event.MyListener就是在这里注册的。</span></span><br><span class="line">  String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">  <span class="keyword">for</span> (String listenerBeanName : listenerBeanNames) &#123;</span><br><span class="line">    <span class="comment">// getApplicationEventMulticaster()拿到的就是refresh()方法中initApplicationEventMulticaster()定义的发布器</span></span><br><span class="line">    getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Publish early application events now that we finally have a multicaster...</span></span><br><span class="line">  Set&lt;ApplicationEvent&gt; earlyEventsToProcess = <span class="keyword">this</span>.earlyApplicationEvents;</span><br><span class="line">  <span class="keyword">this</span>.earlyApplicationEvents = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (earlyEventsToProcess != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (ApplicationEvent earlyEvent : earlyEventsToProcess) &#123;</span><br><span class="line">      getApplicationEventMulticaster().multicastEvent(earlyEvent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h5><p>分别定义一个事件、一个事件监听以及事件的内容。</p><h5 id="事件定义"><a href="#事件定义" class="headerlink" title="事件定义"></a>事件定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.event;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/26 上午1:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">21162432L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事件的内容必须是实现Serializable接口的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(EventContent source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="监听定义"><a href="#监听定义" class="headerlink" title="监听定义"></a>监听定义</h5><p>Spring4.1之后有两种方式定义一个事件监听，一是通过实现<code>ApplicationListener</code>接口，二是在方法上使用<code>@EventListener</code>注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.event;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个事件监听器。</span></span><br><span class="line"><span class="comment"> * Spring4.1之后有两种实现监听器：</span></span><br><span class="line"><span class="comment"> * 1. 实现ApplicationListener接口</span></span><br><span class="line"><span class="comment"> * 2. 使用<span class="doctag">@EventListener</span>注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/26 上午2:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">MyEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(MyEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName() + <span class="string">&quot;监听到了发布的事件，事件内容是: &quot;</span> + event.getSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenerEvent</span><span class="params">(MyEvent myEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用@EventListener方式，监听到了发布的事件，事件内容是: &quot;</span> + myEvent.getSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事件内容定义"><a href="#事件内容定义" class="headerlink" title="事件内容定义"></a>事件内容定义</h5><p>事件的内容比较特殊，必须是<code>Serializable</code>接口的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.event;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件内容，必须实现Serializable接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/26 上午2:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventContent</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2432432L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;EventContent&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;content=&#x27;&quot;</span> + content + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.event;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/26 上午2:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventTest</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">      <span class="comment">// 发布事件</span></span><br><span class="line">      applicationContext.publishEvent(<span class="keyword">new</span> MyEvent(<span class="keyword">new</span> EventContent(<span class="string">&quot;中国的原子弹搞出来了。&quot;</span>)));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接调用应用上下文的<code>publishEvent()</code>方法就可以发布事件，事件的发布逻辑Spring已经帮你实现好，就是前面的<code>initApplicationEventMulticaster()</code>方法和<code>registerListeners()</code>方法实现的。</p><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用@EventListener方式，监听到了发布的事件，事件内容是: EventContent&#123;content=&#x27;中国的原子弹搞出来了。&#x27;&#125;</span><br><span class="line">com.ubuntuvim.spring.event.MyListener监听到了发布的事件，事件内容是: EventContent&#123;content=&#x27;中国的原子弹搞出来了。&#x27;&#125;</span><br></pre></td></tr></table></figure><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>我们可以使用这个事件的发布机制做一些异步的操作，比如用户登录成功之后可以发送邮件提醒给用户，邮件的发送逻辑可以从登录的逻辑中剥离，在事件监听里面处理。</p><h3 id="finishBeanFactoryInitialization-beanFactory"><a href="#finishBeanFactoryInitialization-beanFactory" class="headerlink" title="finishBeanFactoryInitialization(beanFactory)"></a>finishBeanFactoryInitialization(beanFactory)</h3><p>这个方法是最重要也是最最最复杂的，包括各种<code>BeanPostProcess</code>实现类的调用，以及复杂的bean实例化，bean属性的初始化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Initialize conversion service for this context.</span></span><br><span class="line">  <span class="comment">// 初始化上下文的转换服务</span></span><br><span class="line">  <span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">      beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">    beanFactory.setConversionService(</span><br><span class="line">      beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Register a default embedded value resolver if no bean post-processor</span></span><br><span class="line">  <span class="comment">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span></span><br><span class="line">  <span class="comment">// at this point, primarily for resolution in annotation attribute values.</span></span><br><span class="line">  <span class="comment">// 如果前面没有注册配置解析器，则注入配置解析器，主要用来处理配置文件的占位符等</span></span><br><span class="line">  <span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">    beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class="line">  String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">  <span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">    getBean(weaverAwareName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class="line">  <span class="comment">// 停止使用临时ClassLoader进行类型匹配</span></span><br><span class="line">  beanFactory.setTempClassLoader(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class="line">  <span class="comment">// 冻结所有的Bean定义，在此后bean定义不会再被更改，因为在后面的方法就要开始根据bean定义创建bean实例了。</span></span><br><span class="line">  <span class="comment">// 所有的bean定义在此后修改将是无任何效果的</span></span><br><span class="line">  beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">  <span class="comment">// 转到DefaultListableBeanFactory</span></span><br><span class="line">  <span class="comment">// 实例化剩余所有单例对象（除了加载单例）</span></span><br><span class="line">  beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最关键、复杂的处理在<code>beanFactory.preInstantiateSingletons()</code>里面。</p><h4 id="preInstantiateSingletons"><a href="#preInstantiateSingletons" class="headerlink" title="preInstantiateSingletons()"></a>preInstantiateSingletons()</h4><p>进入单例对象实例处理代码。这个方法的作用就是遍历容器里面的所有的的<code>BeanDefinition</code>，根据bean定义信息做实例化，在bean的实例化过程中会执行一系列的bean后置处理器对bean做一下增强操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实例化所有除了Spring内部的单例（懒加载的、抽象类、非单例的除外）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">    logger.trace(<span class="string">&quot;Pre-instantiating singletons in &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span><br><span class="line">  <span class="comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span><br><span class="line">  <span class="comment">// 创建BeanDefinitionName副本，用于后续遍历，以允许init等方法注册新的bean定义</span></span><br><span class="line">  List&lt;String&gt; beanNames = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line">  <span class="comment">// 遍历所有的beanName，通过beanName获取到对应的bean实例，然后做初始化</span></span><br><span class="line">  <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">    <span class="comment">// 根据bean名称拿到bean定义</span></span><br><span class="line">    RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">    <span class="comment">// bean定义非抽象类，是单例，非懒加载</span></span><br><span class="line">    <span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">      <span class="comment">// 判断是否是FactoryBean</span></span><br><span class="line">      <span class="comment">// Spring有两种类型的Bean，一种普通Bean，一种是工厂Bean即FactoryBean，FactoryBean和普通Bean不同，</span></span><br><span class="line">      <span class="comment">// 它返回的对象不是一个指定类型的对象，而是根据FactoryBean&lt;T&gt;.geteObject()返回对象，返回的对象就是T类型的，</span></span><br><span class="line">      <span class="comment">// 创建出来的对象是否为单例是根据Bean定义中的isSingleton属性决定的（默认是单例）</span></span><br><span class="line">      <span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">        <span class="comment">// 通过getBean(&amp;beanName)拿到是FactoryBean本身，FACTORY_BEAN_PREFIX=&amp;</span></span><br><span class="line">        <span class="comment">// 通过getBean(beanName)拿到的是FactoryBean创建的bean实例</span></span><br><span class="line">        <span class="comment">// 比如  MyInitializingBeanNoLazyAndBeanFactoryImpl implements FactoryBean&lt;Object&gt;</span></span><br><span class="line">        <span class="comment">// getBean(&amp;beanName)拿到的就是myInitializingBeanNoLazyAndBeanFactoryImpl这个bean实例。</span></span><br><span class="line">        <span class="comment">// getBean(beanName)拿到的是InitFromGetObjectMethodBean对象实例</span></span><br><span class="line">        Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> FactoryBean) &#123;</span><br><span class="line">          <span class="keyword">final</span> FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;</span><br><span class="line">          <span class="comment">// 判断bean是否需要急切初始化，实现了FactoryBean的类isEagerInit都是false，</span></span><br><span class="line">          <span class="comment">// 只有SmartFactoryBean的实现类可以控制这个属性值，但是这个接口是提供给Spring框架本身内部使用的不建议开发者使用</span></span><br><span class="line">          <span class="keyword">boolean</span> isEagerInit;</span><br><span class="line">          <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">            isEagerInit = AccessController.doPrivileged((PrivilegedAction&lt;Boolean&gt;)</span><br><span class="line">                                                        ((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,</span><br><span class="line">                                                        getAccessControlContext());</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">            isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">                           ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">            <span class="comment">// 通过beanName获取bean实例</span></span><br><span class="line">            getBean(beanName);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 普通的bean直接通过beanName获取bean实例</span></span><br><span class="line">        getBean(beanName);  <span class="comment">// 转到AbstractBeanFactory</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// =========================================================================</span></span><br><span class="line">  <span class="comment">// 到此单例bean都已经实例化完毕，紧接着可以对实例对象做一些增强，通过BeanPostProcessor后置处理器增强</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class="line">  <span class="comment">// 判断是否有实现了SmartInittializingSingleton的实现类，通常是Spring内部的实现类，也是Spring提供的一个很重要的扩展点</span></span><br><span class="line">  <span class="comment">// @PostConstruct是最先被执行的，然后是InitializingBean，最后是SmartInitializingSingleton</span></span><br><span class="line">  <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">    Object singletonInstance = getSingleton(beanName);</span><br><span class="line">    <span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line">      <span class="keyword">final</span> SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">      <span class="comment">// bean实例化后调用bean的afterSingletonsInstantiated方法，用户可以实现SmartInitializingSingleton接口，</span></span><br><span class="line">      <span class="comment">// 在bean实例化后做一些自定义的操作，比如重置实例的某些属性，但是要注意只能处理非懒加载的单例bean</span></span><br><span class="line">      <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">          smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;, getAccessControlContext());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SmartInitializingSingleton</code>接口扩展点详细请看另外一片文章《Spring后置处理器》。</p><h5 id="getBean-beanName"><a href="#getBean-beanName" class="headerlink" title="getBean(beanName)"></a>getBean(beanName)</h5><p>bean实例化细节在<code>getBean(beanName)</code>中处理。这个方法最终会调用到他的实现方法<code>doGetBean()</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return an instance, which may be shared or independent, of the specified bean.</span></span><br><span class="line"><span class="comment">     * 返回指定beanName的实例</span></span><br><span class="line"><span class="comment">     * IoC容器初始化bean时通过调用的是getBean(String name)方法，所以，方法后面的三个参数是：null，null，false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(<span class="keyword">final</span> String name, <span class="meta">@Nullable</span> <span class="keyword">final</span> Class&lt;T&gt; requiredType,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="meta">@Nullable</span> <span class="keyword">final</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> String beanName = transformedBeanName(name);</span><br><span class="line">  Object bean;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">  <span class="comment">// 先获取早期的单例对象，先查缓存，如果这个bean已经创建过则直接返回（有可能还没做初始化属性赋值，是个半成品的实例，但是它的地址不会变了可以提前返回）</span></span><br><span class="line">  Object sharedInstance = getSingleton(beanName);</span><br><span class="line">  <span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                     <span class="string">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取bean实例对象，如果是工厂bean则设置bean的属性isFactoryBean为true</span></span><br><span class="line">    bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 缓存中还没有beanName对应的实例</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fail if we&#x27;re already creating this bean instance:</span></span><br><span class="line">    <span class="comment">// We&#x27;re assumably within a circular reference.</span></span><br><span class="line">    <span class="comment">// 如果是原型类型的bean直接抛异常</span></span><br><span class="line">    <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">    <span class="comment">// 检查是否存在父工厂，一般情况下开发者不会自定义工厂的实现，所以这里是一个null</span></span><br><span class="line">    BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">    <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">      <span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">      String nameToLookup = originalBeanName(name);</span><br><span class="line">      <span class="keyword">if</span> (parentBeanFactory <span class="keyword">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">          nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;  <span class="comment">// 容器初始化调用getBean(String name)方法时args为null</span></span><br><span class="line">        <span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line">        <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (requiredType != <span class="keyword">null</span>) &#123;  <span class="comment">// 容器初始化调用getBean(String name)方法时requiredType为null</span></span><br><span class="line">        <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">        <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">      <span class="comment">// 把创建好的bean实例标记成创建成功（就是把创建好的bean放到已经创建完成的数组里面）</span></span><br><span class="line">      markBeanAsCreated(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 根据beanName获取bean定义信息</span></span><br><span class="line">      <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">      checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">      <span class="comment">//  拿到beanName对应bean定义信息中的依赖集合，</span></span><br><span class="line">      <span class="comment">// 在实例化自己之前先实例化依赖的bean</span></span><br><span class="line">      String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">      <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">          <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                            <span class="string">&quot;Circular depends-on relationship between &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; and &#x27;&quot;</span> + dep + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 将beanName和dep的依赖关系注册到缓存中</span></span><br><span class="line">          registerDependentBean(dep, beanName);</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取beanName依赖的bean实例，如果dep对应是实例还没创建则创建dep对应的实例</span></span><br><span class="line">            <span class="comment">// 比如实例化beanA时发现依赖beanB则先初始化beanB，递归调用直到所有依赖都实例化</span></span><br><span class="line">            getBean(dep);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                            <span class="string">&quot;&#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; depends on missing bean &#x27;&quot;</span> + dep + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Create bean instance.</span></span><br><span class="line">      <span class="comment">// beanName 对应的依赖bean创建完成后创建beanName实例</span></span><br><span class="line">      <span class="keyword">if</span> (mbd.isSingleton()) &#123;  <span class="comment">//  单例</span></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory)方法</span></span><br><span class="line"><span class="comment">                     * 在父类FactoryBeanRegistrySupport的父类DefaultSingleBeanFactoryRegistry中做了实现</span></span><br><span class="line"><span class="comment">                     * ObjectFactory是一个bean工厂接口，这里是通过lambda表达式（匿名类）方式实现</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@see</span> DefaultSingletonBeanRegistry#getSingleton (String beanName, Object singletonObject)</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                             * 创建单例对象，createBean方法由子类实现，</span></span><br><span class="line"><span class="comment">                             * <span class="doctag">@see</span> AbstractAutowireCapableBeanFactory#createBean (String beanName, RootBeanDefinition mbd, <span class="doctag">@Nullable</span> Object[] args)</span></span><br><span class="line"><span class="comment">                              */</span></span><br><span class="line">                            <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                            destroySingleton(beanName);</span><br><span class="line">                            <span class="keyword">throw</span> ex;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">// 创建好之后直接从缓存中返回的单例对象</span></span><br><span class="line">                    bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;  <span class="comment">// prototype类型实例</span></span><br><span class="line">        <span class="comment">// It&#x27;s a prototype -&gt; create a new instance.</span></span><br><span class="line">        <span class="comment">// 如果是prototype类型的bean，每次都新建一个实例</span></span><br><span class="line">        Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          beforePrototypeCreation(beanName);</span><br><span class="line">          prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">          afterPrototypeCreation(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在createBean方法中创建好的单例对象已经设置到缓存中，这里是再从缓存中拿</span></span><br><span class="line">        <span class="comment">// 另外还有一个非常重要的功能是如果经过前面createBean方法还是没创建成功那么就会通过开发者实现的FactoryBean接口创建对象</span></span><br><span class="line">        <span class="comment">// 也就是说FactoryBean.getObject()方法是在这里被执行的。</span></span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">else</span> &#123;  <span class="comment">// 非单例类型，非prototype类型，通常是一些web相关，比如request、session类型</span></span><br><span class="line">        <span class="comment">// 省略与主题不是很重要的代码</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">      cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略与题主不是很相关的代码</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心代码在<code>getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</code>方法和<code>getObjectForBeanInstance(sharedInstance, name, beanName, mbd)</code>方法的调用。下面分别介绍这两个方法。</p><p>第一个方法是在其父类中做了实现：<code>DefaultSingletonBeanRegistry.getSingleton(String beanName, Object singletonObject)</code>。</p><p>继续进入这个方法的逻辑。</p><h5 id="getSingleton-String-beanName-ObjectFactory-lt-gt-singletonFactory"><a href="#getSingleton-String-beanName-ObjectFactory-lt-gt-singletonFactory" class="headerlink" title="getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory)"></a>getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>&#123;</span><br><span class="line">  Assert.notNull(beanName, <span class="string">&quot;Bean name must not be null&quot;</span>);</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">    <span class="comment">// 先从单例缓存中获取需要创建的对象，从单例缓存中获取到的是一个完整对象、已经经过初始化的bean对象。</span></span><br><span class="line">    <span class="comment">// 这个单例缓存也就是常说的一级缓存</span></span><br><span class="line">    Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">    <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 省略与题主不是很相关的代码</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 在创建单例之前先设置一个标记，标记当前的bean正在创建</span></span><br><span class="line">      beforeSingletonCreation(beanName);</span><br><span class="line">      <span class="keyword">boolean</span> newSingleton = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">boolean</span> recordSuppressedExceptions = (<span class="keyword">this</span>.suppressedExceptions == <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line">        <span class="keyword">this</span>.suppressedExceptions = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 通过单例工厂方式创建对象，这个接口的实现类就是参数传进来的匿名类。简单代码如下：</span></span><br><span class="line"><span class="comment">                     * getSingleton(beanName, () -&gt; AbstractAutowireCapableBeanFactory.createBean(beanName, mbd, args))</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@see</span> AbstractAutowireCapableBeanFactory#createBean (String beanName, RootBeanDefinition mbd, <span class="doctag">@Nullable</span> Object[] args)</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">        singletonObject = singletonFactory.getObject();</span><br><span class="line">        newSingleton = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">        <span class="comment">// 省略与题主不是很相关的代码</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">        <span class="comment">// 省略与题主不是很相关的代码</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line">          <span class="keyword">this</span>.suppressedExceptions = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 清除当前bean正在创建的标记，表示这个beanName已经创建好单例对象</span></span><br><span class="line">        afterSingletonCreation(beanName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (newSingleton) &#123;</span><br><span class="line">        <span class="comment">// 单例对象创建完成之后设置到缓存里面，下次直接从缓存获取</span></span><br><span class="line">        addSingleton(beanName, singletonObject);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singletonObject;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的逻辑比较简单，主要做的事情就是1. 在创建前打标；2. 创建对象；3. 清理标记；4. 单例对象设置到缓存。最复杂的是第二步，第二步通过工厂接口创建对象，而工厂的接口是由子类<code>AbstractAutowireCapableBeanFactory</code>实现的。</p><h5 id="AbstractAutowireCapableBeanFactory-createBean-beanName-mbd-args"><a href="#AbstractAutowireCapableBeanFactory-createBean-beanName-mbd-args" class="headerlink" title="AbstractAutowireCapableBeanFactory.createBean(beanName, mbd, args)"></a>AbstractAutowireCapableBeanFactory.createBean(beanName, mbd, args)</h5><p>这个方法非常复杂，整个bean的实例化，然后是初始化，在初始化的过程中执行各种各样的后置处理器。当然也是Spring的一个非常重要的扩展点。</p><p>扩展接口如下：</p><ol><li><code>InstantiationAwareBeanPostProcessor</code>接口或者<code>InstantiationAwareBeanPostProcessorAdapter</code>，AOP实现就是通过此接口。</li><li><code>MergedBeanDefinitionPostProcessor</code>接口，在bean实例化之前，提供<strong>最后一个可以修改bean定义的机会</strong>。</li><li><code>SmartInstantiationAwareBeanPostProcessor</code>接口，在bean实例化前用于设置实例化的构造方法，<strong>此接口是Spring框架内部专用的接口，不建议开发者使用。</strong></li><li><code>BeanFactoryAware</code>/<code>ApplicationContextAware</code>/<code>BeanNameAware</code>接口，在bean实例化之后，填充属性时。</li><li><code>InitializingBean</code>接口或者是<code>@PostConstruct</code>注解的方法，在bean实例化之后，填充属性时。</li><li><code>DestructionAwareBeanPostProcessor</code>或者<code>DisposableBean</code>接口或者是<code>@PreDestory</code>注解声明的方法，这两个接口或注解是在bean销毁之前调用。</li><li></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Central method of this class: creates a bean instance,</span></span><br><span class="line"><span class="comment">     * populates the bean instance, applies post-processors, etc.</span></span><br><span class="line"><span class="comment">     * 本类的核心方法：创建bean实例，填充bean实例属性，应用（执行）后置处理，</span></span><br><span class="line"><span class="comment">     * 详细处理逻辑在doCreateBean方法实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #doCreateBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">    logger.trace(<span class="string">&quot;Creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  RootBeanDefinition mbdToUse = mbd;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Make sure bean class is actually resolved at this point, and</span></span><br><span class="line">  <span class="comment">// clone the bean definition in case of a dynamically resolved Class</span></span><br><span class="line">  <span class="comment">// which cannot be stored in the shared merged bean definition.</span></span><br><span class="line">  <span class="comment">// 通过Class.forName(bean)方法获取实例，合并bean定义</span></span><br><span class="line">  Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class="line">  <span class="keyword">if</span> (resolvedClass != <span class="keyword">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    mbdToUse = <span class="keyword">new</span> RootBeanDefinition(mbd);</span><br><span class="line">    mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Prepare method overrides.</span></span><br><span class="line">  <span class="comment">// 设置重写属性值：setOverloaded(false)</span></span><br><span class="line">  <span class="comment">// @LookUp注解就是在这里实现的</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    mbdToUse.prepareMethodOverrides();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</span><br><span class="line">                                           beanName, <span class="string">&quot;Validation of method overrides failed&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行后置处理器</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor 接口实现类，</span></span><br><span class="line"><span class="comment">             * 给一个机会返回代理对象而不是目标bean实例本身，如果是AOP类就会在这里返回了，比如用<span class="doctag">@Aspect</span>注释的类</span></span><br><span class="line"><span class="comment">             * 此接口通常是Spring框架内部使用，这个接口的功能非常强大，使用起来难度大，主要是它继承了很多后置处理接口，导致里面的方法很多（一共有6个方法需要实现）。</span></span><br><span class="line"><span class="comment">             * 如果开发者也想使用此接口的功能推荐使用它的抽象实现InstantiationAwareBeanPostProcessorAdapter。继承此类重写其中你需要的方法即可，</span></span><br><span class="line"><span class="comment">             * 这个抽象类做了一些默认实现不需要你实现9个方法，重写你要的就行了。</span></span><br><span class="line"><span class="comment">             * 注意：如果这里返回了代理对象，则直接结束当前方法返回，不继续往下执行doCreateBean创建普通实例，doCreateBean里面进行的属性填充后置处理器也不会执行。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> #resolveBeforeInstantiation</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">    <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">                                    <span class="string">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 根据BeanDefinition创建bean，并且对创建好的bean执行框架定义的+用户定义的各种后置处理器对bean增强。</span></span><br><span class="line">    Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beanInstance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class="line">    <span class="comment">// A previously detected exception with proper bean creation context already,</span></span><br><span class="line">    <span class="comment">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span></span><br><span class="line">    <span class="keyword">throw</span> ex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">      mbdToUse.getResourceDescription(), beanName, <span class="string">&quot;Unexpected exception during bean creation&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心方法有两个，一个是<code>resolveBeforeInstantiation(beanName, mbdToUse)</code>，一个是<code>doCreateBean(beanName, mbdToUse, args)</code>。</p><p>第一个方法用于执行后置处理器。AOP创建的代理对象就是在此方法中返回的。</p><p>第二个方法用于创建普通的bean对象。</p><h6 id="resolveBeforeInstantiation-beanName-mbdToUse"><a href="#resolveBeforeInstantiation-beanName-mbdToUse" class="headerlink" title="resolveBeforeInstantiation(beanName, mbdToUse)"></a>resolveBeforeInstantiation(beanName, mbdToUse)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Apply before-instantiation post-processors, resolving whether there is a</span></span><br><span class="line"><span class="comment">     * before-instantiation shortcut for the specified bean.</span></span><br><span class="line"><span class="comment">     * 应用实例化之前的后处理器，如果容器中存在InstantiationAwareBeanPostProcessor接口的实现类</span></span><br><span class="line"><span class="comment">     * 则执行容器中所有此接口实现类的postProcessBeforeInstantiation()方法和postProcessAfterInitialization()方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mbd the bean definition for the bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the shortcut-determined bean instance, or &#123;<span class="doctag">@code</span> null&#125; if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #createBean(String, RootBeanDefinition, Object[]) </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">resolveBeforeInstantiation</span><span class="params">(String beanName, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">  Object bean = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123;</span><br><span class="line">    <span class="comment">// Make sure bean class is actually resolved at this point.</span></span><br><span class="line">    <span class="comment">// 判断是否有InstantiationAwareBeanPostProcessor实现类</span></span><br><span class="line">    <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">      Class&lt;?&gt; targetType = determineTargetType(beanName, mbd);</span><br><span class="line">      <span class="keyword">if</span> (targetType != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 执行接口的postProcessBeforeInstantiation()方法</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@see</span> #applyBeanPostProcessorsBeforeInstantiation</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">        bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</span><br><span class="line">        <span class="comment">// 返回值不为空说明返回的是一个代理对象。再对代理对象执行postProcessorsAfterInitialization()方法</span></span><br><span class="line">        <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">          bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置bean定义的beforeInstantiationResolved属性值（程序包可见的字段，指示实例化之前的后处理器已启动）</span></span><br><span class="line">    mbd.beforeInstantiationResolved = (bean != <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行接口的<code>postProcessorBeforeInstantiation()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">applyBeanPostProcessorsBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">      InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 它在目标对象实例化之前调用，该方法的返回值类型是Object，我们可以返回任何类型的值。</span></span><br><span class="line"><span class="comment">                 * 由于这个时候目标对象还未实例化，所以这个返回值可以用来代替原本该生成的目标对象的实例(比如代理对象)。</span></span><br><span class="line"><span class="comment">                 * 如果该方法的返回值代替原本该生成的目标对象，后续只有postProcessAfterInitialization方法会调用，</span></span><br><span class="line"><span class="comment">                 * InstantiationAwareBeanPostProcessor接口的其它方法不再调用；</span></span><br><span class="line"><span class="comment">                 * 否则按照正常的流程走，框架内部实现类有如下这些：</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@see</span> InstantiationAwareBeanPostProcessorAdapter</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">      Object result = ibp.postProcessBeforeInstantiation(beanClass, beanName);</span><br><span class="line">      <span class="comment">// 只要有一个result不为null；后面的所有 后置处理器的方法就不执行了，直接返回(所以执行顺序很重要)</span></span><br><span class="line">      <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行接口的<code>postProcessorAfterInstantiation()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">applyBeanPostProcessorsAfterInitialization</span><span class="params">(Object existingBean, String beanName)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">  <span class="comment">// 代理对象，处理代理对象的postProcessAfterInitialization()方法</span></span><br><span class="line">  Object result = existingBean;</span><br><span class="line">  <span class="keyword">for</span> (BeanPostProcessor processor : getBeanPostProcessors()) &#123;</span><br><span class="line">    Object current = processor.postProcessAfterInitialization(result, beanName);</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    result = current;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="AbstractBeanFactory-doCreateBean-beanName-mbdToUse-args"><a href="#AbstractBeanFactory-doCreateBean-beanName-mbdToUse-args" class="headerlink" title="AbstractBeanFactory.doCreateBean(beanName, mbdToUse, args)"></a>AbstractBeanFactory.doCreateBean(beanName, mbdToUse, args)</h6><p>这个方法主要完成如下事项：</p><ol><li>先从缓存获取bean实例，如果存在直接返回</li><li>不在缓存中则通过<code>doCreateBean()</code>方法创建。判断bean定义是单例，还是其他Scope<ol><li>如是单例，则先创建bean依赖的bean。</li><li>创建bean本身</li><li>执行后置处理器<code>InstantiationAwareBeanPostProcessor</code>提供一个机会可以返回代理对象（AOP实现的代码位置）</li><li>通过底层反射<code>newInstance()</code>方法创建对象</li><li>执行后置处理器<code>AutowiredAnnotationBeanPostProcessor和CommonAnnotationBeanPostProcessor</code>后置处理器扫描<code>@Autowired</code>，<code>@Resource</code>，<code>@Value</code>注解的属并设置到缓存中，这里并不是真正实现注入。</li><li>执行后置处理器<code>SmartInstantiationAwareBeanPostProcessor</code>的<code>getEarlyBeanReference()</code>方法尝试获取一个早期的引用，并设置到单例工厂缓存中。</li><li>执行后置处理器<code>InstantiationAwareBeanPostProcessor</code>对实例化后初始化前的bean做一下扩展操作。</li><li>执行后置处理器<code>AutowiredAnnotationBeanPostProcessor和CommonAnnotationBeanPostProcessor</code>后置处理器注入定义为<code>@Autowired</code>，<code>@Resource</code>，<code>@Value</code>的属</li><li>对<code>&lt;property&gt;</code>标签进行属性注入。</li><li>执行Aware接口 ，包括BeanFactoryAware，BeanClassLoaderAware，BeanNameAware</li><li>执行各种初始化回调方法，包括<code>@PostConstruct</code>注解定义的方法、<code>InitializingBean</code>接口的<code>afterPropertiesSet()</code>方法、<code>@Bean(initMethod=&quot;bean中自定义的方法名&quot;)</code>注解中自定义的初始化方法</li><li>循环依赖检查</li><li>注册（只是注册，并不是执行，手动关闭容器的时候才会执行）各种bean的销毁回调方法，包括<code>DispoableBean</code>接口的<code>destory()</code>方法、<code>@Bean(destoryMethod=&quot;bean中自定义的方法名&quot;)</code>自定义的方法、<code>@PreDestory</code>注解定义的方法、把容器中<code>DestructionAwareBeanPostProcessor</code>的实现类注入到属性<code>this.beanPostProcessors</code>上。</li><li>把创建好的对象设置到缓存中。</li></ol></li><li>如果Scope不单例，同样是按照上面第二点的步骤创建对象，唯一不同的是不会把对象设置到缓存中。每次都是创建一个新的对象</li></ol><p>详细源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(<span class="keyword">final</span> String name, <span class="meta">@Nullable</span> <span class="keyword">final</span> Class&lt;T&gt; requiredType,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="meta">@Nullable</span> <span class="keyword">final</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> String beanName = transformedBeanName(name);</span><br><span class="line">  Object bean;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">  <span class="comment">// 先获取早期的单例对象，先查缓存，如果这个bean已经创建过则直接返回（有可能还没做初始化属性赋值，是个半成品的实例，但是它的地址不会变了可以提前返回）</span></span><br><span class="line">  Object sharedInstance = getSingleton(beanName);</span><br><span class="line">  <span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                     <span class="string">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 获取bean实例对象，如果是工厂bean则设置bean的属性isFactoryBean为true</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 缓存中还没有beanName对应的实例</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fail if we&#x27;re already creating this bean instance:</span></span><br><span class="line">    <span class="comment">// We&#x27;re assumably within a circular reference.</span></span><br><span class="line">    <span class="comment">// 如果是原型类型的bean直接抛异常</span></span><br><span class="line">    <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">    <span class="comment">// 检查是否存在父工厂，一般情况下开发者不会自定义工厂的实现，所以这里是一个null</span></span><br><span class="line">    BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">    <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">      <span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">      String nameToLookup = originalBeanName(name);</span><br><span class="line">      <span class="keyword">if</span> (parentBeanFactory <span class="keyword">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">          nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;  <span class="comment">// 容器初始化调用getBean(String name)方法时args为null</span></span><br><span class="line">        <span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line">        <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (requiredType != <span class="keyword">null</span>) &#123;  <span class="comment">// 容器初始化调用getBean(String name)方法时requiredType为null</span></span><br><span class="line">        <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">        <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">      <span class="comment">// 把创建好的bean实例标记成创建成功（就是把创建好的bean放到已经创建完成的数组里面）</span></span><br><span class="line">      markBeanAsCreated(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 根据beanName获取bean定义信息</span></span><br><span class="line">      <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">      checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">      <span class="comment">//  拿到beanName对应bean定义信息中的依赖集合，</span></span><br><span class="line">      <span class="comment">// 在实例化自己之前先实例化依赖的bean</span></span><br><span class="line">      String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">      <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">          <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                            <span class="string">&quot;Circular depends-on relationship between &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; and &#x27;&quot;</span> + dep + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 将beanName和dep的依赖关系注册到缓存中</span></span><br><span class="line">          registerDependentBean(dep, beanName);</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取beanName依赖的bean实例，如果dep对应是实例还没创建则创建dep对应的实例</span></span><br><span class="line">            <span class="comment">// 比如实例化beanA时发现依赖beanB则先初始化beanB，递归调用直到所有依赖都实例化</span></span><br><span class="line">            getBean(dep);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                            <span class="string">&quot;&#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; depends on missing bean &#x27;&quot;</span> + dep + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Create bean instance.</span></span><br><span class="line">      <span class="comment">// beanName 对应的依赖bean创建完成后创建beanName实例</span></span><br><span class="line">      <span class="keyword">if</span> (mbd.isSingleton()) &#123;  <span class="comment">//  单例</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory)方法</span></span><br><span class="line"><span class="comment">                     * 在父类FactoryBeanRegistrySupport的父类DefaultSingleBeanFactoryRegistry中做了实现</span></span><br><span class="line"><span class="comment">                     * ObjectFactory是一个bean工厂接口，这里是通过lambda表达式（匿名类）方式实现</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@see</span> DefaultSingletonBeanRegistry#getSingleton (String beanName, Object singletonObject)</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">        sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                             * 创建单例对象，createBean方法由子类实现，</span></span><br><span class="line"><span class="comment">                             * <span class="doctag">@see</span> AbstractAutowireCapableBeanFactory#createBean(String, RootBeanDefinition, Object[]) </span></span><br><span class="line"><span class="comment">                              */</span></span><br><span class="line">            <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">            <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">            <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">            destroySingleton(beanName);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 如果经过前面createBean方法还是没创建成功那么就会通过开发者实现的FactoryBean接口创建对象</span></span><br><span class="line">        <span class="comment">// 也就是说FactoryBean.getObject()方法是在这里被执行的。</span></span><br><span class="line">        <span class="comment">// 通过FactoryBean创建的实例不会执行初始化回调。不会执行XxxAware接口</span></span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// prototype类型实例</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">        <span class="comment">// It&#x27;s a prototype -&gt; create a new instance.</span></span><br><span class="line">        <span class="comment">// 如果是prototype类型的bean，每次都新建一个实例</span></span><br><span class="line">        Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          beforePrototypeCreation(beanName);</span><br><span class="line">          prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">          afterPrototypeCreation(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 非单例类型，非prototype类型，通常是一些web相关，比如request、session类型</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        String scopeName = mbd.getScope();</span><br><span class="line">        <span class="keyword">final</span> Scope scope = <span class="keyword">this</span>.scopes.get(scopeName);</span><br><span class="line">        <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;No Scope registered for scope name &#x27;&quot;</span> + scopeName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          Object scopedInstance = scope.get(beanName, () -&gt; &#123;</span><br><span class="line">            beforePrototypeCreation(beanName);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">              afterPrototypeCreation(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">          <span class="comment">// 省略</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">      <span class="comment">// 省略</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if required type matches the type of the actual bean instance.</span></span><br><span class="line">  <span class="comment">// 检查bean是否有必须的类型转换</span></span><br><span class="line">  <span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">      <span class="keyword">if</span> (convertedBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> convertedBean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">      <span class="comment">// 省略</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面分别介绍<code>doCreatBean()</code>方法中调用的核心方法。</p><h6 id="AbstractAutowireCapableBeanFactory-createBean"><a href="#AbstractAutowireCapableBeanFactory-createBean" class="headerlink" title="AbstractAutowireCapableBeanFactory#createBean"></a>AbstractAutowireCapableBeanFactory#createBean</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">    logger.trace(<span class="string">&quot;Creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  RootBeanDefinition mbdToUse = mbd;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Make sure bean class is actually resolved at this point, and</span></span><br><span class="line">  <span class="comment">// clone the bean definition in case of a dynamically resolved Class</span></span><br><span class="line">  <span class="comment">// which cannot be stored in the shared merged bean definition.</span></span><br><span class="line">  <span class="comment">// 通过Class.forName(bean)方法获取实例，合并bean定义</span></span><br><span class="line">  Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class="line">  <span class="keyword">if</span> (resolvedClass != <span class="keyword">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    mbdToUse = <span class="keyword">new</span> RootBeanDefinition(mbd);</span><br><span class="line">    mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Prepare method overrides.</span></span><br><span class="line">  <span class="comment">// 设置重写属性值：setOverloaded(false)</span></span><br><span class="line">  <span class="comment">// @LookUp注解就是在这里实现的</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    mbdToUse.prepareMethodOverrides();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</span><br><span class="line">                                           beanName, <span class="string">&quot;Validation of method overrides failed&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行后置处理器</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor 接口实现类，</span></span><br><span class="line"><span class="comment">             * 给一个机会返回代理对象而不是目标bean实例本身，如果是AOP类就会在这里返回了，比如用<span class="doctag">@Aspect</span>注释的类</span></span><br><span class="line"><span class="comment">             * 此接口通常是Spring框架内部使用，这个接口的功能非常强大，使用起来难度大，主要是它继承了很多后置处理接口，导致里面的方法很多（一共有6个方法需要实现）。</span></span><br><span class="line"><span class="comment">             * 如果开发者也想使用此接口的功能推荐使用它的抽象实现InstantiationAwareBeanPostProcessorAdapter。继承此类重写其中你需要的方法即可，</span></span><br><span class="line"><span class="comment">             * 这个抽象类做了一些默认实现不需要你实现9个方法，重写你要的就行了。</span></span><br><span class="line"><span class="comment">             * 注意：如果这里返回了代理对象，则直接结束当前方法返回，不继续往下执行doCreateBean创建普通实例，doCreateBean里面进行的属性填充后置处理器也不会执行。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> #resolveBeforeInstantiation</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">    <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">                                    <span class="string">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 根据BeanDefinition创建bean，并且对创建好的bean执行框架定义的+用户定义的各种后置处理器对bean增强。</span></span><br><span class="line">    <span class="comment">// 同时也会进行属性的填充，执行初始化回调方法，执行XxxAware接口</span></span><br><span class="line">    Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 回到调用处：</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> AbstractBeanFactory#doGetBean(String, Class, Object[], boolean)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    <span class="keyword">return</span> beanInstance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class="line">    <span class="comment">// A previously detected exception with proper bean creation context already,</span></span><br><span class="line">    <span class="comment">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span></span><br><span class="line">    <span class="keyword">throw</span> ex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">      mbdToUse.getResourceDescription(), beanName, <span class="string">&quot;Unexpected exception during bean creation&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法完成两个事情，一是提供一个创建代理的机会，二，不创建代理的情况调用<code>doCreateBean(beanName, mbdToUse,args)</code>方法创建对象。</p><h6 id="doCreateBean-beanName-mbdToUse-args"><a href="#doCreateBean-beanName-mbdToUse-args" class="headerlink" title="doCreateBean(beanName, mbdToUse, args);"></a>doCreateBean(beanName, mbdToUse, args);</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> <span class="meta">@Nullable</span> Object[] args)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Instantiate the bean.</span></span><br><span class="line">  BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">    <span class="comment">// 从缓存中查询，如果是bean定义是一个bean工厂实例可以直接拿到。</span></span><br><span class="line">    instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 普通bean，根据bean定义创建bean实例，并包装成BeanWrapper返回</span></span><br><span class="line">    instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取经过jdk1.8的Optional类包装过的非空对象</span></span><br><span class="line">  <span class="keyword">final</span> Object bean = instanceWrapper.getWrappedInstance();</span><br><span class="line">  <span class="comment">// 获取bean的class类型</span></span><br><span class="line">  Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">  <span class="keyword">if</span> (beanType != NullBean.class) &#123;</span><br><span class="line">    mbd.resolvedTargetType = beanType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allow post-processors to modify the merged bean definition.</span></span><br><span class="line">  <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行后置处理器接口MergedBeanDefinitionPostProcessor，bean实例化之后，就可以通过反射获取到类或者属性上的注释信息</span></span><br><span class="line">        <span class="comment">// 处理@Resource、@Autowired、@Value注解的定义信息，并把这些注解的定义信息放在缓存中。待后续属性填充的时候使用。</span></span><br><span class="line">        <span class="comment">// 如果有则吧注解信息转换成AutowiredFieldElement对象或者AutowiredMethodElement对象或者ResourceElement对象</span></span><br><span class="line">        <span class="comment">// 实现类有：AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor等</span></span><br><span class="line">        applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                        <span class="string">&quot;Post-processing of merged bean definition failed&quot;</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class="line">  <span class="comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class="line">  <span class="comment">// 单例bean &amp;&amp; 允许循环依赖 &amp;&amp; bean正在被创建</span></span><br><span class="line">  <span class="keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">                                    isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">  <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                   <span class="string">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行后置处理器SmartInstantiationAwareBeanPostProcessor的getEarlyBeanReference()方法尝试获取一个早期的引用。</span></span><br><span class="line"><span class="comment">             * 并加入的单例工厂缓存中</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> DefaultSingletonBeanRegistry#addSingletonFactory(String, ObjectFactory)</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> #getEarlyBeanReference</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the bean instance.</span></span><br><span class="line">  <span class="comment">// 初始化bean实例，填充属性，注入依赖（@Autowired，@Resource，@Value）注解的属性</span></span><br><span class="line">  Object exposedObject = bean;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">             执行bean的初始化回调方法以及执行后置处理器的初始化方法，包括：</span></span><br><span class="line"><span class="comment">            一，执行Aware接口 ，包括BeanFactoryAware，BeanClassLoaderAware，BeanNameAware</span></span><br><span class="line"><span class="comment">                注意：ApplicationContext的注入是在另外一个后置处理器ApplicationContextAwareProcessor中执行。</span></span><br><span class="line"><span class="comment">              二，执行bean初始化回调，包括：</span></span><br><span class="line"><span class="comment">                0. 执行初始化回调BeanPostProcessor.postProcessBeforeInitialization()方法</span></span><br><span class="line"><span class="comment">                1. 执行初始化回调<span class="doctag">@PostConstruct</span>注解定义的方法</span></span><br><span class="line"><span class="comment">                 2. 执行初始化回调InitializingBean.afterPropertiesSet()方法</span></span><br><span class="line"><span class="comment">                3. 执行初始化回调<span class="doctag">@Bean</span>(initMethod = &quot;beanInit&quot;)定义的初始化方法beanInit()</span></span><br><span class="line"><span class="comment">                 4. 执行初始化回调BeanPostProcessor.postProcessAfterInitialization()方法</span></span><br><span class="line"><span class="comment">                5. 执行初始化回调SmartInitializingSingleton.afterSingletonsInstantiated()方法</span></span><br><span class="line"><span class="comment">                按照上述执行顺序执行</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">        mbd.getResourceDescription(), beanName, <span class="string">&quot;Initialization of bean failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 循环依赖检查</span></span><br><span class="line">  <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">    Object earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">        exposedObject = earlySingletonReference;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">        String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">        Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class="line">        <span class="keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">            actualDependentBeans.add(dependentBean);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                                                     <span class="string">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; has been injected into other beans [&quot;</span> +</span><br><span class="line">                                                     StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                                                     <span class="string">&quot;] in its raw version as part of a circular reference, but has eventually been &quot;</span> +</span><br><span class="line">                                                     <span class="string">&quot;wrapped. This means that said other beans do not use the final version of the &quot;</span> +</span><br><span class="line">                                                     <span class="string">&quot;bean. This is often the result of over-eager type matching - consider using &quot;</span> +</span><br><span class="line">                                                     <span class="string">&quot;&#x27;getBeanNamesOfType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Register bean as disposable.</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 注册bean销毁回调方法，这个方法和前面的initializeBean()方法是对应的。通常情况下初始化方法和销毁方法是同时出现的。</span></span><br><span class="line"><span class="comment">             * 比如回调DisposableBean接口的destroy()方法，需要注意的是这里只是注册，并不会执行销毁回调方法。</span></span><br><span class="line"><span class="comment">             * 销毁方法的调用是在手动执行容器的关闭方法的时候：</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> org.springframework.context.support.AbstractApplicationContext#close()</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> AbstractBeanFactory#registerDisposableBeanIfNecessary(String, Object, RootBeanDefinition)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">      mbd.getResourceDescription(), beanName, <span class="string">&quot;Invalid destruction signature&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 回到调用处：</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> #createBean(String, RootBeanDefinition, Object[])</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">  <span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法非常复杂，完成对象创建，属性填充，依赖注入，初始化。</p><ol><li>createBeanInstance(beanName, mbd, args)方法完成对象创建</li><li>applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName)方法完成@Resource、@Autowired、@Value注解的定义信息加载。</li><li>addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean))方法尝试获取一个早期的引用</li><li>populateBean(beanName, mbd, instanceWrapper)方法执行后置处理器的<code>postProcessAfterInstantiation()</code>方法，完成<code>@Autowired，@Resource，@Value</code>注解的属性值注入。</li><li>initializeBean(beanName, exposedObject, mbd)方法执行各种初始化回调方法</li><li>registerDisposableBeanIfNecessary(beanName, bean, mbd)方法完成bean的各种销毁方法的注册</li></ol><h6 id="1-createBeanInstance-beanName-mbd-args"><a href="#1-createBeanInstance-beanName-mbd-args" class="headerlink" title="1. createBeanInstance(beanName, mbd, args)"></a>1. createBeanInstance(beanName, mbd, args)</h6><p>这个方法最底层是通过反射的<code>newInstance()</code>方法创建对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Make sure bean class is actually resolved at this point.</span></span><br><span class="line">  Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查bean的访问类型，比如是public并且是非final</span></span><br><span class="line">  <span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                    <span class="string">&quot;Bean class isn&#x27;t public, and non-public access not allowed: &quot;</span> + beanClass.getName());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 存在Supplier回调则使用回调里的方法创建实例（jdk1.8）之后的才有的特性</span></span><br><span class="line">  <span class="comment">// 通过instanceSupplier.get()方法返回实例</span></span><br><span class="line">  Supplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class="line">  <span class="keyword">if</span> (instanceSupplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obtainFromSupplier(instanceSupplier, beanName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过工厂方法创建实例</span></span><br><span class="line">  <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Shortcut when re-creating the same bean...</span></span><br><span class="line">  <span class="comment">// 通过constructorArgumentsResolved标记起到了缓存的作用</span></span><br><span class="line">  <span class="comment">// 当容器创建同一个类型bean的时候（非单例情况），可以直接使用构造器创建，不需要再此解析构造器上的参数。</span></span><br><span class="line">  <span class="comment">// 参数的解析的开销也是不小的。</span></span><br><span class="line">  <span class="keyword">boolean</span> resolved = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">boolean</span> autowireNecessary = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">        resolved = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// constructorArgumentsResolved标记了构造器的参数都已经解析完成</span></span><br><span class="line">        autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (resolved) &#123;</span><br><span class="line">    <span class="keyword">if</span> (autowireNecessary) &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 通过有参构造方法创建，并自动注入构造方法中的参数值，如果有对象依赖在方法内部又会调getBean()方法创建bean实例</span></span><br><span class="line"><span class="comment">                 * 然后注入到对应的属性上。比如这个bean，构造方法引用了另外一个RefrenceBeanA</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@see</span> com.ubuntuvim.spring.createbean.HasArgsConstructBean</span></span><br><span class="line"><span class="comment">                 * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@Component</span></span></span><br><span class="line"><span class="comment">                 * public class HasArgsConstructBean &#123;</span></span><br><span class="line"><span class="comment">                 *       private RefrenceBeanA refrenceBeanA;</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 *       public HasArgsConstructBean(RefrenceBeanA refrenceBeanA) &#123;</span></span><br><span class="line"><span class="comment">                 *           this.refrenceBeanA = refrenceBeanA;</span></span><br><span class="line"><span class="comment">                 *    &#125;</span></span><br><span class="line"><span class="comment">                 * &#125;</span></span><br><span class="line"><span class="comment">                 * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">                  */</span></span><br><span class="line">      <span class="keyword">return</span> autowireConstructor(beanName, mbd, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 使用默认的无参构造方法创建实例，底层使用反射newInstance()方法创建对象</span></span><br><span class="line">      <span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Candidate constructors for autowiring?</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果有依赖注入的构造器</span></span><br><span class="line"><span class="comment">         * 方法内部会调用后置处理器获取定制化的构造器列表，如果没有任何后置处理器的实现则返回null</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> SmartInstantiationAwareBeanPostProcessor</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">  Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">  <span class="keyword">if</span> (ctors != <span class="keyword">null</span> || mbd.getResolvedAutowireMode() == AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">      mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) &#123;</span><br><span class="line">    <span class="keyword">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Preferred constructors for default construction?</span></span><br><span class="line">  <span class="comment">// 如果有默认的构造器</span></span><br><span class="line">  ctors = mbd.getPreferredConstructors();</span><br><span class="line">  <span class="keyword">if</span> (ctors != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> autowireConstructor(beanName, mbd, ctors, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// No special handling: simply use no-arg constructor.</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 前面的构造器都没有则最后使用无参构造器创建实例</span></span><br><span class="line"><span class="comment">         * 底层使用反射newInstance()方法创建对象</span></span><br><span class="line"><span class="comment">         * 实例创建完成，回到调用处：</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> AbstractAutowireCapableBeanFactory#doCreateBean(String, RootBeanDefinition, Object[])</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">  <span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>instantiateBean()</code>方法的代码我就不贴了，底层使用反射newInstance()方法创建对象。</p><h6 id="applyMergedBeanDefinitionPostProcessors-mbd-beanType-beanName"><a href="#applyMergedBeanDefinitionPostProcessors-mbd-beanType-beanName" class="headerlink" title="applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName)"></a>applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyMergedBeanDefinitionPostProcessors</span><span class="params">(RootBeanDefinition mbd, Class&lt;?&gt; beanType, String beanName)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">      MergedBeanDefinitionPostProcessor bdp = (MergedBeanDefinitionPostProcessor) bp;</span><br><span class="line">      bdp.postProcessMergedBeanDefinition(mbd, beanType, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法比较简单，就是执行容器中后置处理器<code>MergedBeanDefinitionPostProcessor</code>的<code>postProcessMergedBeanDefinition()</code>方法。</p><p>这个后置处理器有两个非常重要的实现类。一个是<code>AutowiredAnnotationBeanPostProcessor</code>，一个是<code>CommonAnnotationBeanPostProcessor</code>，这两个后置处理器的实现在这里主要是用来扫描@Resource、@Autowired、@Value注解的定义信息</p><h6 id="addSingletonFactory-beanName-gt-getEarlyBeanReference-beanName-mbd-bean"><a href="#addSingletonFactory-beanName-gt-getEarlyBeanReference-beanName-mbd-bean" class="headerlink" title="addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean))"></a>addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean))</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getEarlyBeanReference</span><span class="params">(String beanName, RootBeanDefinition mbd, Object bean)</span> </span>&#123;</span><br><span class="line">  Object exposedObject = bean;</span><br><span class="line">  <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> SmartInstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">        SmartInstantiationAwareBeanPostProcessor ibp = (SmartInstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">        <span class="comment">// 获取提前暴露的bean引用，主要用于解决循环依赖，只有单例bean调用此方法</span></span><br><span class="line">        exposedObject = ibp.getEarlyBeanReference(exposedObject, beanName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="populateBean-beanName-mbd-instanceWrapper"><a href="#populateBean-beanName-mbd-instanceWrapper" class="headerlink" title="populateBean(beanName, mbd, instanceWrapper)"></a>populateBean(beanName, mbd, instanceWrapper)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> BeanWrapper bw)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 前面创建的bean实例为空时</span></span><br><span class="line">  <span class="keyword">if</span> (bw == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mbd.hasPropertyValues()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">        mbd.getResourceDescription(), beanName, <span class="string">&quot;Cannot apply property values to null instance&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Skip property population phase for null instance.</span></span><br><span class="line">      <span class="comment">// 当前bean实例都是null也就无法填充属性值了，直接返回</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span></span><br><span class="line">  <span class="comment">// state of the bean before properties are set. This can be used, for example,</span></span><br><span class="line">  <span class="comment">// to support styles of field injection.</span></span><br><span class="line">  <span class="comment">// 执行后置处理器InstantiationAwareBeanPostProcessor，提供一个机会让开发者可以在bean实例化后，初始化前做一些操作。</span></span><br><span class="line">  <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">        InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">        <span class="comment">// 如果返回false则直接退出当前方法，不进行下面的属性填充操作，所以一定要非常注意后置处理器的返回值以及执行顺序。</span></span><br><span class="line">        <span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取属性值</span></span><br><span class="line">  PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class="keyword">null</span>);</span><br><span class="line">  <span class="comment">// 获取注入模式（byType或者byName)</span></span><br><span class="line">  <span class="keyword">int</span> resolvedAutowireMode = mbd.getResolvedAutowireMode();</span><br><span class="line">  <span class="keyword">if</span> (resolvedAutowireMode == AUTOWIRE_BY_NAME || resolvedAutowireMode == AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">    <span class="comment">// 把属性值再做一次包装，转换成一个MutablePropertyValues对象。</span></span><br><span class="line">    MutablePropertyValues newPvs = <span class="keyword">new</span> MutablePropertyValues(pvs);</span><br><span class="line">    <span class="comment">// Add property values based on autowire by name if applicable.</span></span><br><span class="line">    <span class="comment">// 如果适用，根据类型添加基于自动装配的属性值。</span></span><br><span class="line">    <span class="keyword">if</span> (resolvedAutowireMode == AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">      autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Add property values based on autowire by type if applicable.</span></span><br><span class="line">    <span class="comment">// 如果适用，根据类型添加基于自动装配的属性值。</span></span><br><span class="line">    <span class="keyword">if</span> (resolvedAutowireMode == AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">      autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">    &#125;</span><br><span class="line">    pvs = newPvs;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 存在InstantiationAwareBeanPostProcessor后置处理器</span></span><br><span class="line">  <span class="keyword">boolean</span> hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class="line"></span><br><span class="line">  PropertyDescriptor[] filteredPds = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">    <span class="comment">// 依赖注入模式不是byType或者byName的情况有可能为空，这两种情况执行了pvs = newPvs不会为null</span></span><br><span class="line">    <span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line">      pvs = mbd.getPropertyValues();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 属性注入，包括依赖对象注入，依赖集合注入，</span></span><br><span class="line"><span class="comment">                     * 比如下面这3种写法，都会在此完成属性注入</span></span><br><span class="line"><span class="comment">                     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">                     * private Fruit apple;</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">                     * private List&lt;InterfaceA&gt; interfaceAList;</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 同理，Map也是一样的</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">                     * private Map&lt;String, InterfaceA&gt; interfaceAMap;</span></span><br><span class="line"><span class="comment">                     * key就是实现类的beanName，value就是实现类实例对象。</span></span><br><span class="line"><span class="comment">                     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">                     * 其中AutowiredAnnotationBeanPostProcessor这个后置处理器用于给<span class="doctag">@Autowired</span>注解或者<span class="doctag">@Value</span>注解定义的属性注入值，</span></span><br><span class="line"><span class="comment">                     * 注入的步骤：1. 扫描bean实例中使用<span class="doctag">@Autowired</span>注解的属性和方法，2. 根据注入的类型从IoC容器中在匹配的bean；3. 通过反射执行赋值操作</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@see</span> org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#postProcessProperties</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@see</span> org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#postProcessPropertyValues</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 其中CommonAnnotationBeanPostProcessor这个后置处理器用于给<span class="doctag">@Resource</span>注解定义的属性注入值</span></span><br><span class="line"><span class="comment">                     * 同时这个类还处理了<span class="doctag">@PostConstruct</span>/<span class="doctag">@PreDestroy</span>这两个注解</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@see</span> org.springframework.context.annotation.CommonAnnotationBeanPostProcessor#postProcessProperties</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">        InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">        <span class="comment">// postProcessProperties()方法已经声明为过时。推荐使用postProcessPropertyValues()方法</span></span><br><span class="line">        PropertyValues pvsToUse = ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);</span><br><span class="line">        <span class="keyword">if</span> (pvsToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (filteredPds == <span class="keyword">null</span>) &#123;</span><br><span class="line">            filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">          &#125;</span><br><span class="line">          pvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">          <span class="comment">// 如果返回的属性值为null直接退出当前方法，说明没有可填充的属性</span></span><br><span class="line">          <span class="comment">// 在实现后置处理器的时候特别要注意接口方法的返回值已经执行顺序，如果第一个后置处理器就返回了null，</span></span><br><span class="line">          <span class="comment">// 那么同一类型的其他排在后面的就不会执行了</span></span><br><span class="line">          <span class="keyword">if</span> (pvsToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pvs = pvsToUse;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 是否需要依赖检查，DEPENDENCY_CHECK_NONE标识不需要依赖检查</span></span><br><span class="line">  <span class="keyword">boolean</span> needsDepCheck = (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line">  <span class="keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line">    <span class="keyword">if</span> (filteredPds == <span class="keyword">null</span>) &#123;</span><br><span class="line">      filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">    &#125;</span><br><span class="line">    checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pvs != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 处理xml方式的&lt;property&gt;标签。比如下面的bean</span></span><br><span class="line"><span class="comment">             * &lt;bean id=&quot;testBean&quot; class=&quot;com.ubuntuvim.spring.TestBean&quot;&gt;</span></span><br><span class="line"><span class="comment">             *         &lt;property name=&quot;name&quot; value=&quot;ubuntuvim&quot; /&gt;</span></span><br><span class="line"><span class="comment">             *         &lt;property name=&quot;address&quot; value=&quot;china&quot; /&gt;</span></span><br><span class="line"><span class="comment">             * &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法实现也是非常复杂的，它所完成的事情在代码的注释上已经有说明。</p><h6 id="initializeBean-beanName-exposedObject-mbd"><a href="#initializeBean-beanName-exposedObject-mbd" class="headerlink" title="initializeBean(beanName, exposedObject, mbd)"></a>initializeBean(beanName, exposedObject, mbd)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果bean实现了XxxAware接口，则调用这些接口的setXxx()方法</span></span><br><span class="line">  <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">      invokeAwareMethods(beanName, bean);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;, getAccessControlContext());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    invokeAwareMethods(beanName, bean);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 执行后置处理器的postProcessorBeforeInitialization()方法</span></span><br><span class="line"><span class="comment">         * 这里会首先执行第一个初始化回调<span class="doctag">@PostConstruct</span>声明的方法，是这个类实现的</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor#postProcessBeforeInitialization</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">  Object wrappedBean = bean;</span><br><span class="line">  <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">    wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行InitializingBean接口和自定义的初始化方法（@Bean(initMethod = &quot;beanInit&quot;))</span></span><br><span class="line">    invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">      (mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</span><br><span class="line">      beanName, <span class="string">&quot;Invocation of init method failed&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 执行后置处理器的postProcessorAfterInitialization()方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">  <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">    wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 完成各种初始化回调方法，回到调用处：</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> #doCreateBean(String, RootBeanDefinition, Object[]) </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">  <span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法主要完成属性的填充，依赖注入。详细过程代码注释已经有描述。</p><h6 id="registerDisposableBeanIfNecessary-beanName-bean-mbd"><a href="#registerDisposableBeanIfNecessary-beanName-bean-mbd" class="headerlink" title="registerDisposableBeanIfNecessary(beanName, bean, mbd)"></a>registerDisposableBeanIfNecessary(beanName, bean, mbd)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerDisposableBeanIfNecessary</span><span class="params">(String beanName, Object bean, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">  AccessControlContext acc = (System.getSecurityManager() != <span class="keyword">null</span> ? getAccessControlContext() : <span class="keyword">null</span>);</span><br><span class="line">  <span class="comment">// 非原型bean &amp;&amp; （bean实例内使用里@PreDestory注解 || bean实现了DisposableBean接口</span></span><br><span class="line">  <span class="comment">//                 || 容器中注册了DestructionAwareBeanPostProcessor后置处理器）</span></span><br><span class="line">  <span class="keyword">if</span> (!mbd.isPrototype() &amp;&amp; requiresDestruction(bean, mbd)) &#123;</span><br><span class="line">    <span class="comment">// 单例bean</span></span><br><span class="line">    <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">      <span class="comment">// Register a DisposableBean implementation that performs all destruction</span></span><br><span class="line">      <span class="comment">// work for the given bean: DestructionAwareBeanPostProcessors,</span></span><br><span class="line">      <span class="comment">// DisposableBean interface, custom destroy method.</span></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 把销毁回调方法包装成DisposableBeanAdapter并注册到容器中，待手动调用容器的close()方法的时候执行</span></span><br><span class="line"><span class="comment">                 * 包括：</span></span><br><span class="line"><span class="comment">                 * 1. <span class="doctag">@Bean</span>注解中自定义的销毁回调方法</span></span><br><span class="line"><span class="comment">                 * 2. <span class="doctag">@PreDestory</span>注解的回调方法</span></span><br><span class="line"><span class="comment">                 * 3. 实现DispoableBean接口的detory()回调方法</span></span><br><span class="line"><span class="comment">                 * 4. 后置处理器DestructionAwareBeanPostProcessor的postProcessBeforeDestruction()方法</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">      registerDisposableBean(beanName,</span><br><span class="line">                             <span class="keyword">new</span> DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 非单例、非原型bean</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// A bean with a custom scope...</span></span><br><span class="line">      Scope scope = <span class="keyword">this</span>.scopes.get(mbd.getScope());</span><br><span class="line">      <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;No Scope registered for scope name &#x27;&quot;</span> + mbd.getScope() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      scope.registerDestructionCallback(beanName,</span><br><span class="line">                                        <span class="keyword">new</span> DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到处完成普通对象的创建、初始化、执行初始回调等操作。</p><h5 id="AbstractBeanFactory-getObjectForBeanInstance"><a href="#AbstractBeanFactory-getObjectForBeanInstance" class="headerlink" title="AbstractBeanFactory.getObjectForBeanInstance()"></a>AbstractBeanFactory.getObjectForBeanInstance()</h5><p>第二个方法是当前类实现的：<code>AbstractBeanFactory.getObjectForBeanInstance()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectForBeanInstance</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  Object beanInstance, String name, String beanName, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Don&#x27;t let calling code try to dereference the factory if the bean isn&#x27;t a factory.</span></span><br><span class="line">  <span class="comment">// 如果不是FactoryBean，为了以防开发者自定义的bean名字也加了&amp;前缀，因为Spring默认&amp;开头的bean是工厂bean</span></span><br><span class="line">  <span class="keyword">if</span> (BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (beanInstance <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line">      <span class="keyword">return</span> beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanIsNotAFactoryException(beanName, beanInstance.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mbd != <span class="keyword">null</span>) &#123;</span><br><span class="line">      mbd.isFactoryBean = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beanInstance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Now we have the bean instance, which may be a normal bean or a FactoryBean.</span></span><br><span class="line">  <span class="comment">// If it&#x27;s a FactoryBean, we use it to create a bean instance, unless the</span></span><br><span class="line">  <span class="comment">// caller actually wants a reference to the factory.</span></span><br><span class="line">  <span class="comment">// 如果不是FactoryBean则无需通过调用getObject方法获取实例，</span></span><br><span class="line">  <span class="comment">// 正常情况下普通的bean已经在前面的doCreateBean方法中创建好了</span></span><br><span class="line">  <span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">    <span class="keyword">return</span> beanInstance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Object object = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (mbd != <span class="keyword">null</span>) &#123;</span><br><span class="line">    mbd.isFactoryBean = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 从FactoryBean对象缓存中获取</span></span><br><span class="line">    object = getCachedObjectForFactoryBean(beanName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Return bean instance from factory.</span></span><br><span class="line">    <span class="comment">// 获取工厂bean实例本身</span></span><br><span class="line">    FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class="line">    <span class="comment">// Caches object obtained from FactoryBean if it is a singleton.</span></span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="keyword">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class="line">      mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> synthetic = (mbd != <span class="keyword">null</span> &amp;&amp; mbd.isSynthetic());</span><br><span class="line">    <span class="comment">// 调用工厂bean的getObject方法获取对象实例</span></span><br><span class="line">    object = getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面一大推都是判断和校验，真正创建实例对象是在<code>getObjectFromFactoryBean()</code>方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectFromFactoryBean</span><span class="params">(FactoryBean&lt;?&gt; factory, String beanName, <span class="keyword">boolean</span> shouldPostProcess)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// FactoryBean接口中的isSingleton()方法返回的值作用是：</span></span><br><span class="line">  <span class="comment">// 由FactoryBean创建出来的bean实例的作用域是singleton还是prototype，</span></span><br><span class="line">  <span class="comment">// 如果返回false，表示由这个FactoryBean创建的对象是多例的，</span></span><br><span class="line">  <span class="comment">// 那么我们每次从容器中getBean的时候都会去重新调用FactoryBean中的getObject方法获取一个新的对象。</span></span><br><span class="line">  <span class="comment">// 若返回true，表示创建的对象是单例的，那么我们每次从容器中获取这个对象的时候都是同一个对象（直接从单例缓存中获取）。</span></span><br><span class="line">  <span class="keyword">if</span> (factory.isSingleton() &amp;&amp; containsSingleton(beanName)) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getSingletonMutex()) &#123;</span><br><span class="line">      Object object = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">      <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用工厂bean的getObject方法获取对象实例</span></span><br><span class="line">        object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">        <span class="comment">// Only post-process and store if not put there already during getObject() call above</span></span><br><span class="line">        <span class="comment">// (e.g. because of circular reference processing triggered by custom getBean calls)</span></span><br><span class="line">        Object alreadyThere = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">        <span class="keyword">if</span> (alreadyThere != <span class="keyword">null</span>) &#123;</span><br><span class="line">          object = alreadyThere;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">              <span class="comment">// Temporarily return non-post-processed object, not storing it yet..</span></span><br><span class="line">              <span class="keyword">return</span> object;</span><br><span class="line">            &#125;</span><br><span class="line">            beforeSingletonCreation(beanName);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">/**</span></span><br><span class="line"><span class="comment">                                 * 调用子类的实现。用于执行后置处理器，对bean实例做增强。</span></span><br><span class="line"><span class="comment">                                 * <span class="doctag">@see</span> AbstractAutowireCapableBeanFactory#postProcessObjectFromFactoryBean</span></span><br><span class="line"><span class="comment">                                 */</span></span><br><span class="line">              object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                                              <span class="string">&quot;Post-processing of FactoryBean&#x27;s singleton object failed&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">              afterSingletonCreation(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (containsSingleton(beanName)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.factoryBeanObjectCache.put(beanName, object);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果FactoryBean接口中的isSingleton()方法返回的是true，</span></span><br><span class="line">  <span class="comment">// 表示通过工厂bean创建出来的bean对象不是单例的，所以不需要缓存每次都是创建一个新的对象实例</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 调用工厂bean的getObject方法获取对象实例</span></span><br><span class="line">    Object object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">    <span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 调用子类的实现。用于执行后置处理器，对bean实例做增强。</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@see</span> AbstractAutowireCapableBeanFactory#postProcessObjectFromFactoryBean</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">        object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">&quot;Post-processing of FactoryBean&#x27;s object failed&quot;</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建的逻辑还没到！！具体处理逻辑通常都是放在<code>do</code>开头的方法中。从上面的代码可以看出来<code>FactoryBean</code>接口的提供的方法其实针对的是接口创建出来的bean对象，而不是对工厂实例本身的设置。</p><p>比如接口中的<code>isSingleton()</code>方法，设置的是工厂创建出来的bean是单例（返回值是<code>true</code>）的还是非单例的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">doGetObjectFromFactoryBean</span><span class="params">(<span class="keyword">final</span> FactoryBean&lt;?&gt; factory, <span class="keyword">final</span> String beanName)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">  Object object;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 调用工厂bean的getObject方法获取对象实例</span></span><br><span class="line">    <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      AccessControlContext acc = getAccessControlContext();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        object = AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) factory::getObject, acc);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">        <span class="keyword">throw</span> pae.getException();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      object = factory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (FactoryBeanNotInitializedException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName, ex.toString());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">&quot;FactoryBean threw exception on object creation&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Do not accept a null value for a FactoryBean that&#x27;s not fully</span></span><br><span class="line">  <span class="comment">// initialized yet: Many FactoryBeans just return null then.</span></span><br><span class="line">  <span class="comment">// 不接受null对象，如果开发者实现了FactoryBean接口，但是在getObject方法中返回了null，那么Spring会默认返回的一个NullBean对象实例</span></span><br><span class="line">  <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(</span><br><span class="line">        beanName, <span class="string">&quot;FactoryBean which is currently in creation returned null from getObject&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    object = <span class="keyword">new</span> NullBean();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的逻辑就非常简单了，最核心就一句代码<code>factory.getObject()</code>调用工厂bean的<code>getObject()</code>方法获取对象实例。</p><p>整个获取对象实例的过程和前面的<code>getSingleton</code>方法类似的，只是最后调用的工厂方法不一样，一个是调用<code>ObjectFactory.getObject()</code>方法创建普通实例对象，一个是调用<code>FactoryBean.getObject()</code>方法创建复杂实例对象。</p><p>对象创建完毕之后都会调用一大推的后置处理器。这些后置处理器会在bean的初始化前后做一些处理。</p><p><strong>到此完成所有单例对象的创建并做初始化、属性的填充。</strong>也就是<code>AbstractApplicationContext.finishBeanFactoryInitialization()</code>方法才执行完。</p><h3 id="finishRefresh"><a href="#finishRefresh" class="headerlink" title="finishRefresh()"></a>finishRefresh()</h3><p>这个方法的实现比较简单，主要做的事情可以通过看源码就知道了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Clear context-level resource caches (such as ASM metadata from scanning).</span></span><br><span class="line">  clearResourceCaches();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize lifecycle processor for this context.</span></span><br><span class="line">  <span class="comment">// 初始化容器生命周期处理器</span></span><br><span class="line">  initLifecycleProcessor();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Propagate refresh to lifecycle processor first.</span></span><br><span class="line">  <span class="comment">// 执行实现fecycleProcessor接口的onRefresh()方法</span></span><br><span class="line">  getLifecycleProcessor().onRefresh();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Publish the final event.</span></span><br><span class="line">  <span class="comment">// 通过initApplicationEventMulticaster()方法注册事件发布器，给registerListeners()方法注册的监听器发布事件，</span></span><br><span class="line">    <span class="comment">// 事件的发布说白就是遍历所有的监听器，调用ApplicationListener接口的onApplicationEvent方法</span></span><br><span class="line">  publishEvent(<span class="keyword">new</span> ContextRefreshedEvent(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Participate in LiveBeansView MBean, if active.</span></span><br><span class="line">  LiveBeansView.registerApplicationContext(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，终于是把Spring容器的整个过程整了一遍。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>IoC原理整篇：</p><p><a href="https://www.cnblogs.com/ittangtang/p/3978349.html">https://www.cnblogs.com/ittangtang/p/3978349.html</a></p><p><strong>Bean定义</strong></p><p><a href="https://cloud.tencent.com/developer/article/1497805">https://cloud.tencent.com/developer/article/1497805</a></p><p><strong>Bean实例化</strong></p><p><a href="https://blog.csdn.net/jy02268879/article/details/87940150">https://blog.csdn.net/jy02268879/article/details/87940150</a></p><p><strong>bean生命周期简介</strong></p><ol><li><a href="https://blog.csdn.net/alex_xfboy/article/details/51211054">https://blog.csdn.net/alex_xfboy/article/details/51211054</a></li></ol><p><strong>bean初始化回调接口</strong></p><ol><li>SmartInitializingSingleton：<a href="https://blog.csdn.net/alex_xfboy/article/details/88808025">https://blog.csdn.net/alex_xfboy/article/details/88808025</a></li></ol><p><strong>后置处理器</strong></p><p>所有后置处理器执行顺序图：</p><p><a href="https://tech.souyunku.com/wp-content/uploads/2020/8/822/202244/2/86_1.png">https://tech.souyunku.com/wp-content/uploads/2020/8/822/202244/2/86_1.png</a></p><ol><li><p>InstantiationAwareBeanPostProcessor</p><p> <a href="https://cloud.tencent.com/developer/article/1409273">https://cloud.tencent.com/developer/article/1409273</a></p><p> <a href="https://my.oschina.net/u/3687664/blog/4267466">https://my.oschina.net/u/3687664/blog/4267466</a></p></li><li><p>MergeBeanDefinitionPostProcessor</p><p> <a href="https://blog.csdn.net/luoyang_java/article/details/85709475">https://blog.csdn.net/luoyang_java/article/details/85709475</a></p></li><li><p>SmartInstantiationAwareBeanPostProcessor</p><p> <a href="https://www.cnblogs.com/zhangjianbin/p/10059191.html">https://www.cnblogs.com/zhangjianbin/p/10059191.html</a></p></li></ol><p><strong>事件发布、订阅相关</strong></p><p><a href="https://cxis.me/2017/02/15/Spring%E7%9A%84ApplicationContext%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/">https://cxis.me/2017/02/15/Spring的ApplicationContext事件机制/</a></p><p><a href="https://juejin.im/post/6854573214061264904">https://juejin.im/post/6854573214061264904</a></p><p><a href="https://www.jianshu.com/p/ef2cee8c5dd1">https://www.jianshu.com/p/ef2cee8c5dd1</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringFramework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务传播机制</title>
      <link href="/2020/09/08/Spring/Spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/09/08/Spring/Spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>Spring事务传播设置有如下类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存user，id是唯一的，否则insert会报错</span></span><br><span class="line"><span class="comment"> * REQUIRED ：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。==&gt; 会跟随service层方法回滚事务</span></span><br><span class="line"><span class="comment"> * SUPPORTS ：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。==&gt; 会跟随service层方法回滚事务</span></span><br><span class="line"><span class="comment"> * MANDATORY ：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。==&gt; 会跟随service层方法回滚事务</span></span><br><span class="line"><span class="comment"> * REQUIRES_NEW ：创建一个新的事务，如果当前存在事务，则把当前事务挂起。 ==&gt; 即使service层的方法也加了事务，也无法回滚dao层的事务（内层已经提交了，外层回滚个屁啊）。</span></span><br><span class="line"><span class="comment"> * NOT_SUPPORTED ：以非事务方式运行，如果当前存在事务，则把当前事务挂起。 ==&gt;  即使service层的方法也加了事务，也无法回滚dao层的事务（内层已经提交了，外层回滚个屁啊）。</span></span><br><span class="line"><span class="comment"> * NEVER ：以非事务方式运行，如果当前存在事务，则抛出异常。 ==&gt; service层无事务的方法可以运行，也就是说，他只能被一个父事务调用。否则，他就要抛出异常。</span></span><br><span class="line"><span class="comment"> * NESTED ：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 REQUIRED</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>上述只是单事务方法的情况，如果存在事务嵌套呢？？比如<code>serviceA.methodA()</code>内部调用了<code>serviceB.methodB()</code>方法，<code>methodA()</code>和<code>methodB()</code>都是有事务的。这种情况下可以根据如下表格对照：</p><table><thead><tr><th><strong>PROPAGATION TYPE</strong></th><th><strong>DESCRIPTION</strong></th></tr></thead><tbody><tr><td><strong>PROPAGATION_REQUIRED</strong></td><td>支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 如果正要执行的事务不在另外一个事务里，那么就起一个新的事务; 比如说，<code>ServiceB.methodB</code>的事务级别定义为PROPAGATION_<code>REQUIRED</code>, 那么由于执行<code>ServiceA.methodA</code>的时候， <code>ServiceA.methodA</code>已经起了事务，这时调用<code>ServiceB.methodB</code>，<code>ServiceB.methodB</code>看到自己已经运行在<code>ServiceA.methodA</code> 的事务内部，就不再起新的事务。而假如<code>ServiceA.methodA</code>运行的时<code>候ServiceB.method</code>B发现自己没有在事务中，他就会为自己新建一个事务。 这样，在<code>ServiceA.methodA</code>或者在<code>ServiceB.methodB</code>内的任何地方出现异常，事务都会被回滚。即使<code>ServiceB.methodB</code>的事务已经被提交，但是<code>ServiceA.methodA</code>在接下来fail要回滚，<code>ServiceB.methodB</code>也要回滚。</td></tr><tr><td><strong>PROPAGATION_SUPPORTS</strong></td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。 如果当前在事务中，即以事务的形式运行，如果当前不在一个事务中，那么就以非事务的形式运行。</td></tr><tr><td><strong>PROPAGATION_MANDATORY</strong></td><td>支持当前事务，如果当前没有事务，就抛出异常。 必须在一个事务中运行，也就是说，他只能被一个父事务调用。否则，他就要抛出异常。</td></tr><tr><td><strong>PROPAGATION_REQUIRES_NEW</strong></td><td>新建事务，如果当前存在事务，把当前事务挂起。 比如我们设计<code>ServiceA.methodA</code>的事务级别为PROPAGATION_<code>REQUIRED</code>，<code>ServiceB.methodB</code>的事务级别为PROPAGATION_<code>REQUIRES_NEW</code>，那么当执行到<code>ServiceB.methodB</code>的时候，<code>ServiceA.methodA</code>所在的事务就会挂起，<code>ServiceB.methodB</code>会起一个新的事务，等待<code>ServiceB.methodB</code>的事务完成以后，他才继续执行。他与PROPAGATION_<code>REQUIRED </code>的事务区别在于事务的回滚程度了。因为<code>ServiceB.methodB</code>是新起一个事务，那么就是存在两个不同的事务。如果<code>ServiceB.methodB</code>已经提交，那么<code>ServiceA.methodA</code>失败回滚，<code>ServiceB.methodB</code>是不会回滚的。如果<code>ServiceB.methodB</code>失败回滚，如果他抛出的异常被<code>ServiceA.methodA</code>捕获，<code>ServiceA.methodA</code>事务仍然可能提交。</td></tr><tr><td><strong>PROPAGATION_NOT_SUPPORTED</strong></td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 不支持当前事务。比如<code>ServiceA.methodA</code>的事务级别是PROPAGATION_<code>REQUIRED</code>，而<code>ServiceB.methodB</code>的事务级别是PROPAGATION_<code>NOT_SUPPORTED</code>，那么当执行到<code>ServiceB.methodB</code>时，<code>ServiceA.methodA</code>的事务挂起，而<code>ServiceB.methodB</code>则以非事务的方式运行完，再继续<code>ServiceA.methodA</code>的事务。</td></tr><tr><td><strong>PROPAGATION_NEVER</strong></td><td>以非事务方式执行，如果当前存在事务，则抛出异常。 不能在事务中运行。假设<code>ServiceA.methodA</code>的事务级别是PROPAGATION_<code>REQUIRED</code>，而ServiceB.methodB的事务级别是PROPAGATION_<code>NEVER</code>， 那么<code>ServiceB.methodB</code>就要抛出异常了。</td></tr><tr><td><strong>PROPAGATION_NESTED</strong></td><td>支持当前事务，新增Savepoint点，与当前事务同步提交或回滚。 理解Nested的关键是savepoint。他与PROPAGATION_<code>REQUIRES_NEW</code>的区别是，PROPAGATION_<code>REQUIRES_NEW</code>另起一个事务，将会与他的父事务相互独立，而Nested的事务和他的父事务是相依的，他的提交是要等和他的父事务一块提交的。也就是说，如果父事务最后回滚，他也要回滚的。 而<code>Nested</code>事务的好处也是他有一个savepoint。</td></tr></tbody></table><p>简单示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.mybatis.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ubuntuvim.mybatis.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.ubuntuvim.mybatis.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/8 下午10:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOneNoTransition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(UUID.randomUUID().toString(), <span class="string">&quot;王五service无事务&quot;</span>+<span class="keyword">new</span> Random().nextInt(<span class="number">10</span>), <span class="string">&quot;M&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOneHasTransition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(UUID.randomUUID().toString(), <span class="string">&quot;ubuntuvim，service有事务&quot;</span>+<span class="keyword">new</span> Random().nextInt(<span class="number">10</span>), <span class="string">&quot;M&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUsersNoTransition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String id = UUID.randomUUID().toString();</span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(UUID.randomUUID().toString(), <span class="string">&quot;张三service无事务&quot;</span>, <span class="string">&quot;M&quot;</span>));</span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(id, <span class="string">&quot;张三2service无事务&quot;</span>, <span class="string">&quot;F&quot;</span>));</span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(UUID.randomUUID().toString(), <span class="string">&quot;张三3service无事务&quot;</span>, <span class="string">&quot;F&quot;</span>));</span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(UUID.randomUUID().toString(), <span class="string">&quot;张三4service无事务&quot;</span>, <span class="string">&quot;M&quot;</span>));</span><br><span class="line">        <span class="comment">// 这个save的id和第二个相同会导致数据库id主键冲突报错，因为当前方法没有加事务不会回滚前面的save持久化</span></span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(id, <span class="string">&quot;张三5service无事务&quot;</span>, <span class="string">&quot;M&quot;</span>));</span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(UUID.randomUUID().toString(), <span class="string">&quot;张三6service无事务&quot;</span>, <span class="string">&quot;F&quot;</span>));</span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(UUID.randomUUID().toString(), <span class="string">&quot;张三7service无事务&quot;</span>, <span class="string">&quot;M&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由于此方法上添加了事务，即使在调用的userMapper.save()方法上也添加事务也会回滚。</span></span><br><span class="line"><span class="comment">     * 但是如果dao的save方法的事务传播属性声明为propagation = Propagation.REQUIRES_NEW则无法回滚，在dao层已经提交了事务。service层回滚不了了。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUsersHasTransition</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String id = UUID.randomUUID().toString();</span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(UUID.randomUUID().toString(), <span class="string">&quot;李四service有事务&quot;</span>, <span class="string">&quot;F&quot;</span>));</span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(id, <span class="string">&quot;李四2service有事务&quot;</span>, <span class="string">&quot;F&quot;</span>));</span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(UUID.randomUUID().toString(), <span class="string">&quot;李四3service有事务&quot;</span>, <span class="string">&quot;F&quot;</span>));</span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(UUID.randomUUID().toString(), <span class="string">&quot;李四4service有事务&quot;</span>, <span class="string">&quot;M&quot;</span>));</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         @Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="comment">         这个save的id和第二个相同会导致数据库id主键冲突报错，但是当前方法加了事务会从异常这个回滚前面的save</span></span><br><span class="line"><span class="comment">         最终结果是这个方法内的save都不会持久化</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(id, <span class="string">&quot;张三5service有事务&quot;</span>, <span class="string">&quot;M&quot;</span>));</span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(UUID.randomUUID().toString(), <span class="string">&quot;李四6service有事务&quot;</span>, <span class="string">&quot;M&quot;</span>));</span><br><span class="line">        userMapper.save(<span class="keyword">new</span> User(UUID.randomUUID().toString(), <span class="string">&quot;李四7service有事务&quot;</span>, <span class="string">&quot;F&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service调用dao的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ubuntuvim.mybatis.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/2 20:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user t where t.name = #&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存user，id是唯一的，否则insert会报错</span></span><br><span class="line"><span class="comment">     * REQUIRED ：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。==&gt; 会跟随service层方法回滚事务</span></span><br><span class="line"><span class="comment">     * SUPPORTS ：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。==&gt; 会跟随service层方法回滚事务</span></span><br><span class="line"><span class="comment">     * MANDATORY ：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。==&gt; 会跟随service层方法回滚事务</span></span><br><span class="line"><span class="comment">     * REQUIRES_NEW ：创建一个新的事务，如果当前存在事务，则把当前事务挂起。 ==&gt; 即使service层的方法也加了事务，也无法回滚dao层的事务（内层已经提交了，外层回滚个屁啊）。</span></span><br><span class="line"><span class="comment">     * NOT_SUPPORTED ：以非事务方式运行，如果当前存在事务，则把当前事务挂起。 ==&gt;  即使service层的方法也加了事务，也无法回滚dao层的事务（内层已经提交了，外层回滚个屁啊）。</span></span><br><span class="line"><span class="comment">     * NEVER ：以非事务方式运行，如果当前存在事务，则抛出异常。 ==&gt; service层无事务的方法可以运行，也就是说，他只能被一个父事务调用。否则，他就要抛出异常。</span></span><br><span class="line"><span class="comment">     * NESTED ：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 REQUIRED</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class, propagation = Propagation.NESTED)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(id, name, sex) value (#&#123;id&#125;, #&#123;name&#125;, #&#123;sex&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.mybatis.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ubuntuvim.mybatis.MybatisTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* UserServiceImpl Tester. </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> &lt;Authors name&gt; </span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> &lt;pre&gt;9月 8, 2020&lt;/pre&gt; </span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = MybatisTest.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImplTest</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveUsersNoTransition</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        userServiceImpl.saveUsersNoTransition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveUsersHasTransition</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        userServiceImpl.saveUsersHasTransition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveOneNoTransation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userServiceImpl.saveOneNoTransition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveOneHasTransation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userServiceImpl.saveOneHasTransition();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Transactional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类成员属性、静态变量、静态块、普通块、构造方法的加载顺序</title>
      <link href="/2020/08/30/Java/%E6%88%90%E5%91%98%E5%B1%9E%E6%80%A7%E3%80%81%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/"/>
      <url>/2020/08/30/Java/%E6%88%90%E5%91%98%E5%B1%9E%E6%80%A7%E3%80%81%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>类成员属性、静态变量、静态块、普通块、构造方法的加载顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.clazzinit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类初始化时静态语句、静态语句块，普通成员、构造器的加载顺序</span></span><br><span class="line"><span class="comment"> * 1. 执行静态语句或静态块（都是静态语句按照代码顺序执行）</span></span><br><span class="line"><span class="comment"> * 2. 执行构造块代码或者构造语句（没有使用static声明的普通语句块）</span></span><br><span class="line"><span class="comment"> * 3. 执行构造器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如下程序执行结果是：3 4 1 2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/30 下午10:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticBlockMemberLoadingSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通代码块（构造块）</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StaticBlockMemberLoadingSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态语句块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态语句</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">int</span> a = f1();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例化</span></span><br><span class="line">        StaticBlockMemberLoadingSort staticBlockMemberLoadingSort = <span class="keyword">new</span> StaticBlockMemberLoadingSort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 1 2</span><br></pre></td></tr></table></figure><p>一个很典型的面试题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.clazzinit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类初始化时静态语句、静态语句块，普通成员、构造器的加载顺序</span></span><br><span class="line"><span class="comment"> * 1. 执行静态语句或静态块（都是静态语句按照代码顺序执行）</span></span><br><span class="line"><span class="comment"> * 2. 执行构造块代码或者构造语句（没有使用static声明的普通语句块）</span></span><br><span class="line"><span class="comment"> * 3. 执行构造器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如下程序执行结果是：2    3    a=110, b=0  1    4     120</span></span><br><span class="line"><span class="comment"> * 原因如下：</span></span><br><span class="line"><span class="comment"> * 按照前面描述的执行顺序，先执行静态语句（27行）。</span></span><br><span class="line"><span class="comment"> * 这个静态语句比较特殊，它显式的调用了构造器，然后开始执行构造器，但是在执行构造器的时候，根据初始顺序需要先执行构造块，</span></span><br><span class="line"><span class="comment"> * 所以就先执行了35行的构造块代码，就打印了2，此时构造器语句还没执行完，因为在51还有一行构造器语句，执行完a的赋值之后。</span></span><br><span class="line"><span class="comment"> * 才执行构造器，打印3，再打印a=110, b=0。为何b是0，因为还没执行到，目前b只是在内存中分配了但是还没执行初始化所以值还是默认的0。</span></span><br><span class="line"><span class="comment"> * 构造器方法执行完之后，27行静态语句才执行完毕。紧接着执行其他的静态语句。接下来的静态语句是27行的。打印1.</span></span><br><span class="line"><span class="comment"> * 再接下来还有一行静态语句51行，执行b的赋值（此时b才赋值，所以前面打印b是0）至此静态语句执行完毕。</span></span><br><span class="line"><span class="comment"> * 开始执行构造代码块。但是由于前面第一句静态语句已经显式执行过了构造块所以不需要再次执行。到此类初始化完成。</span></span><br><span class="line"><span class="comment"> * 接着就是常规操作，开始执行f1()方法，打印4，</span></span><br><span class="line"><span class="comment"> * 最后执行打印b语句，打印120</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/30 下午10:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticBlockMemberLoadingSort2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态语句</span></span><br><span class="line">    <span class="keyword">static</span> StaticBlockMemberLoadingSort2 staticBlockMemberLoadingSort2 = <span class="keyword">new</span> StaticBlockMemberLoadingSort2();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态语句块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造块语句</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StaticBlockMemberLoadingSort2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a + <span class="string">&quot;, b = &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通成员属性，构造语句</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态语句，静态属性</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例化的方式有4中</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 通过new关键字</span></span><br><span class="line"><span class="comment">        2. 通过Class.forName()反射</span></span><br><span class="line"><span class="comment">        3. 通过类的调用静态方法（本例就是）</span></span><br><span class="line"><span class="comment">        4. 通过类的调用静态属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        StaticBlockMemberLoadingSort2.f1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类已经初始化过了，不会再次初始化，直接打印120</span></span><br><span class="line">        System.out.println(StaticBlockMemberLoadingSort2.b);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2    3    a&#x3D;110, b&#x3D;0  1    4     120</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML类图关系线</title>
      <link href="/2020/08/30/uml/%E7%B1%BB%E5%9B%BE%E5%85%B3%E7%B3%BB%E7%BA%BF/"/>
      <url>/2020/08/30/uml/%E7%B1%BB%E5%9B%BE%E5%85%B3%E7%B3%BB%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="类图关系线"><a href="#类图关系线" class="headerlink" title="类图关系线"></a>类图关系线</h1><h3 id="泛化关系（generalization）"><a href="#泛化关系（generalization）" class="headerlink" title="泛化关系（generalization）"></a>泛化关系（generalization）</h3><p>泛化关系使用带空心箭头的实线表示，比如汽车与SUV就是泛化关系；</p><p><img src="https://oscimg.oschina.net/oscnet/up-2f5c62b047a1a107f71948e25b35425157d.JPEG" alt="泛化关系"></p><blockquote><p>在代码的实现中，泛化关系表现为继承非抽象类。</p></blockquote><h3 id="实现关系（realize）"><a href="#实现关系（realize）" class="headerlink" title="实现关系（realize）"></a>实现关系（realize）</h3><p>实现关系使用空心箭头的虚线表示，比如抽象类和抽象类的实现类关系。</p><p><img src="https://oscimg.oschina.net/oscnet/up-20047ab524f492cba2b1d6e0019838e7ab4.JPEG" alt="实现关系"></p><blockquote><p>在代码的实线中，实现关系表现为继承抽象类（有别与接口的实现）。</p></blockquote><h3 id="聚合关系（aggregation）"><a href="#聚合关系（aggregation）" class="headerlink" title="聚合关系（aggregation）"></a>聚合关系（aggregation）</h3><p>聚合关系使用一条带空心菱形箭头的实线（没有箭头）表示。聚合关系用于表示对象之间的关系，表示整体由部分构成的语义，比如一个部门有多个员工构成。</p><p>与组合关系有所不同的是，整合和部分不是强依赖，即使整体不存在了，部分仍然存在，比如一个部门撤销了，员工不会消失。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a0c81c84710766cc94a15809e51894ecbb5.JPEG" alt="聚合关系"></p><h3 id="组合关系（composition）"><a href="#组合关系（composition）" class="headerlink" title="组合关系（composition）"></a>组合关系（composition）</h3><p>组合关系使用一条实心菱形的实线（没有箭头）表示。与聚合关系一样，组合关系同样用来表示对象之间的关系，但是对象之间是强依赖的。如果整体不存在了那么部分也就不存在。比如公司不存在了那么公司里面的部门也就不存在了。</p><p><img src="https://oscimg.oschina.net/oscnet/up-36c473f94be51d7216e9337e98aa1b58c04.JPEG" alt="组合关系"></p><h3 id="关联关系（association）"><a href="#关联关系（association）" class="headerlink" title="关联关系（association）"></a>关联关系（association）</h3><p>关联关系使用一条带方向箭头的实线表示。它描述了不同类对象之间的关系，它是一种静态的关系，通常与运行状态无关，由一般常识等因素决定。关联关系是一种强依赖。</p><p>关联关系如果不强调方向（无指向），表对象相互知道（类相互引用）。如果强调方向需要带箭头，比如下图，A指向B，表示A依赖B，A知道B，但是B不依赖A，B不知道A。代码中非常常见，代码表现是B是A的一个成员属性（变量）。</p><p><img src="https://oscimg.oschina.net/oscnet/up-780dd5177fb080956943b3566252bf6de2b.JPEG" alt="关联关系"></p><blockquote><p>在代码中，关联关系通常是以成员变量的形式实现。</p></blockquote><h3 id="依赖关系（dependency）"><a href="#依赖关系（dependency）" class="headerlink" title="依赖关系（dependency）"></a>依赖关系（dependency）</h3><p>依赖关系是用一条带箭头 的虚线表示。它描述一个对象在运行期间会用到另外一个对象，比如方法的参数。</p><p>与关联关系不同的是，它是一种临时的关系，通常在运行期间产生，并且随着运行时的变化而变化（比如方法的参数是接口，会根据传不同的实现而变化），同时依赖关系也会发生变化。比如传的参数是实现类A变成实现类B。依赖关系由A类变成B类。</p><p>显然，依赖也是有双向的，双向依赖是一种非常糟糕的设计，我们总是应该保持单向依赖，杜绝双向依赖（比如类的循环依赖）。</p><p><img src="https://oscimg.oschina.net/oscnet/up-3bb64cf6806a0bc21998c0aa170b99f1a22.JPEG" alt="依赖关系"></p><blockquote><p>在代码实现中，依赖关系体现为类构造方法的以及普通的方法的传入参数，箭头的指向为调用关系（图中A的方法调用了B），依赖关系除了临时知道对方外，还是“使用”对方的方法和属性。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> UML </tag>
            
            <tag> 类图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EvoSuite--自动生成单元测试工具</title>
      <link href="/2020/08/02/Java/EvoSuite--%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/08/02/Java/EvoSuite--%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.evosuite.org/">EvoSuite</a>是一个非常强大的自动化生成单元测试用例的工具，并且是免费的。提供了IDE插件，可以直接继承到Idea或者是Eclipse上。通过一个菜单就可以生成类对应的但愿测试用例。非常方便，可以极大提高开发的测试用例编写效率。</p><p>生成命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;opt&#x2F;apache-maven-3.6.1-mavenrep&#x2F;bin&#x2F;mvn  compile  evosuite:generate  -Dcores&#x3D;1  -DmemoryInMB&#x3D;1024  -DtimeInMinutesPerClass&#x3D;2  -DspawnManagerPort&#x3D;65021  -Dcuts&#x3D;com.ubuntuvim.springcloud.controller.PaymentController  evosuite:export  -DtargetFolder&#x3D;src&#x2F;test&#x2F;java  </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FactoryBean接口深入理解</title>
      <link href="/2020/07/26/Spring/FactoryBean%E6%8E%A5%E5%8F%A3%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
      <url>/2020/07/26/Spring/FactoryBean%E6%8E%A5%E5%8F%A3%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>Spring提供的FactoryBean接口是一个非常强大而且常用的扩展，可以通过实现接口的<code>getObject()</code>方法往Spring容器中注册bean。<br>但是这个接口有一些特殊，我们通过这个接口的实现类获取到并不是实现类本身而是<code>getObject()</code>方法返回的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.fb;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/26 22:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    String type;</span><br><span class="line">    String color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个简单的对象，通过<code>FactoryBean</code>接口往容器注入不同类型的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.fb;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过xml设置不同的Car，并且属性不同</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/26 22:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Car</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过XML配置注入值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String color;</span><br><span class="line">    String type;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car(type,color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Car.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回单例Car</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过xml定义不同的Car实例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ubuntuvim.spring.fb&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    FactoryBean实例返回的实际是getObject()方法返回的对象。</span></span><br><span class="line"><span class="comment">    所以并不是拿到一个CarFactoryBean的实例，而是拿到一个Car实例</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;bmw&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ubuntuvim.spring.fb.CarFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bmw&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;benz&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ubuntuvim.spring.fb.CarFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;benz&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;testRefrenceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ubuntuvim.spring.fb.RefrenceBean&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在另外一个类中通过<code>@Resource</code>注入到属性上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.fb;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/26 22:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCar</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入的是一个Car实例，而不是CarFactoryBean实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;bmw&quot;)</span></span><br><span class="line">    Car bmw;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(bmw <span class="keyword">instanceof</span> Car);</span><br><span class="line">        System.out.println(bmw);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证获取到的类型是否Car还是CarFactoryBean的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.fb;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/26 22:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line">        Car bmw = (Car) ac.getBean(<span class="string">&quot;bmw&quot;</span>);</span><br><span class="line">        System.out.println(bmw);</span><br><span class="line"></span><br><span class="line">        Car benz = (Car) ac.getBean(<span class="string">&quot;benz&quot;</span>);</span><br><span class="line">        System.out.println(benz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证注入的对象是什么？</span></span><br><span class="line">        MyCar myCar = ac.getBean(MyCar.class);</span><br><span class="line">        myCar.myCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Car(type&#x3D;bmw, color&#x3D;black)</span><br><span class="line">Car(type&#x3D;benz, color&#x3D;black)</span><br><span class="line">true</span><br><span class="line">Car(type&#x3D;bmw, color&#x3D;black)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>懒加载的几个疑问？？</title>
      <link href="/2020/07/17/Spring/Spring%E6%87%92%E5%8A%A0%E8%BD%BD%E9%AA%8C%E8%AF%81/"/>
      <url>/2020/07/17/Spring/Spring%E6%87%92%E5%8A%A0%E8%BD%BD%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="懒加载的几个疑问？？"><a href="#懒加载的几个疑问？？" class="headerlink" title="懒加载的几个疑问？？"></a>懒加载的几个疑问？？</h2><p>说明:<br>本篇是基于Spring5.x版本做的演示。不同的版本可能效果不一样，比如@Lazy注解在3.1版本是不支持在属性、构造方法、参数上使用的。</p><ul><li><p>对于使用了@Component注解的类如何统一做延迟加载，是否可以通过Bean定义的后置处理器<code>BeanDefinitionRegistryPostProcessor</code>做统一设置？</p><blockquote><p>答案是做不到，<code>BeanDefinitionRegistryPostProcessor</code>并未提供便利bean定义的方法，即使有也不好控制那些bean设置成懒加载</p></blockquote></li><li><p>BeanB依赖BeanA，当BeanB还未使用的时候BeanA是否会被加载？</p><blockquote><p>答案是BeanA会被加载，因为BeanB在设置属性的时候需要先加载BeanA。所以即使BeanB还未被使用BeanA也会被加载。</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/17 20:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanOne</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n\nbeanFactory开始加载BeanOne&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHelloBeanOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用BeanOne的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/17 20:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanTwo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;开始加载BeanTwo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    BeanOne beanOne;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeBeanOneMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在BeanTwo里面调用BeanOne的方法&quot;</span>);</span><br><span class="line">        beanOne.sayHelloBeanOne();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/17 20:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.ubuntuvim.spring.lazyloading&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanLoadingConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.lazyloading;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/17 20:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyLoadingTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(BeanLoadingConfig.class);</span><br><span class="line">        BeanTwo beanTwo = (BeanTwo) ac.getBean(<span class="string">&quot;beanTwo&quot;</span>);</span><br><span class="line">        <span class="comment">// 未调beanTwo 的方法之后，不应该加载BeanOne。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;未调beanTwo 的方法之后，不应该加载BeanOne（但事与愿违）&quot;</span>);</span><br><span class="line">        beanTwo.invokeBeanOneMethod();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        执行结果：</span></span><br><span class="line"><span class="comment">            开始加载BeanTwo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            beanFactory开始加载BeanOne  ---- 因为BeanTwo里面引用了BeanOne，所以BeanOne在BeanTwo加载的时候也被加载了，不然无法初始化属性。</span></span><br><span class="line"><span class="comment">            未调beanTwo 的方法之后，不应该加载BeanOne</span></span><br><span class="line"><span class="comment">            在BeanTwo里面调用BeanOne的方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只使用BeanOne时，BeanTwo不会被加载</span></span><br><span class="line">        BeanOne beanOne = (BeanOne) ac.getBean(<span class="string">&quot;beanOne&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        执行结果：</span></span><br><span class="line"><span class="comment">            beanFactory开始加载BeanOne</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>对于实现了Spring初始化方法的bean，设置<code>lazy-init</code>属性为<code>true</code>是否能起到延迟加载的效果？？</li></ul><blockquote><p>实现了<code>InitializingBean</code>的bean本身使用了<code>@Lazy</code>注解是可以延迟加载的。但是如果是父类实现了<code>InitializingBean</code>的方法，但是没有使用<code>@Lazy</code>注解，而是在子类中使用了<code>@Lazy</code>注解，那么父类的spring初始化方法是会被执行的，<code>@Lazy</code>注解只是对当前类起效果，并不能控制父类的懒加载。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/17 21:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInitializingBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现了InitializingBean的afterPropertiesSet()方法被调用了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 未使用<span class="doctag">@Lazy</span>注解，但是子类使用<span class="doctag">@Lazy</span>注解，是否可以实现延迟加载呢？答案是不行，<span class="doctag">@Lazy</span>只对当前类起效果。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/17 21:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInitializingBeanNoLazy</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInitializingBeanNoLazy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInitializingBeanNoLazy被加载了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===== MyInitializingBeanNoLazy的afterPropertiesSet()方法被调用了 =====&quot;</span>);</span><br><span class="line">        <span class="comment">// 即使子类使用了@Lazy注解父类的afterPropertiesSet方法也会被调用的。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本类使用了延迟加载注解，并不能对父类的加载起作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/17 21:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInitializingBeanSubClass</span> <span class="keyword">extends</span> <span class="title">MyInitializingBeanNoLazy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInitializingBeanSubClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInitializingBeanNoLazy的子类使用@Lazy注解，子类被加载了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行效果，MyInitializingBeanNoLazy一开始就被加载了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MyInitializingBeanNoLazy被加载了</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; MyInitializingBeanNoLazy的afterPropertiesSet()方法被调用了 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">开始加载BeanTwo未调beanTwo 的方法之后，不应该加载BeanOne（但事与愿违）</span><br><span class="line">在BeanTwo里面调用BeanOne的方法</span><br><span class="line">beanFactory开始加载BeanOne</span><br><span class="line">调用BeanOne的方法</span><br><span class="line">在未使用MyInitializingBean之前，如果bean使用了@Lazy注解，即使这个bean实现了InitializingBean的接口也不会被加载</span><br><span class="line">实现了InitializingBean的afterPropertiesSet()方法被调用了</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 9s</span><br><span class="line">80 actionable tasks: 2 executed, 78 up-to-date</span><br><span class="line">21:42:01: Task execution finished &#39;LazyLoadingTest.main()&#39;.</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>使用XML方式定义使用Spring初始化方法的类是否可以实现懒加载？？</li></ul><p>定义一个实现了Spring初始化方法的Bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 未使用<span class="doctag">@Lazy</span>注解，但是子类使用<span class="doctag">@Lazy</span>注解，是否可以实现延迟加载呢？答案是不行，<span class="doctag">@Lazy</span>只对当前类起效果。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * xml方式定义bean可以实现懒加载，因为不是继承方式，这种方式就是别名的方式，MyInitializingBeanSubClassUseLazy instanceOf MyInitializingBeanNoLazy =&gt; true</span></span><br><span class="line"><span class="comment"> * &lt;bean name=&quot;myInitializingBeanSubClassUseLazy&quot; class=&quot;com.ubuntuvim.spring.lazyloading.MyInitializingBeanNoLazy&quot; lazy-init=&quot;true&quot;&gt;</span></span><br><span class="line"><span class="comment"> * &lt;property name=&quot;name&quot; value=&quot;使用了Lazy-init=true，父类的afterPropertiesSet方法也会被调用&quot; /&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 但是，当另外一个类BeanA里面引用了myInitializingBeanSubClassUseLazy，也不能实现懒加载，因为BeanA在设置属性的时候会先初始化myInitializingBeanSubClassUseLazy。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/17 21:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInitializingBeanNoLazy</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInitializingBeanNoLazy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName() + <span class="string">&quot;被加载了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===== MyInitializingBeanNoLazy的afterPropertiesSet()方法被调用了 =====&quot;</span>);</span><br><span class="line">        <span class="comment">// 即使子类使用了@Lazy注解父类的afterPropertiesSet方法也会被调用的。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name的值是：&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过xml注入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ubuntuvim.spring.lazyloading&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用了lazy-init可以做到懒加载类本身懒加载，就相当于在com.ubuntuvim.spring.lazyloading.MyInitializingBeanNoLazy上使用@Lazy注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;myInitializingBeanSubClassUseLazy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ubuntuvim.spring.lazyloading.MyInitializingBeanNoLazy&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;使用了Lazy-init=true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用了lazy-init可以做到懒加载类本身懒加载，就相当于在com.ubuntuvim.spring.lazyloading.MyInitializingBeanNoLazy上使用@Lazy注解</span></span><br><span class="line"><span class="comment">     但是如果有另外一个类引用了myInitializingBeanSubClassUseLazyByOtherRef，那么即使引用的类设置了懒加载，myInitializingBeanSubClassUseLazyByOtherRef也会被加载</span></span><br><span class="line"><span class="comment">     因为引用类在初始化设置属性的时候会先初始化依赖的属性。</span></span><br><span class="line"><span class="comment">     有一种方式可以做到懒加载，就是在引用的属性上同时使用@Lazy注解。</span></span><br><span class="line"><span class="comment">     @Resource</span></span><br><span class="line"><span class="comment">     @Lazy</span></span><br><span class="line"><span class="comment">     MyInitializingBeanNoLazy myInitializingBeanSubClassUseLazyByOtherRef;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;myInitializingBeanSubClassUseLazyByOtherRef&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ubuntuvim.spring.lazyloading.MyInitializingBeanNoLazy&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;使用了Lazy-init=true，但是被另外的类引用了。也会被加载。如果在引用的属性上使用了@Lazy注解，那么也可以实现懒加载！&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;myInitializingBeanSubClassNotUseLazy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ubuntuvim.spring.lazyloading.MyInitializingBeanNoLazy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;未使用lazy-init=false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>验证结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.lazyloading;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/17 22:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyLoadingXmlContextTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;classpath*:lazy-loading-test.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 容器加载，MyInitializingBeanSubClassUseLazy和MyInitializingBeanSubClassNotUseLazy都交给容器管理。</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        执行结果可见，afterPropertiesSet()方法被调用了。</span></span><br><span class="line"><span class="comment">        MyInitializingBeanNoLazy被加载了，name =</span></span><br><span class="line"><span class="comment">        ===== MyInitializingBeanNoLazy的afterPropertiesSet()方法被调用了 =====</span></span><br><span class="line"><span class="comment">        name的值是：未使用lazy-init=true</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//        MyInitializingBeanNoLazy myInitializingBeanNoLazy = (MyInitializingBeanNoLazy) ac.getBean(&quot;myInitializingBeanSubClassUseLazy&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(myInitializingBeanNoLazy instanceof MyInitializingBeanNoLazy);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 即使没用使用BeanRef，但是由于在类中引用了myInitializingBeanSubClassUseLazyByOtherRef，</span></span><br><span class="line">        <span class="comment">// 即使myInitializingBeanSubClassUseLazyByOtherRef定义成lazy-init=true也会被加载。</span></span><br><span class="line">        BeanRef beanRef = (BeanRef) ac.getBean(<span class="string">&quot;beanRef&quot;</span>);</span><br><span class="line">        <span class="comment">// 在没用使用到myInitializingBeanSubClassUseLazyByOtherRef属性之前，不会加载这个属性类。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n\n没有使用到BeanRef中引用的属性，属性类不会被加载&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用myInitializingBeanSubClassUseLazyByOtherRef</span></span><br><span class="line">        beanRef.useProp();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        执行结果：</span></span><br><span class="line"><span class="comment">        开始使用属性myInitializingBeanSubClassUseLazyByOtherRef</span></span><br><span class="line"><span class="comment">        MyInitializingBeanNoLazy被加载了sun.misc.Launcher$AppClassLoader@2a139a55    --&gt; 属性类被加载</span></span><br><span class="line"><span class="comment">        ===== MyInitializingBeanNoLazy的afterPropertiesSet()方法被调用了 =====        --&gt; 属性类的初始化方法被调用</span></span><br><span class="line"><span class="comment">        name的值是：使用了Lazy-init=true，但是被另外的类引用了。也会被加载。                    --&gt; BeanRef本身被加载</span></span><br><span class="line"><span class="comment">        使用属性并调用其方法完毕                                                        --&gt; 调用BeanRef方法，触发加载</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果引用的类属性上也使用了<code>@Lazy</code>注解，那么被引用的类也是可以实现懒加载的，即使是被引用的类实现了Spring的初始化方法也可以实现。比如例子中的<code>BeanRef</code>这个类，在类中引用的属性上也使用了<code>@Lazy</code>注解，可以实现懒加载。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line">MyInitializingBeanNoLazy myInitializingBeanSubClassUseLazyByOtherRef;</span><br></pre></td></tr></table></figure><ul><li>使用XML方式定义使用Spring初始化方法的类<code>InitializingBean</code>，并且类实现了<code>FactoryBean</code>接口是否可以实现懒加载？？</li></ul><blockquote><p> 答案是做不到，由于在afterPropertiesSet方法中调用了工厂bean的生成方法，使得当前类必须被实例化，否则无法实现工厂bean功能无法创建有工厂bean创建的对象。无论getObject方法做什么操作本类都会被实例化。<br>即使在类上使用@Lazy注解，在getObject方法上使用@Lazy注解，在afterPropertiesSet方法上使用@Lazy注解都是无效的。<br>因为FactoryBean是用于向容器注册bean的，它自己必须先实例化了才能执行getObject，才能向容器注册bean。<br>简单讲，只要是实现了FactoryBean的类都无法做到懒加载。<br>需要注意的是通过FactoryBean.getObject()方法创建的bean不会在容器启动的时候就实例化。当创建的bean用到的时候才实例化，也就是说同FactoryBean.getObject()方法创建的bean默认是懒加载的,但是一个同时实现了InitializingBean, FactoryBean这两个接口，并且在afterPropertiesSet方法里再调用了getObject()方法就可以做到在容器启动的时候就做初始化，因为实现FactoryBean接口的类会在容器启动的时候实例化，由于被实例化了所以afterPropertiesSet方法就会被容器自动调用。<br>组合起来就实现了实时加载。</p></blockquote><p>例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.spring.lazyloading;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同时实现了Bean初始化方法和FactoryBean方法的类，是否可以做到懒加载？？</span></span><br><span class="line"><span class="comment"> * 答案是做不到，由于在afterPropertiesSet方法中调用了工厂bean的生成方法，使得当前类必须被实例化，否则无法实现工厂bean功能无法创建有工厂bean创建的对象。</span></span><br><span class="line"><span class="comment"> * 无论getObject方法做什么操作本类都会被实例化。</span></span><br><span class="line"><span class="comment"> * 即使在类上使用<span class="doctag">@Lazy</span>注解，在getObject方法上使用<span class="doctag">@Lazy</span>注解，在afterPropertiesSet方法上使用<span class="doctag">@Lazy</span>注解都是无效的。</span></span><br><span class="line"><span class="comment"> * 因为FactoryBean是用于向容器注册bean的，它自己必须先实例化了才能执行getObject，才能向容器注册bean。</span></span><br><span class="line"><span class="comment"> * 简单讲，只要是实现了FactoryBean的类都无法做到懒加载。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 需要注意的是通过FactoryBean.getObject()方法创建的bean不会在容器启动的时候就实例化。当创建的bean用到的时候才实例化，</span></span><br><span class="line"><span class="comment"> * 也就是说同FactoryBean.getObject()方法创建的bean默认是懒加载的</span></span><br><span class="line"><span class="comment"> * 但是一个同时实现了InitializingBean, FactoryBean这两个接口，并且在afterPropertiesSet方法里再调用了getObject()方法</span></span><br><span class="line"><span class="comment"> * 就可以做到在容器启动的时候就做初始化，因为实现FactoryBean接口的类会在容器启动的时候实例化，由于被实例化了所以afterPropertiesSet方法就会被容器自动调用。</span></span><br><span class="line"><span class="comment"> * 组合起来就实现了实时加载。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/7/17 23:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Lazy  // 无效</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInitializingBeanNoLazyAndBeanFactoryImpl</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">FactoryBean</span>&lt;<span class="title">InitFromGetObjectMethodBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInitializingBeanNoLazyAndBeanFactoryImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName() + <span class="string">&quot;被加载了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    @Lazy  // 无效</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName() + <span class="string">&quot; afterPropertiesSet()方法被调用了 =====&quot;</span>);</span><br><span class="line">        <span class="comment">// 即使子类使用了@Lazy注解父类的afterPropertiesSet方法也会被调用的。</span></span><br><span class="line">        <span class="comment">// 但是如果本类被另外一个类引用了，但是在引用的属性上也使用了@Lazy注解，那么本类可是懒加载</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name的值是：&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        getObject();  <span class="comment">// 即使不调用getObject方法也做不到懒加载，容器在启动的时候就会实例化当前类</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过xml注入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无论这个方法做什么操作都会在容器启动的时候初始化，无法做到延迟加载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Lazy  // 无效</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InitFromGetObjectMethodBean <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName() + <span class="string">&quot;的getObject方法被调用&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InitFromGetObjectMethodBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> InitFromGetObjectMethodBean.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ubuntuvim.spring.lazyloading&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    在没有使用过bean之前，通过FactoryBean.getObject创建的bean不会直接在容器启动的时候实例化。比如InitBeanFromGetObject2不会在容器启动的时候实例化。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;myInitializingBeanNoLazyAndBeanFactoryImplByOtherRef&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ubuntuvim.spring.lazyloading.MyInitializingBeanNoLazyAndBeanFactoryImpl&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;我是一个同时实现了Bean初始化方法和FactoryBean方法的类，我即使被定义为lazy-init=true也会在启动时被实例化。</span></span></span><br><span class="line"><span class="tag"><span class="string">        因为FactoryBean实现类必须先被实例化才能调用getObject方法向容器注册bean&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>即使没有测试类中调用这个类，容器启动时也会加载，验证结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">使用属性并调用其方法完毕</span><br><span class="line"></span><br><span class="line">在未使用InitFromGetObjectMethodBean之前，这个InitFromGetObjectMethodBean类不会在容器启动的时候实例化</span><br><span class="line">com.ubuntuvim.spring.lazyloading.MyInitializingBeanNoLazyAndBeanFactoryImpl afterPropertiesSet()方法被调用了 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">name的值是：我是一个同时实现了Bean初始化方法和FactoryBean方法的类，我即使被定义为lazy-init&#x3D;true也会在启动时被实例化。   因为FactoryBean实现类必须先被实例化才能调用getObject方法向容器注册bean</span><br><span class="line"></span><br><span class="line">com.ubuntuvim.spring.lazyloading.MyInitializingBeanNoLazyAndBeanFactoryImpl的getObject方法被调用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">com.ubuntuvim.spring.lazyloading.InitFromGetObjectMethodBean这个bean是通过FactoryBean.getObject方法创建的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">com.ubuntuvim.spring.lazyloading.MyInitializingBeanNoLazyAndBeanFactoryImpl的getObject方法被调用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">com.ubuntuvim.spring.lazyloading.InitFromGetObjectMethodBean这个bean是通过FactoryBean.getObject方法创建的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">com.ubuntuvim.spring.lazyloading.InitFromGetObjectMethodBean@64cd705f</span><br><span class="line">执行完毕</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 20s</span><br><span class="line">80 actionable tasks: 1 executed, 79 up-to-date</span><br><span class="line">02:53:15: Task execution finished &#39;LazyLoadingXmlContextTest.main()&#39;.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按照XML的配置顺序，这个类在最后面被加载了。</p><p>更深入的原因我们从Spring源码层级分析。按照如下流程找到方法，</p><pre class="mermaid">graph TD;    ClassPathXmlApplicationContext --> AbstractApplicationContext.refresh;    AbstractApplicationContext.refresh --> finishBeanFactoryInitialization方法;    finishBeanFactoryInitialization方法 --> beanFactory.preInstantiateSingletons方法;    beanFactory.preInstantiateSingletons方法 --> DefaultListableBeanFactory.preInstantiateSingletons方法;</pre><p>DefaultListableBeanFactory.preInstantiateSingletons方法是最后的核心方法。这个方法内部实例化了实现FactoryBean的类并调用getObject方法向容器注册bean，并且这个方法只有非懒加载的bean能进入到这里。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化所有除了Spring内部的单例（懒加载的除外）</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Pre-instantiating singletons in &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span><br><span class="line">    <span class="comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span><br><span class="line">    <span class="comment">// 创建BeanDefinitionName副本，用于后续遍历，以允许init等方法注册新的bean定义</span></span><br><span class="line">    List&lt;String&gt; beanNames = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line">    <span class="comment">// 遍历所有的beanName，通过beanName获取到对应的bean实例</span></span><br><span class="line">    <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">        <span class="comment">// 根据bean名称拿到bean定义</span></span><br><span class="line">        RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">        <span class="comment">// bean定义非抽象类，是单例，非懒加载</span></span><br><span class="line">        <span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">            <span class="comment">// 判断是否是FactoryBean</span></span><br><span class="line">            <span class="comment">// Spring有两种类型的Bean，一种普通Bean，一种是工厂Bean即FactoryBean，FactoryBean和普通Bean不同，</span></span><br><span class="line">            <span class="comment">// 它返回的对象不是一个指定类型的对象，而是根据FactoryBean&lt;T&gt;.geteObject()返回对象，返回的对象就是T类型的，</span></span><br><span class="line">            <span class="comment">// 创建出来的对象是否为单例是根据Bean定义中的isSingleton属性决定的（默认是单例）</span></span><br><span class="line">            <span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">                <span class="comment">// 通过getBean(&amp;beanName)拿到是FactoryBean本身，FACTORY_BEAN_PREFIX=&amp;</span></span><br><span class="line">                <span class="comment">// 通过getBean(beanName)拿到的是FactoryBean创建的bean实例</span></span><br><span class="line">                <span class="comment">// 比如  MyInitializingBeanNoLazyAndBeanFactoryImpl implements FactoryBean&lt;Object&gt;</span></span><br><span class="line">                <span class="comment">// 拿到的就是myInitializingBeanNoLazyAndBeanFactoryImpl这个bean实例。</span></span><br><span class="line">                Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">                <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> FactoryBean) &#123;</span><br><span class="line">                    <span class="keyword">final</span> FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;</span><br><span class="line">                    <span class="comment">// 判断bean是否需要急切初始化，实现了FactoryBean的类isEagerInit都是false，</span></span><br><span class="line">                    <span class="comment">// 只有SmartFactoryBean的实现类可以控制这个属性值，但是这个接口是提供给Spring框架本身内部使用的不建议开发者使用</span></span><br><span class="line">                    <span class="keyword">boolean</span> isEagerInit;</span><br><span class="line">                    <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">                        isEagerInit = AccessController.doPrivileged((PrivilegedAction&lt;Boolean&gt;)</span><br><span class="line">                                        ((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,</span><br><span class="line">                                getAccessControlContext());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">                                ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">                        <span class="comment">// 通过beanName获取bean实例</span></span><br><span class="line">                        getBean(beanName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 普通的bean直接通过beanName获取bean实例</span></span><br><span class="line">                getBean(beanName);  <span class="comment">// 转到AbstractBeanFactory</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  方面后面的代码省略。。。。</span></span><br></pre></td></tr></table></figure><p>经过上述代码之后， MyInitializingBeanNoLazyAndBeanFactoryImpl就被实例化好了。但是也只是FactoryBean实现类本身被实例化了，还没真正调用getObject方法注册bean，只有在使用到被注册的bean的时候才会执行getObject方法，也就是说通过FactoryBean.getObject()方法创建的bean默认是懒加载的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Framework5.x</title>
      <link href="/2020/05/04/Spring/Spring%20Framework/"/>
      <url>/2020/05/04/Spring/Spring%20Framework/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Framework5-x"><a href="#Spring-Framework5-x" class="headerlink" title="Spring Framework5.x"></a>Spring Framework5.x</h1><h2 id="BeanDefinition对象"><a href="#BeanDefinition对象" class="headerlink" title="BeanDefinition对象"></a>BeanDefinition对象</h2><p>Bean定义主要对象包括如下几个属性：</p><table><thead><tr><th>Property</th><th align="right">描述</th></tr></thead><tbody><tr><td>Class</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-class">bean实例</a></td></tr><tr><td>Name</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-beanname">Bean名称</a></td></tr><tr><td>Scope</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes">Bean类型（单例、原型..)</a></td></tr><tr><td>构造函数参数</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-collaborators">Dependency Injection</a></td></tr><tr><td>Properties</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-collaborators">Dependency Injection</a></td></tr><tr><td>Autowirging mode</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-autowire">自动注入模型</a></td></tr><tr><td>Lazy initizlization</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-lazy-init">懒加载模型</a></td></tr><tr><td>Iniitialization method</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-lifecycle-initializingbean">初始化方法</a></td></tr><tr><td>Destruction method</td><td align="right"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-lifecycle-disposablebean">销毁方法</a></td></tr></tbody></table><p>bean定义所有属性大概有上百个。就以最常用的<code>RootBeanDefinition</code>为例，这个类是bean定义最核心的实现类。类中定义非常多属性，这些属性都是bean的定义信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Map with String keys and Object values. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; attributes = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Object source;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant for the default scope name: &#123;<span class="doctag">@code</span> &quot;&quot;&#125;, equivalent to singleton</span></span><br><span class="line"><span class="comment">     * status unless overridden from a parent bean definition (if applicable).</span></span><br><span class="line"><span class="comment">     * 默认bean作用域</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCOPE_DEFAULT = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates no external autowiring at all.</span></span><br><span class="line"><span class="comment">     * 自动注入模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setAutowireMode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUTOWIRE_NO = AutowireCapableBeanFactory.AUTOWIRE_NO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates autowiring bean properties by name.</span></span><br><span class="line"><span class="comment">     * 自动注入通过bean名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setAutowireMode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUTOWIRE_BY_NAME = AutowireCapableBeanFactory.AUTOWIRE_BY_NAME;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates autowiring bean properties by type.</span></span><br><span class="line"><span class="comment">     * 自动注入通过bean类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setAutowireMode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUTOWIRE_BY_TYPE = AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates autowiring a constructor.</span></span><br><span class="line"><span class="comment">     * 自动注入通过构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setAutowireMode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUTOWIRE_CONSTRUCTOR = AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates determining an appropriate autowire strategy</span></span><br><span class="line"><span class="comment">     * through introspection of the bean class.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setAutowireMode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> as of Spring 3.0: If you are using mixed autowiring strategies,</span></span><br><span class="line"><span class="comment">     * use annotation-based autowiring for clearer demarcation of autowiring needs.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUTOWIRE_AUTODETECT = AutowireCapableBeanFactory.AUTOWIRE_AUTODETECT;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates no dependency check at all.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setDependencyCheck</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEPENDENCY_CHECK_NONE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates dependency checking for object references.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setDependencyCheck</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEPENDENCY_CHECK_OBJECTS = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates dependency checking for &quot;simple&quot; properties.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setDependencyCheck</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.springframework.beans.BeanUtils#isSimpleProperty</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEPENDENCY_CHECK_SIMPLE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates dependency checking for all properties</span></span><br><span class="line"><span class="comment">     * (object references as well as &quot;simple&quot; properties).</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setDependencyCheck</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEPENDENCY_CHECK_ALL = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant that indicates the container should attempt to infer the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #setDestroyMethodName destroy method name&#125; for a bean as opposed to</span></span><br><span class="line"><span class="comment">     * explicit specification of a method name. The value &#123;<span class="doctag">@value</span>&#125; is specifically</span></span><br><span class="line"><span class="comment">     * designed to include characters otherwise illegal in a method name, ensuring</span></span><br><span class="line"><span class="comment">     * no possibility of collisions with legitimately named methods having the same</span></span><br><span class="line"><span class="comment">     * name.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Currently, the method names detected during destroy method inference</span></span><br><span class="line"><span class="comment">     * are &quot;close&quot; and &quot;shutdown&quot;, if present on the specific bean class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INFER_METHOD = <span class="string">&quot;(inferred)&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> Object beanClass;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String scope = SCOPE_DEFAULT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> abstractFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Boolean lazyInit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> autowireMode = AUTOWIRE_NO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> dependencyCheck = DEPENDENCY_CHECK_NONE;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String[] dependsOn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> autowireCandidate = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> primary = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, AutowireCandidateQualifier&gt; qualifiers = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Supplier&lt;?&gt; instanceSupplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> nonPublicAccessAllowed = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> lenientConstructorResolution = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String factoryBeanName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String factoryMethodName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> ConstructorArgumentValues constructorArgumentValues;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> MutablePropertyValues propertyValues;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MethodOverrides methodOverrides = <span class="keyword">new</span> MethodOverrides();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String initMethodName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String destroyMethodName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> enforceInitMethod = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> enforceDestroyMethod = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> synthetic = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> role = BeanDefinition.ROLE_APPLICATION;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Resource resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> BeanDefinitionHolder decoratedDefinition;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> AnnotatedElement qualifiedElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Determines if the definition needs to be re-merged. */</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> stale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> allowCaching = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isFactoryMethodUnique = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">volatile</span> ResolvableType targetType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field for caching the determined Class of a given bean definition. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">volatile</span> Class&lt;?&gt; resolvedTargetType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field for caching if the bean is a factory bean. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">volatile</span> Boolean isFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field for caching the return type of a generically typed factory method. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">volatile</span> ResolvableType factoryMethodReturnType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field for caching a unique factory method candidate for introspection. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">volatile</span> Method factoryMethodToIntrospect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Common lock for the four constructor fields below. */</span></span><br><span class="line"><span class="keyword">final</span> Object constructorArgumentLock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field for caching the resolved constructor or factory method. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">Executable resolvedConstructorOrFactoryMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field that marks the constructor arguments as resolved. */</span></span><br><span class="line"><span class="keyword">boolean</span> constructorArgumentsResolved = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field for caching fully resolved constructor arguments. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">Object[] resolvedConstructorArguments;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field for caching partly prepared constructor arguments. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">Object[] preparedConstructorArguments;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Common lock for the two post-processing fields below. */</span></span><br><span class="line"><span class="keyword">final</span> Object postProcessingLock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field that indicates MergedBeanDefinitionPostProcessor having been applied. */</span></span><br><span class="line"><span class="keyword">boolean</span> postProcessed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Package-visible field that indicates a before-instantiation post-processor having kicked in. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">volatile</span> Boolean beforeInstantiationResolved;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Member&gt; externallyManagedConfigMembers;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; externallyManagedInitMethods;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; externallyManagedDestroyMethods;</span><br></pre></td></tr></table></figure><h2 id="Spring-IoC体系结构"><a href="#Spring-IoC体系结构" class="headerlink" title="Spring IoC体系结构"></a>Spring IoC体系结构</h2><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>Spring Bean的创建是典型的工厂模式，这一系列的Bean工厂也就是IoC容器为开发者管理对象间的依赖关系提供了很多的便利和基础服务，在Spring中有许多的实现提供用户选择和使用。最核心的类结构如下：</p><pre class="mermaid">graph BTListableBeanFactory --> BeanFactoryConfigurableListableBeanFactory --> ListableBeanFactoryDefaultListableBeanFactory -.-> ConfigurableListableBeanFactoryHierarchicalBeanFactory --> BeanFactoryConfigurableBeanFactory --> HierarchicalBeanFactoryConfigurableListableBeanFactory --> ConfigurableBeanFactoryAutowireCapableBeanFactory --> BeanFactoryConfigurableListableBeanFactory --> AutowireCapableBeanFactoryAbstractAutowireCapableBeanFactory -.-> ConfigurableBeanFactoryDefaultListableBeanFactory --> AbstractAutowireCapableBeanFactory</pre><p>其中<code>BeanFactory</code>作为顶层的接口，它定义了IoC容器的基本功能实现，比如<code>getBean()</code>方法就是这个接口定义的。<br>它有三个子类（或者是实现类），它们是：<code>ListableBeanFactory</code>、<code>HierarchicalBeanFactory</code>和<code>AutowireCapableBeanFactory</code>。但是从上图可以看到最终的默认实现类是<code>DefaultListableBeanFactory</code>。它实现了所有的接口，这样做的目的是什么呢？<br>查阅相关的资料可以发现，这些几个接口的实现都是有特定的使用场景的，它们主要是在Spring内部操作对象的传递和转换的过程中，对对象的数据访问所做的限制。比如<code>ListableBeanFactory</code>接口表示这些bean是可列表的；<code>HierarchicalBeanFactory</code>表示这些bean是有继承关系的，也就是说这些bean是可能有父类bean；<code>AutowireCapableBeanFactory</code>接口定义了bean的自动装配规则。这四个接口共同定义了Bean的集合，Bean之间的关系，Bean的行为，从而组成了IoC容器的基本结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对FactoryBean的转义定义，如果使用beanName获取到的是FactoryBean接口中getObject()方法返回的实例</span></span><br><span class="line"><span class="comment">     * 如果要拿到FactoryBean本身则需要加上&amp;前缀，applicationContext.getBean(&amp;beanName)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String FACTORY_BEAN_PREFIX = <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据beanName获取容器中实例化好的bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的名字和Class类型来得到bean实例，增加了类型安全验证机制。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取bean实例时可以传递构造方法的参数，args就是构造方法的参数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的类型获取bean实例。比如getBean(User.class)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的类型和构造函数的参数获取bean实例。比如getBean(User.class, age, name)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个提供器类型的bean，通常是Spring框架内部使用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">ObjectProvider&lt;T&gt; <span class="title">getBeanProvider</span><span class="params">(Class&lt;T&gt; requiredType)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">ObjectProvider&lt;T&gt; <span class="title">getBeanProvider</span><span class="params">(ResolvableType requiredType)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供对bean的检索，看看是否在IOC容器有这个名字的bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsBean</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isPrototype</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String name, Class&lt;?&gt; typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到bean实例的Class类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getType(String name, <span class="keyword">boolean</span> allowFactoryBeanInit) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到bean的别名，如果根据别名检索，那么其原名也会被检索出来    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] getAliases(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FactoryBean</code>只定义了IoC容器的基本行为，它并不关心bean是如何定义，怎么加载的。<br>而具体是定义和加载是在其他的实现类中处理的，比如<code>XmlBeanFactory</code>、<code>ClasspathXmlApplicationContext</code>等。<br><code>XmlBeanFactory</code>是容器的最基本实现（<em>但是目前这个类已经声明为过时</em>），其他的加载类都是在此基础上的扩展。</p><h4 id="BeanDefinition（bean定义信息，IoC核心数据结构）"><a href="#BeanDefinition（bean定义信息，IoC核心数据结构）" class="headerlink" title="BeanDefinition（bean定义信息，IoC核心数据结构）"></a>BeanDefinition（bean定义信息，IoC核心数据结构）</h4><p>Spring容器管理了我们定义的各种bean对象及其相互关系，bean在对象实现是以<code>BeanDefinition</code>类描述的。</p><pre class="mermaid">graph BTAttributeAccessorSupport -.-> AttributeAccessorBeanMatadataAttributeAccessor --> AttributeAccessorSupportBeanMatadataAttributeAccessor -.-> BeanMatadataElementAbstractBeanDefinition --> BeanMatadataAttributeAccessorRootBeanDefinition --> AbstractBeanDefinitionGenericBeanDefinition --> AbstractBeanDefinitionChildBeanDefinition --> AbstractBeanDefinitionBeanDefinition --> AttributeAccessorBeanDefinition --> BeanMatadataElementAbstractBeanDefinition -.-> BeanDefinition</pre><p>Bean的解析过程非常复杂，功能被分的很细，因为这里需要被扩展的地方非常多，也提供了很多接口给开发者用于修改bean的定义。保证了足够的灵活性，以应对变化。Bean的解析主要是对Spring配置文件或者配置类的解析，解析过程如下：</p><pre class="mermaid">graph BTXmlBeanDefinitionReader --> AbstractBeanDefinitionReaderAbstractBeanDefinitionReader -.-> BeanDefinitionReaderXmlBeanDefinitionReader -.-> DefaultBeanDefinitionDocumentReaderDefaultBeanDefinitionDocumentReader -.-> BeanDefinitionDocumentReaderXmlBeanDefinitionReader -.-> BeanDefinitionDocumentReader</pre><h2 id="IoC-容器初始化、bean实例化（核心内容）"><a href="#IoC-容器初始化、bean实例化（核心内容）" class="headerlink" title="IoC 容器初始化、bean实例化（核心内容）"></a>IoC 容器初始化、bean实例化（核心内容）</h2><p>这部分是非常非常复杂，在另外一篇《Spring IoC原理》中详细介绍。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringFramework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java虚拟机</title>
      <link href="/2020/05/04/JVM/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2020/05/04/JVM/%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update --><!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --><p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc">DocToc</a></em></p><ul><li><a href="#jvm%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84-vs-java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-vs-java%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B">JVM内存结构 VS Java内存模型 VS Java对象模型</a><ul><li><a href="#jvm%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84">JVM内存结构</a><ul><li><a href="#%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8">程序计数器</a></li><li><a href="#java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88">Java虚拟机栈</a></li><li><a href="#%E5%A0%86">堆</a></li><li><a href="#%E6%96%B9%E6%B3%95%E5%8C%BA">方法区</a></li></ul></li><li><a href="#java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">Java内存模型</a></li><li><a href="#java%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B">Java对象模型</a></li><li><a href="#%E4%B8%89%E8%80%85%E5%8C%BA%E5%88%AB">三者区别</a></li></ul></li><li><a href="#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6">垃圾回收</a><ul><li><a href="#gc%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8">GC垃圾收集器</a><ul><li><a href="#serial%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95">Serial垃圾收集器（单线程、复制算法）</a></li><li><a href="#parnew%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8serial--%E5%A4%9A%E7%BA%BF%E7%A8%8B">ParNew垃圾收集器（Serial + 多线程）</a></li><li><a href="#parllel-scavenge%E6%94%B6%E9%9B%86%E5%99%A8-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95">Parllel Scavenge收集器 （多线程、复制算法）</a></li><li><a href="#serial-old%E6%94%B6%E9%9B%86%E5%99%A8%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86%E7%AE%97%E6%B3%95">Serial Old收集器（单线程标记整理算法）</a></li><li><a href="#parallel-old%E6%94%B6%E9%9B%86%E5%99%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86%E7%AE%97%E6%B3%95">Parallel Old收集器（多线程标记整理算法）</a></li><li><a href="#cms%E6%94%B6%E9%9B%86%E5%99%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95">CMS收集器（多线程标记清除算法）</a><ul><li><a href="#cms%E7%9A%84%E7%BC%BA%E7%82%B9">CMS的缺点</a></li><li><a href="#cms%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">CMS的使用场景</a></li></ul></li><li><a href="#g1%E6%94%B6%E9%9B%86%E5%99%A8">G1收集器</a><ul><li><a href="#g1%E5%AF%B9%E6%AF%94cms%E7%9A%84%E5%8C%BA%E5%88%AB">G1对比CMS的区别</a></li></ul></li></ul></li><li><a href="#major-gc%E5%92%8Cfull-gc%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6%E5%91%A2">Major GC和Full GC的区别是什么？触发条件呢？</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E8%A7%A6%E5%8F%91full-gc">什么时候会触发full gc</a></li><li><a href="#%E5%8F%AF%E4%BB%A5%E4%BD%9C%E4%B8%BAroot%E7%9A%84%E5%AF%B9%E8%B1%A1">可以作为root的对象</a></li><li><a href="#%E6%96%B0%E7%94%9F%E4%BB%A3%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%80%81%E5%B9%B4%E4%BB%A3%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6">新生代转移到老年代的触发条件</a></li><li><a href="#g1%E5%92%8Ccms%E7%9A%84%E5%8C%BA%E5%88%AB">G1和CMS的区别</a></li></ul></li><li><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD">类加载</a><ul><li><a href="#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95%E7%94%A8%E6%88%B7%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8-%E6%80%8E%E4%B9%88%E6%89%93%E7%A0%B4%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%89%98%E6%9C%BA%E5%88%B6">双亲委派模型中有哪些方法。用户如何自定义类加载器 。怎么打破双亲委托机制</a></li></ul></li><li><a href="#%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA">内存溢出</a><ul><li><a href="#%E5%8E%9F%E5%9B%A0">原因</a></li><li><a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95">解决方法</a></li></ul></li><li><a href="#%E6%A0%88%E6%BA%A2%E5%87%BA">栈溢出</a><ul><li><a href="#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95">解决办法</a></li></ul></li><li><a href="#java%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95">java应用系统运行速度慢的解决方法</a></li><li><a href="#%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90">逃逸分析</a></li><li><a href="#%E7%BC%96%E8%AF%91">编译</a><ul><li><a href="#%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95">即时编译器的优化方法</a></li><li><a href="#%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E7%9A%84%E4%BA%94%E4%B8%AA%E9%98%B6%E6%AE%B5">编译过程的五个阶段</a></li><li><a href="#jvmjava%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cjava%E8%A7%A3%E9%87%8A%E5%99%A8">JVM、Java编译器和Java解释器</a></li><li><a href="#jit-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B">JIT 编译过程</a></li><li><a href="#graal-%E7%9A%84%E5%AE%9E%E7%8E%B0">Graal 的实现</a></li><li><a href="#graalvm-%E4%B8%AD%E7%9A%84-ahead-of-timeaot">GraalVM 中的 Ahead-Of-Time（AOT）</a></li></ul></li><li><a href="#jvm%E7%9A%84intrinsics%E6%96%B9%E6%B3%95">JVM的Intrinsics方法</a></li><li><a href="#jvm%E7%9A%84invokedynamic%E6%96%B9%E6%B3%95">JVM的invokedynamic方法</a></li><li><a href="#%E6%96%B9%E6%B3%95%E5%8F%A5%E6%9F%84">方法句柄</a></li><li><a href="#%E6%A0%88%E4%B8%8A%E5%88%86%E9%85%8D%E5%92%8Ctlab">栈上分配和TLAB</a><ul><li><a href="#%E6%A0%88%E4%B8%8A%E5%88%86%E9%85%8D">栈上分配</a></li><li><a href="#%E7%BA%BF%E7%A8%8B%E7%A7%81%E6%9C%89%E5%88%86%E9%85%8D%E5%8C%BAtlab">线程私有分配区TLAB</a></li><li><a href="#%E6%80%BB%E4%BD%93%E6%B5%81%E7%A8%8B">总体流程</a></li><li><a href="#%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E6%B5%81%E7%A8%8B%E5%9B%BE">对象分配流程图</a></li></ul></li><li><a href="#java-8-%E4%BB%8E%E6%B0%B8%E4%B9%85%E4%BB%A3permgen%E5%88%B0%E5%85%83%E7%A9%BA%E9%97%B4metaspace">Java 8: 从永久代（PermGen）到元空间（Metaspace）</a></li></ul><!-- END doctoc generated TOC please keep comment here to allow auto update --><h1 id="JVM内存结构-VS-Java内存模型-VS-Java对象模型"><a href="#JVM内存结构-VS-Java内存模型-VS-Java对象模型" class="headerlink" title="JVM内存结构 VS Java内存模型 VS Java对象模型"></a>JVM内存结构 VS Java内存模型 VS Java对象模型</h1><h2 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h2><p>Java代码是要运行在虚拟机上的，而虚拟机在执行Java程序的过程中会把所管理的内存划分为若干个不同的数据区域，这些区域都有各自的用途，其中有些区域随着虚拟机进程的启动而存在。<br><img src="https://github.com/zaiyunduan123/Java-Interview/blob/master/image/Java-5.jpg"></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>概述：较小的内存空间，为当前线程执行的字节码的行号指示器</br><br>作用：通过改变计数器的值来指定下一条需要执行的字节码指令，来恢复中断前程序运行的位置</br><br>特点：</p><ol><li>线程私有化，每个线程都有独立的程序计数器   </li><li>无内存溢出</li></ol><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>概述：每个方法从调用直到执行的过程，对应着一个栈帧在虚拟机栈的入栈和出栈的过程</br><br>作用：每个方法执行都创建一个“栈帧”来存储局部变量表、操作数栈、动态链接、方法出口等信息</br><br>特点：</p><ol><li>线程私有化   </li><li>生命周期与线程执行结束相同</li></ol><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>创建时间：JVM启动时创建该区域</br><br>占用空间：Java虚拟机管理内存最大的一块区域</br><br>作用：用于存放对象实例及数组（所有new的对象）</br></p><p>特点：</p><ol><li>垃圾收集器作用该区域，回收不使用的对象的内存空间</li><li>各个线程共享的内存区域</li><li>该区域的大小可通过参数设置</li></ol><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>作用：用于存储类信息、常量、静态变量、是各个线程共享的内存区域</p><h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>Java内存模型是根据英文Java Memory Model（JMM）翻译过来的。其实JMM并不像JVM内存结构一样是真实存在的。他只是一个抽象的概念，JMM是和多线程相关的，这个规范定义了一个线程对共享变量的写入时对另一个线程是可见的。</p><p>在JMM中，我们把多个线程间通信的共享内存称之为主内存，而在并发编程中多个线程都维护了一个自己的本地内存（这是个抽象概念），其中保存的数据是主内存中的数据拷贝。而JMM主要是控制本地内存和主内存之间的数据交互的。<br><img src="https://github.com/zaiyunduan123/Java-Interview/blob/master/image/Java-6.jpg"></p><h2 id="Java对象模型"><a href="#Java对象模型" class="headerlink" title="Java对象模型"></a>Java对象模型</h2><p>Java是一种面向对象的语言，而Java对象在JVM中的存储也是有一定的结构的。而这个关于Java对象自身的存储模型称之为Java对象模型。</p><p>每一个Java类，在被JVM加载的时候，JVM会给这个类创建一个instanceKlass，保存在方法区，用来在JVM层表示该Java类。当我们在Java代码中，使用new创建一个对象的时候，JVM会创建一个instanceOopDesc对象，这个对象中包含了对象头以及实例数据。</p><p><img src="https://github.com/zaiyunduan123/Java-Interview/blob/master/image/Java-7.jpg"></p><h2 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h2><ol><li>JVM内存结构，和Java虚拟机的运行时区域有关。</li><li>Java内存模型，和Java的并发编程有关。</li><li>Java对象模型，和Java对象在虚拟机中的表现形式有关。</li></ol><h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><h2 id="GC垃圾收集器"><a href="#GC垃圾收集器" class="headerlink" title="GC垃圾收集器"></a>GC垃圾收集器</h2><h3 id="Serial垃圾收集器（单线程、复制算法）"><a href="#Serial垃圾收集器（单线程、复制算法）" class="headerlink" title="Serial垃圾收集器（单线程、复制算法）"></a>Serial垃圾收集器（单线程、复制算法）</h3><p>Serial(英文：连续)是最基本垃圾收集器，使用复制算法，曾经是 JDK1.3.1 之前新生代唯一的垃圾收集器。Serial 是一个单线程的收集器，它不但只会使用一个 CPU 或一条线程去完成垃圾收集工作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程，直到垃圾收集结束。</p><p>Serial 垃圾收集器虽然在收集垃圾过程中需要暂停所有其他的工作线程，但是它简单高效，对于限定单个 CPU 环境来说，没有线程交互的开销，可以获得最高的单线程垃圾收集效率，因此 Serial垃圾收集器依然是 java 虚拟机运行在 Client 模式下默认的新生代垃圾收集器。</p><h3 id="ParNew垃圾收集器（Serial-多线程）"><a href="#ParNew垃圾收集器（Serial-多线程）" class="headerlink" title="ParNew垃圾收集器（Serial + 多线程）"></a>ParNew垃圾收集器（Serial + 多线程）</h3><p>ParNew（Parallel:平行的） 垃圾收集器其实是 Serial 收集器的多线程版本，也使用复制算法，除了使用多线程进行垃 圾收集之外，其余的行为和 Serial 收集器完全一样，ParNew 垃圾收集器在垃圾收集过程中同样也 要暂停所有其他的工作线程。</p><p>ParNew 收集器默认开启和 CPU 数目相同的线程数，可以通过-XX:ParallelGCThreads 参数来限 制垃圾收集器的线程数。</p><p>ParNew 虽然是除了多线程外和 Serial 收集器几乎完全一样，但是 ParNew 垃圾收集器是很多 java 虚拟机运行在 Server 模式下新生代的默认垃圾收集器。</p><h3 id="Parllel-Scavenge收集器-（多线程、复制算法）"><a href="#Parllel-Scavenge收集器-（多线程、复制算法）" class="headerlink" title="Parllel Scavenge收集器 （多线程、复制算法）"></a>Parllel Scavenge收集器 （多线程、复制算法）</h3><h3 id="Serial-Old收集器（单线程标记整理算法）"><a href="#Serial-Old收集器（单线程标记整理算法）" class="headerlink" title="Serial Old收集器（单线程标记整理算法）"></a>Serial Old收集器（单线程标记整理算法）</h3><h3 id="Parallel-Old收集器（多线程标记整理算法）"><a href="#Parallel-Old收集器（多线程标记整理算法）" class="headerlink" title="Parallel Old收集器（多线程标记整理算法）"></a>Parallel Old收集器（多线程标记整理算法）</h3><h3 id="CMS收集器（多线程标记清除算法）"><a href="#CMS收集器（多线程标记清除算法）" class="headerlink" title="CMS收集器（多线程标记清除算法）"></a>CMS收集器（多线程标记清除算法）</h3><p>CMS（Concurrent Mark-Sweep）是以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器。对于要求服务器响应速度的应用上，这种垃圾回收器非常适合。</p><p>在启动JVM参数加上-XX:+UseConcMarkSweepGC ，这个参数表示对于老年代的回收采用CMS。</p><p>CMS采用的基础算法是：标记–清除</p><p>CMS过程</p><ol><li>初始标记</li><li>并发标记</li><li>并发预清除</li><li>重新标记</li><li>并发清理</li><li>并发重置</li></ol><h4 id="CMS的缺点"><a href="#CMS的缺点" class="headerlink" title="CMS的缺点"></a>CMS的缺点</h4><ol><li>CMS采用的基础算法是标记–清除。所有CMS不会整理、压缩堆空间。经过CMS收集的堆会产生空间碎片。虽然节约了垃圾回收的停顿时间，但也带来堆空间的浪费。</li><li>需要更多的CPU资源，为了让应用程序不停顿，CMS线程和应用程序线程并发执行，这样就需要有更多的CPU，单纯靠线程切换是不靠谱的。</li><li>CMS的另一个缺点是它需要更大的堆空间。因为CMS标记阶段应用程序的线程还是在执行的，那么就会有堆空间继续分配的情况，为了保证在CMS回<br>收完堆之前还有空间分配给正在运行的应用程序，必须预留一部分空间。也就是说，CMS不会在老年代满的时候才开始收集。相反，它会尝试更早的开始收集，已 避免上面提到的情况：在回收完成之前，堆没有足够空间分配！默认当老年代使用68%的时候，CMS就开始行动了。 – XX:CMSInitiatingOccupancyFraction =n 来设置这个阀值。</li></ol><h4 id="CMS的使用场景"><a href="#CMS的使用场景" class="headerlink" title="CMS的使用场景"></a>CMS的使用场景</h4><p>如果你的应用程序对停顿比较敏感，并且在应用程序运行的时候可以提供更大的内存和更多的CPU(也就是硬件牛逼)，那么使用CMS来收集会给你带来好处。还有，如果在JVM中，有相对较多存活时间较长的对象(老年代比较大)会更适合使用CMS。</p><h3 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h3><p>G1(Garbage First)垃圾收集器是当今垃圾回收技术最前沿的成果之一。早在JDK7就已加入JVM的收集器大家庭中，成为HotSpot重点发展的垃圾回收技术，JDK9 默认就是使用的G1垃圾收集器。</p><p>不同于其他的分代回收算法，G1最大的特点是引入分区的思路，弱化了分代的概念，合理利用垃圾收集各个周期的资源，解决了其他收集器甚至CMS的众多缺陷。每块区域既有可能属于O区、也有可能是Y区，且每类区域空间可以是不连续的（对比CMS的O区和Y区都必须是连续的）。</p><p>G1有三个明显特点：1、压缩空间强，避免碎片 2、空间使用更灵活 3、GC停顿周期更可控， 避免雪崩</p><p>一次完整G1GC的详细过程：</p><ol><li>YGC（不同于CMS）</li><li>并发阶段</li><li>混合模式</li><li>full GC（一般在G1出现问题时发生）</li></ol><p>目前CMS还是默认首选的GC策略、可能在以下场景下G1更适合：</p><ol><li>服务端多核CPU、JVM内存占用较大的应用（至少大于4G）</li><li>应用在运行过程中产生大量内存碎片、需要经常压缩空间</li><li>想要更可控、可预期的GC停顿周期：防止高并发应用雪崩现象</li></ol><h4 id="G1对比CMS的区别"><a href="#G1对比CMS的区别" class="headerlink" title="G1对比CMS的区别"></a>G1对比CMS的区别</h4><ol><li>G1在压缩空间方面有优势</li><li>G1通过将内存空间分成区域（Region）的方式避免内存碎片问题</li><li>Eden，Survivor，Old区不再固定、在内存使用效率上来说更灵活</li><li>G1可以通过设置预期停顿时间（Pause Time）来控制垃圾收集时间避免应用雪崩现象，可驾驭度，G1 是可以设定GC 暂停的 target 时间的，根据预测模型选取性价比收益更高，且一定数目的 Region 作为<br>CSet，能回收多少便是多少。</li><li>G1在回收内存后会马上同时做，合并空闲内存的工作、而CMS默认是在STW（stop the world）的时候做</li><li>G1会在Young GC中使用、而CMS只能在O区使用</li><li>SATB 算法在 remark 阶段延迟极低以及借助 RSet 的实现可以不做全堆扫描（G1 对大堆更友好）以外，最重要的是可驾驭度<h2 id="Major-GC和Full-GC的区别是什么？触发条件呢？"><a href="#Major-GC和Full-GC的区别是什么？触发条件呢？" class="headerlink" title="Major GC和Full GC的区别是什么？触发条件呢？"></a>Major GC和Full GC的区别是什么？触发条件呢？</h2></li></ol><p>针对HotSpot VM的实现，它里面的GC其实准确分类只有两大种：<br>Partial GC：并不收集整个GC堆的模式</p><ul><li>Young GC：只收集young gen的GC</li><li>Old GC：只收集old gen的GC。只有CMS的concurrent collection是这个模式</li><li>Mixed GC：收集整个young gen以及部分old gen的GC。只有G1有这个模式</li></ul><p>Full GC：收集整个堆，包括young gen、old gen、perm gen（如果存在的话）等所有部分的模式。</p><h2 id="什么时候会触发full-gc"><a href="#什么时候会触发full-gc" class="headerlink" title="什么时候会触发full gc"></a>什么时候会触发full gc</h2><ol><li>System.gc()方法的调用</li><li>老年代空间不足</li><li>永生区空间不足（JVM规范中运行时数据区域中的方法区，在HotSpot虚拟机中又被习惯称为永生代或者永生区，Permanet Generation中存放的为一些class的信息、常量、静态变量等数据）</li><li>GC时出现promotion failed和concurrent mode failure</li><li>统计得到的Minor GC晋升到旧生代平均大小大于老年代剩余空间</li><li>堆中分配很大的对象</li></ol><h2 id="可以作为root的对象"><a href="#可以作为root的对象" class="headerlink" title="可以作为root的对象"></a>可以作为root的对象</h2><ol><li>类中的静态变量，当它持有一个指向一个对象的引用时，它就作为root</li><li>活动着的线程，可以作为root</li><li>一个Java方法的参数或者该方法中的局部变量，这两种对象可以作为root</li><li>JNI方法中的局部变量或者参数，这两种对象可以作为root</li></ol><p>例子：下述的Something和Apple都可以作为root对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> AClass&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Something;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Apple;</span><br><span class="line">   <span class="string">&#x27;&#x27;</span><span class="string">&#x27;&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Java方法的参数和方法中的局部变量，可以作为root.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Aclass&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Object A)</span></span>&#123;</span><br><span class="line">    ObjectB b = <span class="keyword">new</span> ObjectB; </span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="新生代转移到老年代的触发条件"><a href="#新生代转移到老年代的触发条件" class="headerlink" title="新生代转移到老年代的触发条件"></a>新生代转移到老年代的触发条件</h2><ol><li>长期存活的对象</li><li>大对象直接进入老年代</li><li>minor gc后，survivor仍然放不下</li><li>动态年龄判断 ，大于等于某个年龄的对象超过了survivor空间一半 ，大于等于某个年龄的对象直接进入老年代</li></ol><h2 id="G1和CMS的区别"><a href="#G1和CMS的区别" class="headerlink" title="G1和CMS的区别"></a>G1和CMS的区别</h2><ol><li>G1同时回收老年代和年轻代，而CMS只能回收老年代，需要配合一个年轻代收集器。另外G1的分代更多是逻辑上的概念，G1将内存分成多个等大小的region，Eden/ Survivor/Old分别是一部分region的逻辑集合，物理上内存地址并不连续。<br><img src="https://github.com/zaiyunduan123/Java-Interview/blob/master/image/Java-8.jpg"></li><li>CMS在old gc的时候会回收整个Old区，对G1来说没有old gc的概念，而是区分Fully young gc和Mixed gc，前者对应年轻代的垃圾回收，后者混合了年轻代和部分老年代的收集，因此每次收集肯定会回收年轻代，老年代根据内存情况可以不回收或者回收部分或者全部(这种情况应该是可能出现)。</li></ol><h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h1><h2 id="双亲委派模型中有哪些方法。用户如何自定义类加载器-。怎么打破双亲委托机制"><a href="#双亲委派模型中有哪些方法。用户如何自定义类加载器-。怎么打破双亲委托机制" class="headerlink" title="双亲委派模型中有哪些方法。用户如何自定义类加载器 。怎么打破双亲委托机制"></a>双亲委派模型中有哪些方法。用户如何自定义类加载器 。怎么打破双亲委托机制</h2><ol><li>双亲委派模型中用到的方法：</li></ol><ul><li>findLoadedClass(),</li><li>loadClass()</li><li>findBootstrapClassOrNull()</li><li>findClass()</li><li>defineClass()：把二进制数据转换成字节码。</li><li>resolveClass()</li></ul><p>自定义类加载器的方法：继承 ClassLoader 类,重写 findClass()方法 。</p><ol start="2"><li>继承ClassLoader覆盖loadClass方法<br>原顺序</li><li>findLoadedClass</li><li>委托parent加载器加载（这里注意bootstrap加载器的parent为null)</li><li>自行加载<br>打破委派机制要做的就是打乱2和3的顺序，通过类名筛选自己要加载的类，其他的委托给parent加载器。</li></ol><h1 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h1><p>内存溢出是指应用系统中存在无法回收的内存或使用的内存过多，最终使得程序运行要用到的内存大于虚拟机能提供的最大内存。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>引起内存溢出的原因有很多种，常见的有以下几种：</p><ol><li>内存中加载的数据量过于庞大，如一次从数据库取出过多数据；</li><li>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收；</li><li>代码中存在死循环或循环产生过多重复的对象实体；</li><li>使用的第三方软件中的BUG；</li><li>启动参数内存值设定的过小；</li></ol><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>内存溢出虽然很棘手，但也有相应的解决办法，可以按照从易到难，一步步的解决。</p><p>第一步，就是修改JVM启动参数，直接增加内存。JVM默认可以使用的内存为64M，Tomcat默认可以使用的内存为128MB，对于稍复杂一点的系统就会不够用。在某项目中，就因为启动参数使用的默认值，经常报“OutOfMemory”错误。因此，-Xms，-Xmx参数一定不要忘记加。</p><p>第二步，检查错误日志，查看“OutOfMemory”错误前是否有其它异常或错误。查看日志对于分析内存溢出是非常重要的，通过仔细查看日志，分析内存溢出前做过哪些操作，可以大致定位有问题的模块。</p><p>第三步，找出可能发生内存溢出的位置。重点排查以下几点：</p><ol><li><p>检查代码中是否有死循环或递归调用。</p></li><li><p>检查是否有大循环重复产生新对象实体。</p></li><li><p>检查对数据库查询中，是否有一次获得全部数据的查询。一般来说，如果一次取十万条记录到内存，就可能引起内存溢出。这个问题比较隐蔽，在上线前，数据库中数据较少，不容易出问题，上线后，数据库中数据多了，一次查询就有可能引起内存溢出。因此对于数据库查询尽量采用分页的方式查询。</p></li><li><p>检查List、MAP等集合对象是否有使用完后，未清除的问题。List、MAP等集合对象会始终存有对对象的引用，使得这些对象不能被GC回收。</p></li></ol><p>第四步，使用内存查看工具动态查看内存使用情况。</p><p>内存查看工具有许多，比较有名的有：Optimizeit Profiler、JProbe Profiler、JinSight和Java1.5的Jconsole等。它们的基本工作原理大同小异，都是监测Java程序运行时所有对象的申请、释放等动作，将内存管理的所有信息进行统计、分析、可视化。开发人员可以根据这些信息判断程序是否有内存泄漏问题。一般来说，一个正常的系统在其启动完成后其内存的占用量是基本稳定的，而不应该是无限制的增长的。持续地观察系统运行时使用的内存的大小，可以看到在内存使用监控窗口中是基本规则的锯齿形的图线，如果内存的大小持续地增长，则说明系统存在内存泄漏问题。通过间隔一段时间取一次内存快照，然后对内存快照中对象的使用与引用等信息进行比对与分析，可以找出是哪个类的对象在泄漏。</p><h1 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h1><ol><li>递归调用层次太多。递归函数在运行时会执行压栈操作，当压栈次数太多时，也会导致堆栈溢出。</li><li>局部静态变量体积太大,局部数组过大。当函数内部的数组过大时，有可能导致堆栈溢出。</li><li>指针或数组越界。这种情况最常见，例如进行字符串拷贝，或处理用户输入等等。</li></ol><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li>用栈把递归转换成非递归</li><li>使用static对象替代nonstatic局部对象</li><li>增大堆栈大小值</li></ol><h1 id="java应用系统运行速度慢的解决方法"><a href="#java应用系统运行速度慢的解决方法" class="headerlink" title="java应用系统运行速度慢的解决方法"></a>java应用系统运行速度慢的解决方法</h1><p> 问题解决思路：</p><ol><li>查看部署应用系统的系统资源使用情况，CPU,内存，IO这几个方面去看。找到对就的进程。</li><li>使用jstack,jmap等命令查看是JVM是在在什么类型的内存空间中做GC（内存回收），和查看GC日志查看是那段代码在占用内存。<br> ​    首先，调节内存的参数设置，如果还是一样的问题，就要定位到相应的代码。</li><li>定位代码，修改代码（一般是代码的逻辑问题，或者代码获取的数据量过大。）</li></ol><h1 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h1><p>逃逸是指在某个方法之内创建的对象，除了在方法体之内被引用之外，还在方法体之外被其它变量引用到；这样带来的后果是在该方法执行完毕之后，该方法中创建的对象将无法被GC回收，由于其被其它变量引用。正常的方法调用中，方法体中创建的对象将在执行完毕之后，将回收其中创建的对象；故由于无法回收，即成为逃逸。</p><p>逃逸分析可以分析出某个对象是否永远只在某个方法、线程的范围内，并没有“逃逸”出这个范围，逃逸分析的一个结果就是对于某些未逃逸对象可以直接在栈上分配，由于该对象一定是局部的，所以栈上分配不会有问题。</p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><h2 id="即时编译器的优化方法"><a href="#即时编译器的优化方法" class="headerlink" title="即时编译器的优化方法"></a>即时编译器的优化方法</h2><p>字节码可以通过以下两种方式转换成合适的语言：</p><ol><li>解释器</li><li>即时编译器<br>即时编译器把<strong>整段字节码编译成本地代码</strong>，执行本地代码比一条一条进行解释执行的速度快很多，因为本地代码是保存在缓存里的</li></ol><h2 id="编译过程的五个阶段"><a href="#编译过程的五个阶段" class="headerlink" title="编译过程的五个阶段"></a>编译过程的五个阶段</h2><ol><li>第一阶段：词法分析</li><li>第二阶段：语法分析</li><li>第三阶段:词义分析与中间代码产生</li><li>第四阶段：优化</li><li>第五阶段：目标代码生成</li></ol><h2 id="JVM、Java编译器和Java解释器"><a href="#JVM、Java编译器和Java解释器" class="headerlink" title="JVM、Java编译器和Java解释器"></a>JVM、Java编译器和Java解释器</h2><ol><li><p>Java编译器：将Java源文件（.java文件）编译成字节码文件（.class文件，是特殊的二进制文件，二进制字节码文件），这种字节码就是JVM的“机器语言”。javac.exe可以简单看成是Java编译器。注意，它不会执行代码</p><p>Java解释器：是JVM的一部分。Java解释器用来解释执行Java编译器编译后的程序。java.exe可以简单看成是Java解释器。注意，它会执行代码</p><p>JVM是Java平台无关的基础。JVM负责运行字节码：JVM把每一条要执行的字节码交给解释器，翻译成对应的机器码，然后由解释器执行。JVM解释执行字节码文件就是JVM操作Java解释器进行解释执行字节码文件的过程。</p></li><li><p>JVM：一种能够运行Java字节码（Java bytecode）的虚拟机。</p><p>字节码：字节码是已经经过编译，但与特定机器码无关，需要解释器转译后才能成为机器码的中间代码。</p></li><li><p>Java字节码：是Java虚拟机执行的一种指令格</p></li></ol><p>Java字节码的执行有两种方式：<br>　　1. 即时编译方式：解释器先将字节码编译成机器码，然后再执行该机器码。<br>　　2. 解释执行方式：解释器通过每次解释并执行一小段代码来完成Java字节码程 序的所有操作。</p><p>无论是采用解释器进行解释执行，还是采用即时编译器进行编译执行，最终字节码都需要被转换为对应平台的本地机器指令。</p><p>从表象意义上看，重点就在：<br>解释：输入程序代码 -&gt; 得到执行结果，从用户的角度看一步到位<br>编译：输入程序代码 -&gt; 得到可执行代码<br>要得到执行结果还得再去执行可执行代码</p><p>疑问,解释器通过翻译将字节码转换为机器码，即时编译器通过编译将字节码转换为机器码，翻译？编译？为什么都是一样的操作？？？</p><ol><li>每次读一代码就将字节码起转换（翻译）为JVM可执行的指令，叫翻译</li><li>一次性全部将字节码转换为JVM可执行的指令，叫编译</li></ol><h2 id="JIT-编译过程"><a href="#JIT-编译过程" class="headerlink" title="JIT 编译过程"></a>JIT 编译过程</h2><p>当 JIT 编译启用时（默认是启用的），JVM 读入.class 文件解释后，将其发给 JIT 编译器。JIT 编译器将字节码编译成本机机器代码，下图展示了该过程。</p><p><img src="https://github.com/zaiyunduan123/Java-Interview/blob/master/image/Java-15.png"></p><p>即时编译器是 Java 虚拟机中相对独立的模块，它主要负责接收 Java 字节码，并生成可以直接运行的二进制码。<br>即时编译器与 Java 虚拟机的交互可以分为如下三个方面。</p><ol><li>响应编译请求；</li><li>获取编译所需的元数据（如类、方法、字段）和反映程序执行状态的 profile；</li><li>将生成的二进制码部署至代码缓存（code cache）里。</li></ol><p>许多开发者会觉得用 C++ 写的 C2 肯定要比 Graal 快。实际上，在充分预热的情况下，Java 程序中的热点代码早已经通过即时编译转换为二进制码，在执行速度上并不亚于静态编译的 C++ 程序。</p><h2 id="Graal-的实现"><a href="#Graal-的实现" class="headerlink" title="Graal 的实现"></a>Graal 的实现</h2><p>HotSpot集成了两个JIT compiler — C1及C2（或称为Client及Server）。两者的区别在于，前者没有应用激进的优化技术，因为这些优化往往伴随着耗时较长的代码分析。因此，C1的编译速度较快，而C2所编译的方法运行速度较快。</p><p>Java 7引入了tiered compilation的概念，综合了C1的高启动性能及C2的高峰值性能。这两个JIT compiler以及interpreter将HotSpot的执行方式划分为五个级别：</p><ol><li>level 0：interpreter解释执行</li><li>level 1：C1编译，无profiling</li><li>level 2：C1编译，仅方法及循环back-edge执行次数的profiling</li><li>level 3：C1编译，除level 2中的profiling外还包括branch（针对分支跳转字节码）及receiver type（针对成员方法调用或类检测，如checkcast，instnaceof，aastore字节码）的profiling</li><li>level 4：C2编译</li></ol><p>Graal可替换C2成为HotSpot的顶层JIT compiler，即上述level 4。与C2相比，Graal采用更加激进的优化方式，因此当程序达到稳定状态后，其执行效率（峰值性能）将更有优势。</p><p>Graal 和 C2 最为明显的一个区别是：Graal 是用 Java 写的，许多C2中实现的优化均被移植到Graal中.而 C2 是用 C++ 写的。相对来说，Graal 更加模块化，也更容易开发与维护。在充分预热的情况下，Java 程序中的热点代码早已经通过即时编译转换为二进制码，在执行速度上并不亚于静态编译的 C++ 程序。即便是解释执行 Graal，也仅是会减慢编译效率，而并不影响编译结果的性能。Graal 和 C2 另一个优化上的分歧则是方法内联算法。相对来说，Graal 的内联算法对新语法、新语言更加友好，例如 Java 8 的 lambda 表达式以及 Scala 语言。</p><p>Graal 编译器将编译过程分为前端和后端两大部分。前端用于实现平台无关的优化（如方法内联），以及小部分平台相关的优化；而后端则负责大部分的平台相关优化（如寄存器分配），以及机器码的生成。</p><p>Graal 和 C2 都采用了 Sea-of-Nodes IR。严格来说，这里指的是 Graal 的前端，而后端采用的是另一种非 Sea-of-Nodes 的 IR。通常，我们将前端的 IR 称之为 High-level IR，或者 HIR；后端的 IR 则称之为 Low-level IR，或者 LIR。</p><p>Graal 是一个用 Java 写就的、并能够将 Java 字节码转换成二进制码的即时编译器。它通过 JVMCI 与 Java 虚拟机交互，响应由后者发出的编译请求、完成编译并部署编译结果。</p><p>对 Java 程序而言，Graal 编译结果的性能略优于 OpenJDK 中的 C2；对 Scala 程序而言，它的性能优势可达到 10%（企业版甚至可以达到 20%！）。这背后离不开 Graal 所采用的激进优化方式。</p><p>这种基于假设的优化手段。在编译过程中，Graal 支持自定义假设，并且直接与去优化节点相关联。</p><h2 id="GraalVM-中的-Ahead-Of-Time（AOT）"><a href="#GraalVM-中的-Ahead-Of-Time（AOT）" class="headerlink" title="GraalVM 中的 Ahead-Of-Time（AOT）"></a>GraalVM 中的 Ahead-Of-Time（AOT）</h2><p>GraalVM 是一个高性能的、支持多种编程语言的执行环境。它既可以在传统的 OpenJDK 上运行，也可以通过 AOT（Ahead-Of-Time）编译成可执行文件单独运行，甚至可以集成至数据库中运行。<br>˚<br>即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。</p><p>而AOT 编译指的则是，在程序运行之前，便将字节码转换为机器码的过程。它的成果可以是需要链接至托管环境中的动态共享库，也可以是独立运行的可执行文件。</p><p>AOT 编译的优点：无须在运行过程中耗费 CPU 资源来进行即时编译，而程序也能够在启动伊始就达到理想的性能。</p><p>AOT 编译的缺点：AOT 编译无法得知程序运行时的信息，因此也（1）无法进行基于类层次分析的完全虚方法内联，或者（2）基于程序 profile 的投机性优化（并非硬性限制，我们可以通过限制运行范围，或者利用上一次运行的程序 profile 来绕开这两个限制）。这两者都会影响程序的峰值性能。</p><p>Java 9 引入了实验性 AOT 编译工具jaotc。它借助了 Graal 编译器，将所输入的 Java 类文件（class字节码文件）转换为机器码，并存放至生成的动态共享库之中</p><p>源文件就是程序员们所编写出来的文件 程序员们能看懂的文件<br>类文件则是利用java虚拟机生成的编译文件 是用来给机器看的机器语言</p><h1 id="JVM的Intrinsics方法"><a href="#JVM的Intrinsics方法" class="headerlink" title="JVM的Intrinsics方法"></a>JVM的Intrinsics方法</h1><p>在hotspot jvm里会定义一些intrinsic的方法，从而可以定义自己独有的一些编译的算法，根据不同的架构使用不同的指令集，比如Math.sin,Math.cos之类.</p><p>对每个方法hotspot jvm都会定义一个instrinisics id, 这个id可以用于区分java 里自己定义的lib类的方法还是用户自己定义的java的类的方法，用户自己写的类会用 vmIntrinsics::_none 来表示.</p><p>CallGenerator是在hotspot jvm中方法调用的核心，不同运行方式是由不同的call generator决定的，而instrinsic_id又是决定不同的call generator的key.</p><p>对Java自定义的lib库的方法，jvm 用了LibraryIntrinsic 作为lib库的CallGenerator， 在generate 函数的时候，初始化了LibraryCallKit，里面inline了很多lib的方法</p><h1 id="JVM的invokedynamic方法"><a href="#JVM的invokedynamic方法" class="headerlink" title="JVM的invokedynamic方法"></a>JVM的invokedynamic方法</h1><p>我们常用的JavaScript, Python, Ruby都可以归为动态语言，而Java, Bytecode都可以认为是静态语言。这两种语言最大的差别是变量和函数的类型是不是在程序运行中确定的。</p><p>invokedynamic 是 Java 7 引入的一条新指令，用以支持动态语言的方法调用。具体来说，它将调用点（CallSite）抽象成一个 Java 类，并且将原本由 Java 虚拟机控制的方法调用以及方法链接暴露给了应用程序。在运行过程中，每一条 invokedynamic 指令将捆绑一个调用点，并且会调用该调用点所链接的方法句柄。</p><p>在第一次执行 invokedynamic 指令时，Java 虚拟机会调用该指令所对应的启动方法（BootStrap Method），来生成前面提到的调用点，并且将之绑定至该 invokedynamic 指令中。在之后的运行过程中，Java 虚拟机则会直接调用绑定的调用点所链接的方法句柄。</p><p>在 Java 8 中，Lambda 表达式也是借助 invokedynamic 来实现的。<br>Lambda 表达式到函数式接口的转换是通过 invokedynamic 指令来实现的。该 invokedynamic 指令对应的启动方法将通过 ASM 生成一个适配器类。<br>对于没有捕获其他变量的 Lambda 表达式，该 invokedynamic 指令始终返回同一个适配器类的实例。对于捕获了其他变量的 Lambda 表达式，每次执行 invokedynamic 指令将新建一个适配器类实例。</p><p>不管是捕获型的还是未捕获型的 Lambda 表达式，它们的性能上限皆可以达到直接调用的性能。其中，捕获型 Lambda 表达式借助了即时编译器中的逃逸分析，来避免实际的新建适配器类实例的操作。</p><h1 id="方法句柄"><a href="#方法句柄" class="headerlink" title="方法句柄"></a>方法句柄</h1><p>invokedynamic 底层机制的基石：方法句柄。</p><p>方法句柄是一个强类型的、能够被直接执行的引用。它仅关心所指向方法的参数类型以及返回类型，而不关心方法所在的类以及方法名。方法句柄的权限检查发生在创建过程中，相较于反射调用节省了调用时反复权限检查的开销。</p><p>方法句柄可以通过 invokeExact 以及 invoke 来调用。其中，invokeExact 要求传入的参数和所指向方法的描述符严格匹配。方法句柄还支持增删改参数的操作，这些操作是通过生成另一个充当适配器的方法句柄来实现的。</p><p>方法句柄的调用和反射调用一样，都是间接调用，同样会面临无法内联的问题。</p><h1 id="栈上分配和TLAB"><a href="#栈上分配和TLAB" class="headerlink" title="栈上分配和TLAB"></a>栈上分配和TLAB</h1><h2 id="栈上分配"><a href="#栈上分配" class="headerlink" title="栈上分配"></a>栈上分配</h2><p>JVM提供了一种叫做栈上分配的概念，针对那些作用域不会逃逸出方法的对象，在分配内存时不在将对象分配在堆内存中，而是将对象属性打散后分配在栈（线程私有的，属于栈内存）上，这样，随着方法的调用结束，栈空间的回收就会随着将栈上分配的打散后的对象回收掉，不再给gc增加额外的无用负担，从而提升应用程序整体的性能</p><h2 id="线程私有分配区TLAB"><a href="#线程私有分配区TLAB" class="headerlink" title="线程私有分配区TLAB"></a>线程私有分配区TLAB</h2><p>对象分配在堆上，而堆是一个全局共享的区域，当多个线程同一时刻操作堆内存分配对象空间时，就需要通过锁机制或者指针碰撞的方式确保不会申请到同一块内存，而这带来的效果就是对象分配效率变差（尽管JVM采用了CAS的形式处理分配失败的情况），但是对于存在竞争激烈的分配场合仍然会导致效率变差。因此，在Hotspot 1.6的实现中引入了TLAB技术。</p><p>TLAB全称ThreadLocalAllocBuffer，是线程的一块私有内存，如果设置了虚拟机参数 -XX:UseTLAB，在线程初始化时，同时也会申请一块指定大小的内存，只给当前线程使用，这样每个线程都单独拥有一个Buffer，如果需要分配内存，就在自己的Buffer上分配，这样就不存在竞争的情况，可以大大提升分配效率。</p><p>TLAB只是让每个线程有私有的分配指针，但底下存对象的内存空间还是给所有线程访问的，只是其它线程无法在这个区域分配而已。当一个TLAB用满（分配指针_top撞上分配极限_end了），就新申请一个TLAB。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class ThreadLocalAllocBuffer: public CHeapObj&lt;mtThread&gt; &#123;</span><br><span class="line">  HeapWord* _start;                              <span class="comment">// address of TLAB</span></span><br><span class="line">  HeapWord* _top;                                <span class="comment">// address after last allocation</span></span><br><span class="line">  HeapWord* _pf_top;                             <span class="comment">// allocation prefetch watermark</span></span><br><span class="line">  HeapWord* _end;                                <span class="comment">// allocation end (excluding alignment_reserve)</span></span><br><span class="line">  size_t    _desired_size;                       <span class="comment">// desired size   (including alignment_reserve)</span></span><br><span class="line">  size_t    _refill_waste_limit;                 <span class="comment">// hold onto tlab if free() is larger than this</span></span><br><span class="line">  .....................省略......................</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TLAB空间主要有3个指针：_start、_top、_end。_start指针表示TLAB空间的起始内存，_end指针表示TLAB空间的结束地址，通过_start和_end指针，表示线程管理的内存区域，每个线程都会从Eden分配一大块空间（TLAB实际上是一块Eden区中划出的线程私有的堆空间），标识出 Eden 里被这个 TLAB 所管理的区域，卡住eden里的一块空间不让其它线程来这里分配</p><p>当进行对象的内存划分的时候，就会通过移动_top指针分配内存（TLAB，Eden，To，From 区主要采用指针碰撞来分配内存（pointer bumping）），在TLAB空间为对象分配内存需要遵循下面的原则：</p><ol><li>obj_size + tlab_top &lt;= tlab_end，直接在TLAB空间分配对象</li><li>obj_size + tlab_top &gt;= tlab_end  &amp;&amp;  tlab_free &gt; tlab_refill_waste_limit，对象不在TLAB分配，在Eden区分配。（tlab_free：剩余的内存空间，tlab_refill_waste_limit：允许浪费的内存空间）</li><li>obj_size + tlab_top &gt;= tlab_end  &amp;&amp;  tlab_free &lt; _refill_waste_limit，重新分配一块TLAB空间，在新的TLAB中分配对象</li></ol><h2 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h2><p><img src="https://github.com/zaiyunduan123/Java-Interview/blob/master/image/JVM-2.png"></p><h2 id="对象分配流程图"><a href="#对象分配流程图" class="headerlink" title="对象分配流程图"></a>对象分配流程图</h2><p><img src="https://github.com/zaiyunduan123/Java-Interview/blob/master/image/JVM-1.png"></p><h1 id="Java-8-从永久代（PermGen）到元空间（Metaspace）"><a href="#Java-8-从永久代（PermGen）到元空间（Metaspace）" class="headerlink" title="Java 8: 从永久代（PermGen）到元空间（Metaspace）"></a>Java 8: 从永久代（PermGen）到元空间（Metaspace）</h1><p>在 Java8 中，永久代（PermGen）已经被移除，被一个称为“元空间（Metaspace）”的区域所取代。元空间并不在虚拟机中，而是使用本地内存（Native memory）</p><p>类的元数据信息（metadata）转移到Metaspace的原因是PermGen很难调整。PermGen中类的元数据信息在每次FullGC的时候可能会被收集。而且应该为PermGen分配多大的空间很难确定，因为PermSize的大小依赖于很多因素，比如JVM加载的class的总数，常量池的大小，方法的大小等。</p><p>由于类的元数据可以在本地内存(native memory)之外分配,所以其最大可利用空间是整个系统内存的可用空间。这样，你将不再会遇到OOM错误，溢出的内存会涌入到交换空间。最终用户可以为类元数据指定最大可利用的本地内存空间，JVM也可以增加本地内存空间来满足类元数据信息的存储。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring源码学习</title>
      <link href="/2020/04/19/Spring/Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/04/19/Spring/Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>以配置方式启动Spring容器，容器启动大概过程如下如：</p><p><img src="/image/blog-image/spring/spring1.png" alt="Spring容器启动"></p><p><a href="https://developer.aliyun.com/article/766880?accounttraceid=9995ff10f15040e981c770edc5c298a8xufk">循环依赖问题详解</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>官方FAQ(非常重要)——idea插件开发</title>
      <link href="/2020/01/21/idea-plugin/%E5%AE%98%E6%96%B9FAQ(%E9%9D%9E%E5%B8%B8%E9%87%8D%E8%A6%81)/"/>
      <url>/2020/01/21/idea-plugin/%E5%AE%98%E6%96%B9FAQ(%E9%9D%9E%E5%B8%B8%E9%87%8D%E8%A6%81)/</url>
      
        <content type="html"><![CDATA[<h3 id="Plugin-Development-FAQ"><a href="#Plugin-Development-FAQ" class="headerlink" title="Plugin Development FAQ"></a>Plugin Development FAQ</h3><p>This FAQ is a topical index of questions that have been asked (and answered) on our <a href="https://intellij-support.jetbrains.com/hc/en-us/community/topics/200366979-IntelliJ-IDEA-Open-API-and-Plugin-Development">IntelliJ IDEA Open API and Plugin Development forum</a>.</p><h4 id="Open-Source-Plugins"><a href="#Open-Source-Plugins" class="headerlink" title="Open-Source Plugins"></a>Open-Source Plugins</h4><ul><li><a href="https://github.com/jetbrains/intellij-scala#setting-up-the-project">How do I compile the Scala plugin?</a></li></ul><h4 id="Open-Source-Plugins-1"><a href="#Open-Source-Plugins-1" class="headerlink" title="Open-Source Plugins"></a>Open-Source Plugins</h4><ul><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206130119-Triggering-AnAction-instances-">How do I trigger actions programmatically?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206750335-Add-new-Main-menu-option-for-plugin">How do I add a main menu item?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206765055-Overriding-the-New-context-menu-in-the-Project-view">How do I customize the “New…” menu?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206142169-How-to-add-a-menu-item-below-Exclude-From-Compile-">How do I customize the compiler output context menu?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206756455-Question-about-Actions">How do I get the context of an action (selected file, active project etc.)?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206763405-How-to-dynamically-change-icons-in-the-tool-bar-">How do I change the icon of an action dynamically?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206151289-How-to-add-icons-to-the-toolbar-">How do I add icons to the IDEA toolbar?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206126699-List-of-built-in-action-ID-s-">Where do I get the list of built-in action IDs?</a></li></ul><h4 id="Accessing-and-Modifying-the-Source-Code"><a href="#Accessing-and-Modifying-the-Source-Code" class="headerlink" title="Accessing and Modifying the Source Code"></a>Accessing and Modifying the Source Code</h4><ul><li><a href="http://www.jetbrains.org/intellij/sdk/docs/basics/architectural_overview/psi.html">PSI Architectural Overview</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206791895-finding-all-derived-class-given-parent-class">How do I find all subclasses of a class?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206792205-How-to-find-anonymous-classes-in-PsiClass-">How do I find all anonymous classes created in a class?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206139829-How-to-evaluate-the-value-of-PsiJavaToken-of-STRING-LITERAL-type">How do I calculate the value of a string literal token?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206791825-How-to-rename-a-class-">How do I rename or move a Java class?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206139469-Using-DependencyValidationManager-to-Get-Required-Classes">How do I build the list of all classes used by a given class or package?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206143839-Adding-PsiElements-to-a-PsiFile">How do I insert whitespace into the PSI?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206142279-Dynamically-add-new-properties-to-properties-files">How do I add properties to a .properties file?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206143579-finding-a-statement-within-a-PsiMethod">How do I find specific method calls inside a PsiMethod?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206796015-What-is-the-lifecycle-of-a-PsiElement-">What is the lifecycle of a PSI element?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206768795-How-to-search-file-by-file-name-in-project-s-root-directory-">How do I find a file given its name (but no path)?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206771665-Creating-a-new-class">How do I create a new class in the given package?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206794255-How-to-make-a-PsiClass-derive-from-another-one-">How do I make a PsiClass extend another PsiClass?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206800695-How-to-obtain-the-references-to-a-class-from-non-java-files-">How do I find references to a class from non-Java files?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206800595-How-to-find-the-source-for-a-class-file">How do I find the source file given the path to a .class file?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206146759-How-to-resolve-unqualified-name-to-possible-PsiClasses-">How do I find classes with the specified non-qualified name?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206103859-How-to-get-Module-from-PsiClass-">How do I find the module in which a class is located?</a></li><li><a href="http://www.jetbrains.org/intellij/sdk/docs/basics/psi_cookbook.html">PSI Cookbook</a></li></ul><h4 id="Working-with-XML-and-XML-DOM"><a href="#Working-with-XML-and-XML-DOM" class="headerlink" title="Working with XML and XML DOM"></a>Working with XML and XML DOM</h4><ul><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206139639-Change-xml-attribute-value">How do I change the value of an XML attribute through the PSI?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206795875-XmlTagValue-reference-to-Java-methods">How do I add custom references to Java elements in XML files?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206795425-How-to-register-DTD-with-idea">How do I programmatically register a DTD or schema?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206791535-DOM-DomElement-getParentOfType">What is the “strict” parameter in DomElement.getParentOfType()?</a></li></ul><h4 id="Code-Completion"><a href="#Code-Completion" class="headerlink" title="Code Completion"></a>Code Completion</h4><ul><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206133529-How-to-determine-what-type-of-code-completion-was-invoked">How do I determine what type of code completion was invoked?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206139729-Custom-completion-in-editor">How do I provide additional code completion in specific places of a Java file?</a></li></ul><h4 id="Refactoring"><a href="#Refactoring" class="headerlink" title="Refactoring"></a>Refactoring</h4><ul><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206795955-Refactoring-Listeners">How can I receive notifications about refactoring events?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206800005-How-to-invoke-refactoring-dialog-not-refactoring-itself-">How do I show a refactoring dialog programmatically?</a></li></ul><h4 id="Run-Debug"><a href="#Run-Debug" class="headerlink" title="Run/Debug"></a>Run/Debug</h4><p><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206143009-Creating-a-Run-type-">How do I implement a custom run configuration?</a></p><h4 id="Make-Compile"><a href="#Make-Compile" class="headerlink" title="Make/Compile"></a>Make/Compile</h4><p><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206800625-Implementing-a-ClassInstrumentingCompiler-how-to-get-the-generated-class-files">How do I get access to class files generated by javac?</a></p><h4 id="Version-Control-Integration"><a href="#Version-Control-Integration" class="headerlink" title="Version Control Integration"></a>Version Control Integration</h4><ul><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206791585-Editor-diff-functionality-for-custom-file-system">Can I provide line status markers for files in a custom file system?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206791975-VCS-context-menu">How do I update the state of VCS actions depending on file status?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206792195-Module-for-deleted-file-">How can I find out the module of a deleted file?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206139549-Is-it-possible-to-decorate-change-lists-">Can I provide additional decorations for changelists in the Changes view?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206791775-VCS-OpenAPI-what-to-do-with-files-detected-as-out-of-date-">How do I report out-of-date files?</a></li></ul><h4 id="Test-Framework"><a href="#Test-Framework" class="headerlink" title="Test Framework"></a>Test Framework</h4><p><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206791555-library-depndency-in-InspectionTestCase">How do I create a library dependency in my test module?</a></p><h4 id="Plugin-Architecture"><a href="#Plugin-Architecture" class="headerlink" title="Plugin Architecture"></a>Plugin Architecture</h4><ul><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206793965-Custom-exception-reporting">How do I provide a custom exception reporter for my plugin?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206760095-how-do-i-plug-into-the-main-idea-help-system-">How can I add the help topics of my plugin to the IntelliJ Platform help system?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206800275-How-to-get-the-idea-version">How do I get the version of IntelliJ Platform under which my plugin is running?</a></li></ul><h4 id="Editors-Documents-and-Files"><a href="#Editors-Documents-and-Files" class="headerlink" title="Editors, Documents and Files"></a>Editors, Documents and Files</h4><ul><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206791625-Action-doesn-t-see-changes-in-xml-file">Why doesn’t the file change on disk after I changed it through the PSI?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206790685-Can-you-tie-into-the-file-save-logic-">Can I hook into the file save logic?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/207042355-Read-only-section-in-editor">Can I mark a part of a file as read-only?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206791375-Using-locked-regions">How do I control what happens when the user tries to edit such a part?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206143969-Rough-guide-to-xml-gui-editor-type-plugin-">How do I implement a custom editor?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206795495-Alternative-Editors-ala-HTML-Preview">How can I show several editors for a single file in tabs?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206135449-Create-an-Editor-for-a-non-physical-file">Can I open an editor which has no underlying file on disk?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206792085-Catching-the-Save-All-action">How do I save the content of my custom editor when the user saves all documents?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206143909-MarkupModel-navigate-highlighted-elements">How do I highlight elements in a source code editor?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206143879-HighlightManager-how-to-enable-F3-functionality">How do I allow to navigate between highlighted elements using Find Next?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206143679-Forcing-an-annotator-to-update-status-of-a-file">How do I force code to be re-analyzed?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206141119-how-to-get-the-Editor-from-PsiElement-">How do I get the active editor instance?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206794335-How-to-get-cursor-position-in-the-current-editor-">How do I get the cursor position in the current editor?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206142039-Clear-read-only-status">How do I clear the read-only status of a file?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206146719-HintManager-API-question">How do I show a popup hint in an editor?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206800165-How-to-%C3%A7reate-live-template-like-red-box-edit-regions-in-an-editor">How do I create live template-like red box edit regions in an editor?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206146679-Error-highlighting-in-Editors">How can I show an editor with error highlighting in a tool window?</a></li></ul><h4 id="Inspections"><a href="#Inspections" class="headerlink" title="Inspections"></a>Inspections</h4><ul><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206139579-LocalInspectionTool-for-XML-files-/comments/206204765">Can I build an inspection that processes XML files?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206142489-visitXmlAttribute-question">Why are the inspection results shown multiple times?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206142769-Triggering-Create-Method-intention">How can I provide a quick fix that creates a method?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206800645-How-to-inspect-only-the-elements-modified-since-the-last-class-inspection">Is it possible to inspect only the elements that have been modified after the last full inspection?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/115000337510-Only-trigger-externalAnnotator-when-the-file-system-is-in-sync">ExternalAnnotator not in sync with current editor</a></li></ul><h4 id="Project-Structure"><a href="#Project-Structure" class="headerlink" title="Project Structure"></a>Project Structure</h4><ul><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206137859-Dependency-storage-formats-">Can I add a new module dependency storage format?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206143559-Usage-of-class-Pair-A-B-">What is the Pair to be passed to JavaModuleBuilder.setSourcePaths()?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206141569-selecting-a-configured-jdk">How do I access all configured JDKs?</a></li></ul><h4 id="Custom-Languages"><a href="#Custom-Languages" class="headerlink" title="Custom Languages"></a>Custom Languages</h4><ul><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206791995-Parameter-Info">How do I provide Parameter Info support for my language?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206139359-Autopopup-code-completion-in-custom-language">How do I provide auto-popup code completion in my language?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206797085-Custom-Language-How-to-make-a-closing-brace-unindent-">How to make a closing brace unindent?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206144059-How-the-insertion-of-closing-quote-works-in-Javascript-plugin-">How to automatically insert closing quotes?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206797015-Ctrl-mouse">How do I provide Ctrl+mouse popups for my language?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206786875-Debugging-custom-languages-">How do I enable debugging for my custom language which is compiled into Java?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206143749-Custom-languages-masquarding-as-a-java-source-file-within-IntelliJ">How do I generate virtual Java classes mirroring the classes of my language?</a></li></ul><h4 id="User-Interface"><a href="#User-Interface" class="headerlink" title="User Interface"></a>User Interface</h4><ul><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206791945-IDE-Notifications">How do I provide animated status bar notifications?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206139509-Combobox-with-Browse-Button-and-Autocompletion-">How do I enable file name completion in a combobox?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206139049-popup-menu-with-left-and-right-aligned-items">How do I show a popup with left-aligned and right-aligned parts for each item?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206351479-Using-Browser-Component">Can I use an embedded Web browser from my plugin?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206143779-Is-it-possible-to-change-icon-of-file-in-Project-view-">How do I provide a custom icon for files/PSI elements?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206139159-WriteActions-and-ProgressIndicator">Can I show a progress indicator for WriteActions?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206143999-DEMETRA-how-to-contribute-to-searchable-dialog-options-">How do I make it possible to search the options of my plugin in the Settings dialog?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206142679-Opening-a-customised-StructureView">How do I show a custom window or popup based on Structure View?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206141229-is-it-possible-to-extend-the-project-tree-">Is it possible to extend the Project View tree?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206141379-Showing-Project-Strucuture-dialog-programmatically">How do I show the “Project Structure” dialog programmatically?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206141419-Putting-messages-into-console-window-">How do I print messages in the console view?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206794265-Package-selector-dialog">How do I show the package selector dialog programmatically?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206800495-EditorTextField-in-3403-How-to-get-an-Editor-that-does-error-highlighting-">How do I provide syntax and error highlighting in a combo box editor?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206800405-How-can-i-run-some-code-when-a-ToolWindow-activates">How can I get notified when my tool window is activated?</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206146779-How-to-get-a-Close-button-in-an-own-Usage-View-">How can I provide Close and Rerun buttons in my Usage View window?</a></li><li><a href="https://stackoverflow.com/questions/51499884/how-to-display-the-sdk-list-in-a-jcombobox">How can I display the SDK list in a JComboBox?</a></li></ul><h4 id="General"><a href="#General" class="headerlink" title="General"></a>General</h4><ul><li><p><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206763335-Getting-active-project-">How do I get the currently active project outside of an AnAction?</a></p></li><li><p><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206792155-Detecting-frame-project-closing">How do I detect when a project is closing?</a></p></li><li><p><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206142959-Stack-Analyzer-extension">How can I implement a custom stack trace analyzer?</a></p></li><li><p><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206794095-Where-is-ApplicationComponent-state-stored-in-">Where is the state of an ApplicationComponent stored?</a></p></li><li><p><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206146969-how-to-open-a-project-">How do I open a project programmatically?</a></p></li><li><p><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206121889-How-to-get-the-folder-of-currenctly-selected-file">How do I get the folder of the currently selected file?</a></p></li><li><p><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206147039-JDOMExternalizable-and-encrypting-">How do I encrypt some values in the configuration data of my plugin?</a></p></li><li><p><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206762245-How-can-I-track-plugin-s-exceptions-/comments/206112345">How can I track exceptions from my plugin?</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> idea-plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境搭建——idea插件开发</title>
      <link href="/2020/01/19/idea-plugin/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94idea%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
      <url>/2020/01/19/idea-plugin/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94idea%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>idea的插件肯定就是用idea。<br>下载社区版或者专业版都可以，链接：<a href="https://www.jetbrains.com/idea/download/">https://www.jetbrains.com/idea/download/</a>。</p><h2 id="编译工具配置"><a href="#编译工具配置" class="headerlink" title="编译工具配置"></a>编译工具配置</h2><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>至少1.8或者以上的JDK版本。JDK的下载安装、配置自行处理。</p><h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><p>项目编译使用gradle，请自行安装配置gradle。<br>gradle下载地址：<a href="https://services.gradle.org/distributions/">https://services.gradle.org/distributions/</a></p><h3 id="启用idea的-Plugin-Devkit"><a href="#启用idea的-Plugin-Devkit" class="headerlink" title="启用idea的 Plugin Devkit"></a>启用idea的 Plugin Devkit</h3><p>在插件里面确认plugin devkit已经安装成功，如果没有则安装。</p><p><img src="/image/idea-plugin/1-7.png" alt="devkit"></p><h2 id="创建第一个插件项目"><a href="#创建第一个插件项目" class="headerlink" title="创建第一个插件项目"></a>创建第一个插件项目</h2><p>打开idea，从左上角的File里面创建一个gradle项目。</p><blockquote><p> File -&gt; New -&gt; Project…</p></blockquote><p><img src="/image/idea-plugin/1-1.png" alt="选中Java、Intellij Platfrorm Plugin"></p><p><strong>Java、Intellij Platform Plugin</strong>这两个是必须的，JDK至少<code>1.8</code>或者以上版本。**Kotlin(Java)**可选。继续下一步。</p><p><img src="/image/idea-plugin/1-2.png" alt="group"></p><p>输入GroupId，ArtifactId，继续下一步。</p><p><img src="/image/idea-plugin/1-3.png" alt="gradle设置"></p><p>设置自己安装的gradle。选中<code>Use auto-import</code>，JDK默认即可。继续下一步。</p><p><img src="/image/idea-plugin/1-4.png" alt="项目名称"></p><p>输入项目名称。其他默认即可。最后点击Finish，等待gradle自动下载项目依赖，如果下载很慢可以引入本地 Intellij SDK。</p><p>Intellij SDK下载：<a href="https://d2cico3c979uwg.cloudfront.net/com/jetbrains/intellij/idea/ideaIC/2019.1.4/ideaIC-2019.1.4.zip">https://d2cico3c979uwg.cloudfront.net/com/jetbrains/intellij/idea/ideaIC/2019.1.4/ideaIC-2019.1.4.zip</a></p><p>我下载的是和当前Idea同一个版本的SDK。然后修改<code>build.gradle</code>文件的里面的<code>repositories</code>标签内容，引入本地SDK。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">&#x27;/Users/ubuntuvim/software/sdk/ideaIC-2019.1.4.zip&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">&#x27;https://dl.bintray.com/jetbrains/intellij-plugin-service&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://cache-redirector.jetbrains.com/jetbrains.bintray.com/intellij-plugin-service&#x27;</span> &#125;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://cache-redirector.jetbrains.com/repo1.maven.org/maven2&#x27;</span> &#125;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://cache-redirector.jetbrains.com/jcenter.bintray.com&#x27;</span> &#125;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自定义的路径一定记得放在<code>mavenCentral()</code>的前面，下载的顺序是如果前面的URL已经能获取到SDK则后面的不再下载，由于SDK比较大，通过maven下载会很慢。自己另外下载之后直接引入即可。</p><p>等待gradle自动编译完之后可以看到gradle的命令。</p><p><img src="/image/idea-plugin/1-5.png" alt="gradle命令"></p><p>都配置好之后，创建一个简单的hello world程序验证环境是否搭建成功。</p><p>如下所示，创建一个简单的<code>Action</code>类，创建一个Plugin的类和普通类有所差别，在包上<code>右键 -&gt; New -&gt; Plugin Devkit -&gt; Action </code>。</p><p><img src="/image/idea-plugin/1-8.png" alt="Devkit"></p><p>简单设置一下Action的信息。</p><p><img src="/image/idea-plugin/1-9.png" alt="Action Class"></p><p>第一个红色框里面是自定义的Action类的名字；</p><p>第二个红色框设置的意思是新建的Action菜单放在Idea的<strong>Help</strong>菜单下；</p><p>第三个红色框意思是把新增的Action菜单放在<strong>Help</strong>菜单下的一个子菜单。</p><p>其他默认即可。</p><p>类的内容很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.idea.plugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.actionSystem.AnAction;</span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.actionSystem.AnActionEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>： 第一个测试Action</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ubuntuvim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@HomePage</span>： http://xcoding.tech</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020-01-20 00:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppPlugin</span> <span class="keyword">extends</span> <span class="title">AnAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(AnActionEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello my plugin...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Action创建好之后，<code>idea-test-plugin2/src/main/resources/META-INF/plugin.xml</code>项目下的这个文件中会自动增加以下配置信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Add your actions here --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">id</span>=<span class="string">&quot;com.ubuntuvim.idea.plugin&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ubuntuvim.idea.plugin.AppPlugin&quot;</span> <span class="attr">text</span>=<span class="string">&quot;my-plugin&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">description</span>=<span class="string">&quot;我的第一个plugin&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">add-to-group</span> <span class="attr">group-id</span>=<span class="string">&quot;HelpMenu&quot;</span> <span class="attr">anchor</span>=<span class="string">&quot;first&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后，我们尝试启动一个自定义的Action，看下会是一个什么样的效果，和期待有没有。</p><p>直接运行新建的Action，第一次运行会比较慢，等待gradle自动编译，可以看到以下运行日志。</p><p><img src="/image/idea-plugin/1-11.png" alt="run log"></p><p>运行完毕之后，会从新打开一个Idea窗口。新打开的窗口里面会包含了你自定义的Action，其实说白了就是自己扩展里IDE的功能。</p><p>新打开的Idea创建有可能是一个空的，你也可以直接打开一个本地已经创建过的项目。</p><p><img src="/image/idea-plugin/1-12.png" alt="open window"></p><p>可以看到在新打开的创建中，在<strong>Help</strong>菜单下多了一个自定义的子菜单，点击这个子菜单，此时不会有任何反应，因为我们并没有实现任何操作，只是打印了一个控制台日志。回到原来开发插件的窗口，可以在控制台上看到输出了<code>System.out</code>日志。</p><p><img src="/image/idea-plugin/1-14.png" alt="out log"></p><p>虽然很简单，但是起码验证了开发插件的环境是搭建成功了。另外，新打开的创建也是一个正常可以用的Idea窗口，你可以在里面创建、开发其他的项目。与正常的Idea窗口无差别。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> idea-plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/18/hello-world/"/>
      <url>/2020/01/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xxx is not in the sudoers file.This incident will be reported.的解决方法</title>
      <link href="/2020/01/18/Linux/xxx%20is%20not%20in%20the%20sudoers%20file.This%20incident%20will%20be%20reported.%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2020/01/18/Linux/xxx%20is%20not%20in%20the%20sudoers%20file.This%20incident%20will%20be%20reported.%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>1.切换到root用户下,怎么切换就不用说了吧,不会的自己百度去.</p><p>2.添加sudo文件的写权限,命令是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><p>3.编辑sudoers文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><p>找到这行 <code>root ALL=(ALL) ALL</code>,在他下面添加<code>xxx ALL=(ALL) ALL</code> (这里的<code>xxx</code>是你的用户名)</p><p>ps:这里说下你可以<code>sudoers</code>添加下面四行中任意一条</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">youuser            ALL&#x3D;(ALL)                ALL</span><br><span class="line">%youuser           ALL&#x3D;(ALL)                ALL</span><br><span class="line">youuser            ALL&#x3D;(ALL)                NOPASSWD: ALL</span><br><span class="line">%youuser           ALL&#x3D;(ALL)                NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>第一行:允许用户youuser执行sudo命令(需要输入密码).<br>第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).<br>第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.<br>第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.</p><p>4.撤销sudoers文件写权限,命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u-w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><p>这样普通用户就可以使用sudo了.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>增加用户并且授root权</title>
      <link href="/2020/01/18/Linux/%E5%A2%9E%E5%8A%A0%E7%94%A8%E6%88%B7%E5%B9%B6%E4%B8%94%E6%8E%88root%E6%9D%83/"/>
      <url>/2020/01/18/Linux/%E5%A2%9E%E5%8A%A0%E7%94%A8%E6%88%B7%E5%B9%B6%E4%B8%94%E6%8E%88root%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p>新建的用户但是没有权限的，需要授权。授权命令如下：</p><p>root用户登录系统。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ visodu</span><br></pre></td></tr></table></figure><p>这个命令修改的是<code>/etc/sudoers</code>。然后找到，<code>root ALL=(ALL) ALL</code>，参考再加一行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntuvim ALL&#x3D;(ALL) ALL</span><br></pre></td></tr></table></figure><p><code>ubuntuvim</code>为用户名。</p><p>查看是否添加成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><p>新增的用户在命令行可能无法删除，按Backspace删除的时候出现<code>^h</code>字符，需要用下面的命令设置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stty erase ^h</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac无法开机</title>
      <link href="/2020/01/18/Mac/Mac%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA/"/>
      <url>/2020/01/18/Mac/Mac%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<ol><li><p>有可能是电脑已经没有电了，充电再开机，或者是充电一会在开机</p></li><li><p>如果还是无法开机则尝试用组合键开机：option＋R＋command＋P＋电源键，按住几秒后可以开机了</p></li><li><p>另外一种按键方法是： shift＋control＋option＋电源键</p></li><li><p>尝试后还是无法开机请联系客服吧</p></li><li><p>还没开的话在插着电源线的情况下同时按下(左侧)Shift+Control+Option+Power，如果电源灯有闪，你再试试开机</p></li><li><p>强制退出 (Option-Command-Escape) </p></li><li><p>重新启动 (Control-Command-Power) </p></li><li><p>强制关机（按住电源按钮 10 秒钟） </p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac系统占用很大怎么办？</title>
      <link href="/2020/01/18/Mac/mac%E7%B3%BB%E7%BB%9F%E5%8D%A0%E7%94%A8%E5%BE%88%E5%A4%A7%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/"/>
      <url>/2020/01/18/Mac/mac%E7%B3%BB%E7%BB%9F%E5%8D%A0%E7%94%A8%E5%BE%88%E5%A4%A7%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="mac系统占用很大怎么办？"><a href="#mac系统占用很大怎么办？" class="headerlink" title="mac系统占用很大怎么办？"></a>mac系统占用很大怎么办？</h3><p>直接删除系统备份，瞬间释放很大很大空间。方法请看：<a href="https://www.zhihu.com/question/52784342/answer/288137913">Mac OS 系统占用储存空间太大怎么办？ - 林禹丞的回答 - 知乎 </a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> MacBook Pro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境变量配置错误时临时解救办法</title>
      <link href="/2020/01/18/Mac/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF%E6%97%B6%E4%B8%B4%E6%97%B6%E8%A7%A3%E6%95%91%E5%8A%9E%E6%B3%95/"/>
      <url>/2020/01/18/Mac/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF%E6%97%B6%E4%B8%B4%E6%97%B6%E8%A7%A3%E6%95%91%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>如果配置Mac环境变量时候不小心配置错误，使得无法使用系统命令时可以采用下面的方法解救。</p><p>1，在命令行中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;X11R6&#x2F;bin</span><br></pre></td></tr></table></figure><p>这样可以保证命令行命令暂时可以使用。命令执行完之后先不要关闭终端<br>或者<code>cd /usr/bin</code>下执行vi命令</p><p>2, 恢复<code>bash_profile</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~&#x2F;.bash_profile </span><br></pre></td></tr></table></figure><p>3, 很有可能是你的PATH 环境变量设置错误，比如 <code>$PATH</code> 漏了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH&#x3D;$PATH:$PATH1</span><br></pre></td></tr></table></figure><p>4, 立即生效，<code>source ~/.bash_profile</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建npm插件</title>
      <link href="/2020/01/18/NodeJS/%E5%88%9B%E5%BB%BAnpm%E6%8F%92%E4%BB%B6/"/>
      <url>/2020/01/18/NodeJS/%E5%88%9B%E5%BB%BAnpm%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h6 id="在github创建一个项目，比如创建名为randomNickname的项目，"><a href="#在github创建一个项目，比如创建名为randomNickname的项目，" class="headerlink" title="在github创建一个项目，比如创建名为randomNickname的项目，"></a>在<a href="https://github.com/">github</a>创建一个项目，比如创建名为<a href="https://github.com/ubuntuvim/randomNickname">randomNickname</a>的项目，</h6><p>这个代码库用户存放npm插件的代码。</p><h6 id="首先在npm官网申请账号，后面提交到npm官网需要用到。"><a href="#首先在npm官网申请账号，后面提交到npm官网需要用到。" class="headerlink" title="首先在npm官网申请账号，后面提交到npm官网需要用到。"></a>首先在npm<a href="https://www.npmjs.com/">官网</a>申请账号，后面提交到npm官网需要用到。</h6><h6 id="mkdir-npmjs"><a href="#mkdir-npmjs" class="headerlink" title="mkdir npmjs"></a><code>mkdir npmjs</code></h6><h6 id="cd-npmjs"><a href="#cd-npmjs" class="headerlink" title="cd npmjs"></a><code>cd npmjs</code></h6><h6 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a><code>npm init</code></h6><h6 id="根据提示输入相应的信息，可用参考如下设置。"><a href="#根据提示输入相应的信息，可用参考如下设置。" class="headerlink" title="根据提示输入相应的信息，可用参考如下设置。"></a>根据提示输入相应的信息，可用参考如下设置。</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">ubuntuvimdeMacBook-Pro:randomNichname ubuntuvim$ npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm help json` for definitive documentation on these fields</span><br><span class="line">and exactly what they do.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt; --save` afterwards to install a package and</span><br><span class="line">save it as a dependency in the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">name: (randomNichname)</span><br><span class="line">Sorry, name can no longer contain capital letters.</span><br><span class="line">name: (randomNichname) randomNichname</span><br><span class="line">Sorry, name can no longer contain capital letters.</span><br><span class="line">name: (randomNichname) y</span><br><span class="line">version: (1.0.0) 0.1.0</span><br><span class="line">description: Get the name of the three kingdoms.</span><br><span class="line">entry point: (index.js) y</span><br><span class="line">test command:</span><br><span class="line">git repository: https://github.com/ubuntuvim/randomNichname.git</span><br><span class="line">keywords: nickname,random</span><br><span class="line">author: ubuntuvim</span><br><span class="line">license: (ISC) ISC</span><br><span class="line">About to write to /Users/ubuntuvim/codes/my-npm-plugins/randomNichname/package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;y&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;Get the name of the three kingdoms.&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;y&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repository&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;git+https://github.com/ubuntuvim/randomNichname.git&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [</span><br><span class="line">    &quot;nickname&quot;,</span><br><span class="line">    &quot;random&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;author&quot;: &quot;ubuntuvim&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;bugs&quot;: &#123;</span><br><span class="line">    &quot;url&quot;: &quot;https://github.com/ubuntuvim/randomNichname/issues&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;homepage&quot;: &quot;https://github.com/ubuntuvim/randomNichname#readme&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this ok? (yes) yes</span><br><span class="line">ubuntuvimdeMacBook-Pro:randomNichname ubuntuvim$</span><br></pre></td></tr></table></figure><p>创建完成package.json之后你也可以根据实际情况做修改。</p><h6 id="创建npm插件所需的目录和文件，目录结构如下："><a href="#创建npm插件所需的目录和文件，目录结构如下：" class="headerlink" title="创建npm插件所需的目录和文件，目录结构如下："></a>创建npm插件所需的目录和文件，目录结构如下：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npmjs</span><br><span class="line">├─┬ lib</span><br><span class="line">│ └── npmjs.js</span><br><span class="line">├─┬ test</span><br><span class="line">│ └── test.js</span><br><span class="line">├── .gitignore</span><br><span class="line">├── .npmignore</span><br><span class="line">├── .travis.yml</span><br><span class="line">├── index.js</span><br><span class="line">├── LICENSE</span><br><span class="line">├── makefile</span><br><span class="line">├── package.json</span><br><span class="line">├── README.md</span><br></pre></td></tr></table></figure><p>这些文件的作用是：</p><ul><li>lib目录下存放业务逻辑文件</li><li>test目录下存放单元测试用例</li><li>.npmignore记录哪些文件不需要被发布到npmjs.org</li><li>.travis.yml是持续集成服务travis的描述文件</li><li>index.js是入口文件</li><li>makefile方便我们用make test进行测试</li><li>README.md是此module的描述和使用方法</li></ul><h6 id="编写插件代码"><a href="#编写插件代码" class="headerlink" title="编写插件代码"></a>编写插件代码</h6><p>主要代码直接放在<code>index.js</code>。比如本插件是用于获取随机的三国人物名称，代码如下(详细代码请从<a href="https://github.com/ubuntuvim/randomNickname/blob/master/index.js">github</a>下载)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  从1099个名字中获取任意名字</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="comment">//  一共1099个</span></span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="comment">//  获取随机名字</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getNickname</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//  取0~1099的随机数</span></span><br><span class="line">        <span class="keyword">var</span> random = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">1099</span>);</span><br><span class="line">        <span class="keyword">if</span> (random &gt;= <span class="number">1099</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;获取人名数组下标月结！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> arr[random];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exports</span>.getNickname = getNickname;</span><br><span class="line">  &#125;());</span><br></pre></td></tr></table></figure><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="built_in">require</span>(<span class="string">&#x27;../index&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> s = arr.getNickname();</span><br><span class="line"><span class="keyword">if</span> (s) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(s);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;The test does not pass...&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试。<br><code>node ./test/test.js</code></p><h6 id="在LICENSE文件中添加许可信息"><a href="#在LICENSE文件中添加许可信息" class="headerlink" title="在LICENSE文件中添加许可信息"></a>在LICENSE文件中添加许可信息</h6><p>许可内容请从<a href="https://github.com/ubuntuvim/randomNickname/blob/master/LICENSE">github</a>下载。</p><h6 id="编写使用文档README-md"><a href="#编写使用文档README-md" class="headerlink" title="编写使用文档README.md"></a>编写使用文档README.md</h6><p><strong>插件使用方式</strong></p><ol><li><p>安装插件<br><code>npm install randomNickname</code></p></li><li><p>使用插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = <span class="built_in">require</span>(<span class="string">&#x27;randomNickname&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> s = names.getNickname();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;得到的人物名字为： &#x27;</span> + s);</span><br></pre></td></tr></table></figure></li></ol><h6 id="提交代码到github"><a href="#提交代码到github" class="headerlink" title="提交代码到github"></a>提交代码到github</h6><p>步骤如下：</p><ul><li><code>git init</code></li><li><code>git remote add origin &lt;git远程URL&gt;</code></li><li><code>git add *</code></li><li><code>git commit -am &#39;描述信息&#39;</code></li><li><code>git push origin master</code><br><em>如果出现类似如下错误</em></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class="line">error: failed to push some refs to &#x27;https://github.com/ubuntuvim/randomNickname.git&#x27;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: &#x27;git pull ...&#x27;) before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br></pre></td></tr></table></figure><p>先更新合并再提交到远程代码库。</p><ul><li><code>git pull</code></li><li><code>git merge origin/master</code></li><li><code>git push origin/master</code></li></ul><h6 id="发布到npmjs官网"><a href="#发布到npmjs官网" class="headerlink" title="发布到npmjs官网"></a>发布到npmjs官网</h6><p>步骤如下：</p><ul><li><code>npm adduser</code>   (输入你在npmjs官网注册的账号和密码)</li><li><code>npm publish .</code></li></ul><p>如果出现错误：<br><code>no_perms Private mode enable, only admin can publish this module</code><br>执行下列代码重置后再执行<code>npm adduser</code>、<code>npm publish .</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http:&#x2F;&#x2F;registry.npmjs.org</span><br></pre></td></tr></table></figure><p>等待完成，看到如下信息说明发布成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ randomnickname@0.1.0</span><br></pre></td></tr></table></figure><p><em>如果你的代码修改了又需要重新发布到npmjs上，则首先修改<code>package.json</code>里的版本号，再执行<code>npm publish .</code>即可。</em></p><p>此时你可以到npmjs的个人中心中查看刚刚发布的插件。<br>比如我的个人中心<a href="https://www.npmjs.com/~ubuntuvim">https://www.npmjs.com/~ubuntuvim</a>。</p><p><strong>参考文献：</strong></p><ol><li><a href="http://segmentfault.com/a/1190000000491188">http://segmentfault.com/a/1190000000491188</a></li><li><a href="http://blog.csdn.net/liuxiao723846/article/details/46237289">http://blog.csdn.net/liuxiao723846/article/details/46237289</a></li><li><a href="http://www.lellansin.com/npm-publish-%E5%8F%91%E5%B8%83%E7%A4%BA%E4%BE%8B.html">http://www.lellansin.com/npm-publish-%E5%8F%91%E5%B8%83%E7%A4%BA%E4%BE%8B.html</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> Npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSL证书问题</title>
      <link href="/2020/01/18/Ruby/SSL%E8%AF%81%E4%B9%A6%E9%97%AE%E9%A2%98/"/>
      <url>/2020/01/18/Ruby/SSL%E8%AF%81%E4%B9%A6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby SSL_connect returned&#x3D;1 errno&#x3D;0 state&#x3D;SSLv3 read server certificate B:</span><br></pre></td></tr></table></figure><p>解决办法。</p><p>首先在这里下载证书(<a href="http://curl.haxx.se/ca/cacert.pem">http://curl.haxx.se/ca/cacert.pem</a>), 然后再环境变量里设置<code>SSL_CERT_FILE</code>这个环境变量，变量值为这个文件的路径。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>express获取参数的方法</title>
      <link href="/2020/01/18/NodeJS/express%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2020/01/18/NodeJS/express%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>最近本人在学习开发NodeJs，使用到express框架，对于网上的学习资料甚少，因此本人会经常在开发中做一些总结。</p><p>express获取参数有三种方法：官网介绍如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Checks route params (req.params), ex: &#x2F;user&#x2F;:id</span><br><span class="line">Checks query string params (req.query), ex: ?id&#x3D;12</span><br><span class="line">Checks urlencoded body params (req.body), ex: id&#x3D;</span><br></pre></td></tr></table></figure><p>1、例如：<code>127.0.0.1:3000/index</code>，这种情况下，我们为了得到<code>index</code>，我们可以通过使用<code>req.params</code>得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式；<br>2、例如：<code>127.0.0.1:3000/index?id=12</code>，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用<code>req.query.id</code>就可以获得，类似于PHP的get方法；</p><p>3、例如：<code>127.0.0.1：300/index</code>，然后post了一个<code>id=2</code>的值，这种方式是获取客户端post过来的数据，可以通过<code>req.body.id</code>获取，类似于PHP的post方法；</p>]]></content>
      
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Builder模式——设计模式</title>
      <link href="/2020/01/18/design-pattern/Builder%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/01/18/design-pattern/Builder%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="Builder模式"><a href="#Builder模式" class="headerlink" title="Builder模式"></a>Builder模式</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>构建对象时，如果碰到类有很多参数——其中很多参数类型相同而且很多参数可以为空时，推荐Builder模式来完成。当参数数量不多、类型不同而且都是必须出现时，通过增加代码实现Builder往往无法体现它的优势。在这种情况下，理想的方法是调用传统的构造函数。再者，如果不需要保持不变，那么就使用无参构造函数调用相应的set方法吧。</p><h4 id="普通方式，通过构造方法创建实例"><a href="#普通方式，通过构造方法创建实例" class="headerlink" title="普通方式，通过构造方法创建实例"></a>普通方式，通过构造方法创建实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.pattern.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Builder 模式 创建类实例方式:&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 1. 普通方式，通过构造方法创建 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 2. JavaBean方式创建&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 3. Builder 模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ubuntuvim</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必需属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String carBody;<span class="comment">//车身</span></span><br><span class="line">    <span class="keyword">private</span> String tyre;<span class="comment">//轮胎</span></span><br><span class="line">    <span class="keyword">private</span> String engine;<span class="comment">//发动机</span></span><br><span class="line">    <span class="keyword">private</span> String aimingCircle;<span class="comment">//方向盘</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可选属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String decoration;<span class="comment">//车内装饰品</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必备属性创建实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> carBody</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tyre</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> engine</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aimingCircle</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String carBody, String tyre, String engine, String aimingCircle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.carBody = carBody;</span><br><span class="line">        <span class="keyword">this</span>.tyre = tyre;</span><br><span class="line">        <span class="keyword">this</span>.engine = engine;</span><br><span class="line">        <span class="keyword">this</span>.aimingCircle = aimingCircle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加可选属性创建实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> carBody</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tyre</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> engine</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aimingCircle</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String carBody, String tyre, String engine, String aimingCircle, String decoration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.carBody = carBody;</span><br><span class="line">        <span class="keyword">this</span>.tyre = tyre;</span><br><span class="line">        <span class="keyword">this</span>.engine = engine;</span><br><span class="line">        <span class="keyword">this</span>.aimingCircle = aimingCircle;</span><br><span class="line">        <span class="keyword">this</span>.decoration = decoration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car [carBody=&quot;</span> + carBody + <span class="string">&quot;, tyre=&quot;</span> + tyre + <span class="string">&quot;, engine=&quot;</span> + engine + <span class="string">&quot;, aimingCircle=&quot;</span> + aimingCircle</span><br><span class="line">                + <span class="string">&quot;, decoration=&quot;</span> + decoration + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是最常见的、最普通的方式——通过构造方法传递属性，并创建实例。</p><p>简单使用main方法模拟调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.pattern.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过不同方式获取实例</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 普通方式，通过构造方法初始化属性，弊端：参数多，而且更重要的是参数的次序不能错</span></span><br><span class="line">        Car c = <span class="keyword">new</span> Car(<span class="string">&quot;carBody&quot;</span>, <span class="string">&quot;tyre&quot;</span>, <span class="string">&quot;engine&quot;</span>, <span class="string">&quot;aimingCircle&quot;</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式简单，但是参数多的情况传参麻烦，并且参数次序不能错，否则得到的实例不是自己想要的。</p><h4 id="JavaBean方式创建"><a href="#JavaBean方式创建" class="headerlink" title="JavaBean方式创建"></a>JavaBean方式创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.pattern.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Builder 模式 创建类实例方式:&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 1. 普通方式，通过构造方法创建 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 2. JavaBean方式创建&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 3. Builder 模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ubuntuvim</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car2</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必需属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String carBody;<span class="comment">// 车身</span></span><br><span class="line">    <span class="keyword">private</span> String tyre;<span class="comment">// 轮胎</span></span><br><span class="line">    <span class="keyword">private</span> String engine;<span class="comment">// 发动机</span></span><br><span class="line">    <span class="keyword">private</span> String aimingCircle;<span class="comment">// 方向盘</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可选属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String decoration;<span class="comment">// 车内装饰品</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCarBody</span><span class="params">(String carBody)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.carBody = carBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTyre</span><span class="params">(String tyre)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tyre = tyre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(String engine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAimingCircle</span><span class="params">(String aimingCircle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aimingCircle = aimingCircle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDecoration</span><span class="params">(String decoration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.decoration = decoration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car2 [carBody=&quot;</span> + carBody + <span class="string">&quot;, tyre=&quot;</span> + tyre + <span class="string">&quot;, engine=&quot;</span> + engine + <span class="string">&quot;, aimingCircle=&quot;</span> + aimingCircle</span><br><span class="line">                + <span class="string">&quot;, decoration=&quot;</span> + decoration + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.pattern.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过不同方式获取实例</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 普通方式，通过构造方法初始化属性，弊端：参数多，而且更重要的是参数的次序不能错</span></span><br><span class="line">        Car c = <span class="keyword">new</span> Car(<span class="string">&quot;carBody&quot;</span>, <span class="string">&quot;tyre&quot;</span>, <span class="string">&quot;engine&quot;</span>, <span class="string">&quot;aimingCircle&quot;</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. javabean方式，通过setter方法初始化属性</span></span><br><span class="line">        Car2 c2 = <span class="keyword">new</span> Car2();</span><br><span class="line">        c2.setCarBody(<span class="string">&quot;carBody2&quot;</span>);</span><br><span class="line">        c2.setTyre(<span class="string">&quot;tyre2&quot;</span>);</span><br><span class="line">        c2.setEngine(<span class="string">&quot;engine2&quot;</span>);</span><br><span class="line">        c2.setAimingCircle(<span class="string">&quot;aimingCircle2&quot;</span>);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供无参的构造函数，暴露一些公共的方法让用户自己去设置对象属性，这种方法较之第一种似乎增强了灵活度，用户可以根据自己的需要随意去设置属性。但是这种方法自身存在严重的缺点：</p><ol><li>因为构造过程被分到了几个调用中，在构造中 JavaBean 可能处于不一致的状态。类无法仅仅通过判断构造器参数的有效性来保证一致性。</li><li>参数无法校验，本例子中<code>carBody</code>、<code>tyre</code>、<code>engine</code>、<code>aimingCircle</code>这几个属性是必须的。Javabean的方式无法校验。</li></ol><h4 id="Builder模式-1"><a href="#Builder模式-1" class="headerlink" title="Builder模式"></a>Builder模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.pattern.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Builder 模式 创建类实例方式:&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 1. 普通方式，通过构造方法创建 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 2. JavaBean方式创建&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 3. Builder 模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ubuntuvim</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Car3</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必需属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String carBody;<span class="comment">// 车身</span></span><br><span class="line">    <span class="keyword">private</span> String tyre;<span class="comment">// 轮胎</span></span><br><span class="line">    <span class="keyword">private</span> String engine;<span class="comment">// 发动机</span></span><br><span class="line">    <span class="keyword">private</span> String aimingCircle;<span class="comment">// 方向盘</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可选属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String decoration;<span class="comment">// 车内装饰品</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  public void setCarBody(String carBody) &#123;</span></span><br><span class="line"><span class="comment">//      this.carBody = carBody;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  public void setTyre(String tyre) &#123;</span></span><br><span class="line"><span class="comment">//      this.tyre = tyre;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  public void setEngine(String engine) &#123;</span></span><br><span class="line"><span class="comment">//      this.engine = engine;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  public void setAimingCircle(String aimingCircle) &#123;</span></span><br><span class="line"><span class="comment">//      this.aimingCircle = aimingCircle;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  public void setDecoration(String decoration) &#123;</span></span><br><span class="line"><span class="comment">//      this.decoration = decoration;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必须的方法否则后面的`build()`方法无法把属性传递进来，&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 汽车指定某个制造商才能制造汽车，</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> builder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car3</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aimingCircle = builder.aimingCircle;</span><br><span class="line">        <span class="keyword">this</span>.carBody = builder.carBody;</span><br><span class="line">        <span class="keyword">this</span>.decoration = builder.decoration;</span><br><span class="line">        <span class="keyword">this</span>.engine = builder.engine;</span><br><span class="line">        <span class="keyword">this</span>.tyre = builder.tyre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 汽车不会自己生产自己，通常是汽车制造商Builder生产机车，</span></span><br><span class="line"><span class="comment">     * 汽车制造商要制造汽车，它必须拿到汽车一样的属性。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 必需属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String carBody;<span class="comment">// 车身</span></span><br><span class="line">        <span class="keyword">private</span> String tyre;<span class="comment">// 轮胎</span></span><br><span class="line">        <span class="keyword">private</span> String engine;<span class="comment">// 发动机</span></span><br><span class="line">        <span class="keyword">private</span> String aimingCircle;<span class="comment">// 方向盘</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 可选属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String decoration;<span class="comment">// 车内装饰品</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 制造商默认生产的汽车</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 为了能够链式调用，每个setter方法都返回this</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setCarBody</span><span class="params">(String carBody)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.carBody = carBody;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setTyre</span><span class="params">(String tyre)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.tyre = tyre;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setEngine</span><span class="params">(String engine)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.engine = engine;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setAimingCircle</span><span class="params">(String aimingCircle)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.aimingCircle = aimingCircle;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setDecoration</span><span class="params">(String decoration)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.decoration = decoration;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 制造商返回制造出来的汽车</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Car3 <span class="title">build</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.carBody == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;carBody不允许为空。&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.aimingCircle == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;aimingCircle不允许为空。&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.tyre == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;tyre不允许为空。&quot;</span>);</span><br><span class="line">            <span class="comment">// this就是制造出来的汽车，默认情况下都是宝马</span></span><br><span class="line">            <span class="comment">// 可以通过Builder提供的setter方法改变汽车的属性</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Car3(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car3 [carBody=&quot;</span> + carBody + <span class="string">&quot;, tyre=&quot;</span> + tyre + <span class="string">&quot;, engine=&quot;</span> + engine + <span class="string">&quot;, aimingCircle=&quot;</span> + aimingCircle</span><br><span class="line">                + <span class="string">&quot;, decoration=&quot;</span> + decoration + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.pattern.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 通过不同方式获取实例</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 普通方式，通过构造方法初始化属性，弊端：参数多，而且更重要的是参数的次序不能错</span></span><br><span class="line">        Car c = <span class="keyword">new</span> Car(<span class="string">&quot;carBody&quot;</span>, <span class="string">&quot;tyre&quot;</span>, <span class="string">&quot;engine&quot;</span>, <span class="string">&quot;aimingCircle&quot;</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. javabean方式，通过setter方法初始化属性</span></span><br><span class="line">        Car2 c2 = <span class="keyword">new</span> Car2();</span><br><span class="line">        c2.setCarBody(<span class="string">&quot;carBody2&quot;</span>);</span><br><span class="line">        c2.setTyre(<span class="string">&quot;tyre2&quot;</span>);</span><br><span class="line">        c2.setEngine(<span class="string">&quot;engine2&quot;</span>);</span><br><span class="line">        c2.setAimingCircle(<span class="string">&quot;aimingCircle2&quot;</span>);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. Builder模式，设置汽车必须属性</span></span><br><span class="line">        Car3 c32 = <span class="keyword">new</span> Car3.Builder()</span><br><span class="line">                .setAimingCircle(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line">                .setCarBody(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line">                .setEngine(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line">                .setTyre(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(c32);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. Builder模式，设置汽车必须属性+可选属性</span></span><br><span class="line">        Car3 c33 = <span class="keyword">new</span> Car3.Builder()</span><br><span class="line">                .setAimingCircle(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line">                .setCarBody(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line">                .setEngine(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line">                .setTyre(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line">                .setDecoration(<span class="string">&quot;可选属性：高级音响&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(c33);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. Builder模式，没有设置任何属性，属性校验不通过</span></span><br><span class="line">        Car3 c3 = <span class="keyword">new</span> Car3.Builder().build();</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先参数的设置包含了javabean的特点，不需要关注参数的次序并且可以链式设置，代码更优雅；其次，可以校验一些必须的参数。</p><p>以上就是Builder模式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ember-Teach教程目录</title>
      <link href="/2020/01/18/ember-teach/Ember-Teach%E6%95%99%E7%A8%8B%E7%9B%AE%E5%BD%95/"/>
      <url>/2020/01/18/ember-teach/Ember-Teach%E6%95%99%E7%A8%8B%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="ember-teach"><a href="#ember-teach" class="headerlink" title="ember-teach"></a>ember-teach</h1><p>Ember Teach博客文章md文件。网址：<a href="http://xcoding.tech/tags/Emberjs/">http://xcoding.tech/tags/Emberjs/</a></p><p><strong>目录</strong></p><h2 id="第一章-对象模型"><a href="#第一章-对象模型" class="headerlink" title="第一章 对象模型"></a>第一章 对象模型</h2><ol><li><a href="http://xcoding.tech/2018/08/04/ember-teach/The%20Object%20Model/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%81%E7%BB%A7%E6%89%BF">类的定义、初始化、继承</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/The%20Object%20Model/%E7%B1%BB%E7%9A%84%E6%89%A9%E5%B1%95%EF%BC%88reopen%EF%BC%89">类的扩展（reopen）</a></li><li>[计算属性（compute properties）](<a href="http://xcoding.tech/2018/08/04/ember-teach/The%20Object%20Model/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%EF%BC%88compute">http://xcoding.tech/2018/08/04/ember-teach/The%20Object%20Model/计算属性（compute</a> properties）)</li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/The%20Object%20Model/%E8%A7%82%E5%AF%9F%E8%80%85%EF%BC%88observer%EF%BC%89">观察者（observer）</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/The%20Object%20Model/%E7%BB%91%E5%AE%9A%EF%BC%88bingding%EF%BC%89">绑定（bingding）</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/The%20Object%20Model/%E6%9E%9A%E4%B8%BE%EF%BC%88enumerables%EF%BC%89">枚举（enumerables）</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/The%20Object%20Model/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%B0%8F%E7%BB%93">对象模型小结</a></li></ol><h2 id="第二章-模板"><a href="#第二章-模板" class="headerlink" title="第二章 模板"></a>第二章 模板</h2><ol><li><a href="http://xcoding.tech/2018/08/04/ember-teach/templetes/handlebars%E5%9F%BA%E7%A1%80">handlebars基础</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/templetes/handlebars%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F">handlebars条件表达式</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/templetes/handlebars%E9%81%8D%E5%8E%86%E6%A0%87%E7%AD%BE">handlebars遍历标签</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/templetes/handlebars%E6%98%BE%E7%A4%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%94%AE">handlebars显示对象的键</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/templetes/handlebars%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A">handlebars属性绑定</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/templetes/link-to%20helper">link-to%20helper</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/templetes/%E7%95%AA%E5%A4%96%E7%AF%87%EF%BC%8C%E8%B7%AF%E7%94%B1%E3%80%81%E6%A8%A1%E6%9D%BF%E7%9A%84%E6%89%A7%E8%A1%8C%E3%80%81%E6%B8%B2%E6%9F%93%E9%A1%BA%E5%BA%8F">番外篇，路由、模板的执行、渲染顺序</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/templetes/action%20helper">action%20helper</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/templetes/%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0">表单元素</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/templetes/%E8%B0%83%E8%AF%95%E5%8A%A9%E6%89%8B">调试助手</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/templetes/%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E5%8A%A9%E6%89%8B">工具类的助手</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/templetes/%E6%A8%A1%E6%9D%BF%E5%B0%8F%E7%BB%93">模板小结</a></li></ol><h2 id="第三章-路由"><a href="#第三章-路由" class="headerlink" title="第三章 路由"></a>第三章 路由</h2><ol><li><a href="http://xcoding.tech/2018/08/04/ember-teach/routing/%E8%B7%AF%E7%94%B1%E5%AE%9A%E4%B9%89">路由定义</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/routing/%E6%8C%87%E5%AE%9A%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%85%B3%E8%81%94%E7%9A%84%E6%A8%A1%E5%9E%8B">指定与路由关联的模型</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/routing/%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93">模板渲染</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/routing/%E8%B7%AF%E7%94%B1%E9%87%8D%E5%AE%9A%E5%90%91">路由重定向</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/routing/%E8%B7%AF%E7%94%B1%E5%88%87%E6%8D%A2%E7%9A%84%E9%98%B2%E6%AD%A2%E5%92%8C%E9%87%8D%E8%AF%95">路由切换的防止和重试</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/routing/loading%E3%80%81error%E5%AD%90%E8%B7%AF%E7%94%B1">loading、error子路由</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/routing/%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0">查询参数</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/routing/%E5%BC%82%E6%AD%A5%E8%B7%AF%E7%94%B1">异步路由</a></li></ol><h2 id="第四章-组件"><a href="#第四章-组件" class="headerlink" title="第四章 组件"></a>第四章 组件</h2><ol><li><a href="http://xcoding.tech/2018/08/04/ember-teach/components/%E7%BB%84%E4%BB%B6%E5%AE%9A%E4%B9%89">组件定义</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/components/%E5%B1%9E%E6%80%A7%E4%BC%A0%E9%80%92">属性传递</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/components/%E5%8C%85%E8%A3%B9%E5%86%85%E5%AE%B9">包裹内容</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/components/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85%E8%A3%B9%E7%BB%84%E4%BB%B6%E7%9A%84HTML%E6%A0%87%E7%AD%BE">自定义包裹组件的HTML标签</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/components/%E5%A4%84%E7%90%86%E4%BA%8B%E4%BB%B6">处理事件</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/components/action%E8%A7%A6%E5%8F%91%E5%8F%98%E5%8C%96">action触发变化</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/components/%E7%BB%84%E4%BB%B6%E5%B0%8F%E8%8A%82">组件小节</a></li></ol><h2 id="第五章-控制器"><a href="#第五章-控制器" class="headerlink" title="第五章 控制器"></a>第五章 控制器</h2><ol><li><a href="http://xcoding.tech/2018/08/04/ember-teach/controllers/%E6%8E%A7%E5%88%B6%E5%99%A8%EF%BC%88controller%EF%BC%89">控制器（controller）</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/controllers/%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB">管理控制器之间的依赖关系</a></li></ol><h2 id="第六章-模型"><a href="#第六章-模型" class="headerlink" title="第六章 模型"></a>第六章 模型</h2><ol><li><a href="http://xcoding.tech/2018/08/04/ember-teach/models/model%E7%AE%80%E4%BB%8B/">model简介</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/models/%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B">定义模型</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/models/%E6%9F%A5%E8%AF%A2%E8%AE%B0%E5%BD%95">查询记录</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/models/%E6%96%B0%E5%BB%BA%E3%80%81%E6%9B%B4%E6%96%B0%E3%80%81%E5%88%A0%E9%99%A4%E8%AE%B0%E5%BD%95">新建、更新、删除记录</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/models/%E8%AE%BE%E7%BD%AE%E8%AE%B0%E5%BD%95%E5%88%B0Store">设置记录到Store</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/models/model%E7%9A%84%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%E5%A4%84%E7%90%86">model的关联关系处理</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/models/%E5%85%83%E6%95%B0%E6%8D%AE">元数据</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/models/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%82%E9%85%8D%E5%99%A8">自定义适配器</a></li><li><a href="http://xcoding.tech/2018/08/04/ember-teach/models/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%8F%B7%E5%99%A8">自定义序列号器</a></li></ol><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ol><li><a href="http://blog.ddlisting.com/2016/03/29/ember-jsxue-xi-xiang-mu-yuan-ma-fa-bu/">天天清单源码发布…啦…啦…………</a></li><li><a href="https://github.com/ubuntuvim/my_emberjs_code">博客演示源码</a></li><li><a href="https://github.com/ubuntuvim/library-app">如何构建一个复杂的Ember.js项目_源码</a></li></ol><p>博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！如果你觉得博文对你有点用，给我点个赞吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Emberjs教程目录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>addon收集</title>
      <link href="/2020/01/18/ember-teach/ember.js%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84addon/"/>
      <url>/2020/01/18/ember-teach/ember.js%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84addon/</url>
      
        <content type="html"><![CDATA[<p>本文收集了开发过程中最常用的ember addon，如果你发现了好用的addon，欢迎提pull  requests（地址：<a href="https://github.com/emberjschina/ember-teach/pulls">https://github.com/emberjschina/ember-teach/pulls</a>）或者在文章下面给我留言。 本文收集</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emberjs常见错误集</title>
      <link href="/2020/01/18/ember-teach/emberjs%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E9%9B%86/"/>
      <url>/2020/01/18/ember-teach/emberjs%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p><strong>独乐乐不如众乐乐。</strong></p><p>你踩的坑很可能后来者也回踩！拯救菜鸟人人有着！！</p><p>本篇为<code>Ember.js</code>开发者汇总常见问题，比如浏览器兼容性问题、组件使用等。大部分内容都摘了于<a href="http://stackoverflow.com/search?q=ember.js"><code>stackoverflow</code></a>和<a href="http://discuss.emberjs.com/"><code>emberjs discuss</code></a>。</p><p><strong>1. 浏览器兼容性支持</strong></p><p><a href="http://stackoverflow.com/questions/9873744/ember-js-browser-support">emberjs browser support</a></p><p><strong>2. 部署服务器后刷新出现404问题</strong></p><p>如果你的项目使用命令<code>ember build --prod</code>打包后部署到服务器上，进入首页没问题，并且在首页刷新也没问题。但是进入某个子路由后再刷新页面就会出现<code>404</code>错误。但是这个错误在开发环境却没有任何问题。这是由于服务器设置的问题。以nginx为例。只需要修改：<code>nginx/conf/vhosts/default.conf</code>即可_配置文件路由要根据自己nginx路径为准_。在此配置文件中加入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">        rewrite ^ &#x2F;index.html break;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location &#x2F;assets&#x2F; &#123;</span><br><span class="line">        # do nothing and let nginx handle this as usual</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参考网址：<a href="http://discuss.emberjs.com/t/how-to-serve-all-routes-on-a-production-server-exactly/6372/2">http://discuss.emberjs.com/t/how-to-serve-all-routes-on-a-production-server-exactly/6372/2</a></p><p>还有另外一种更加简单的解决办法：直接在<code>router.js</code>设置<code>location</code>属性为<code>hash</code>即可。更多解释请看官网教程<a href="http://emberjs.com/api/modules/ember-routing.html">EMBER-ROUTING MODULE</a></p><p><strong>3. 如何修改使用命令<code>ember build --prod</code>打包后的静态文件的名字，每个名字中会自动生成一个hash值一个类似于md5加密后的密文。</strong></p><p><strong>4. 项目安装出错，报错信息为无法访问github</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Error creating new application. Removing generated directory `./super-rentals`</span><br><span class="line">Failed to execute <span class="string">&quot;git ls-remote --tags --heads https://github.com/ember-cli/ember-cli-shims.git&quot;</span>, <span class="built_in">exit</span> code of <span class="comment">#128</span></span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/ember-cli/ember-cli-shims.git/&#x27;</span>: Failed to connect to github.com port 443: Connection refus</span><br><span class="line">ed</span><br><span class="line"></span><br><span class="line">Error: Failed to execute <span class="string">&quot;git ls-remote --tags --heads https://github.com/ember-cli/ember-cli-shims.git&quot;</span>, <span class="built_in">exit</span> code of <span class="comment">#128</span></span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/ember-cli/ember-cli-shims.git/&#x27;</span>: Failed to connect to github.com port 443: Connection refus</span><br><span class="line">ed</span><br><span class="line"></span><br><span class="line">    at createError (D:\Program Files\nodejs\node_global\node_modules\ember-cli\node_modules\bower\lib\util\createError.js:4:15)</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (D:\Program Files\nodejs\node_global\node_modules\ember-cli\node_modules\bower\lib\util\cmd.js:102:21)</span><br><span class="line">    at emitTwo (events.js:87:13)</span><br><span class="line">    at ChildProcess.emit (events.js:172:7)</span><br><span class="line">    at maybeClose (internal[擦汗]ild_process.js:827:16)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (internal[擦汗]ild_process.js:211:5)</span><br></pre></td></tr></table></figure><p>解决办法：直接从github下载缺失的依赖包，比如上述错误是缺少<code>ember-cli-shims</code>，可以尝试直接从<code>https://github.com/ember-cli/ember-cli-shims.git</code>下载，然后复制到<code>bower_components</code>目录之下。</p><p><strong>5. 项目启动出现’import’ is only available in ES6 (use ‘eversion: 6’)错误</strong></p><p>错误详细请看下图：</p><p><img src="http://blog.ddlisting.com/content/images/2016/08/1.png" alt="&#39;import&#39; is only available in ES6 (use &#39;eversion: 6&#39;)"></p><p>解决办法：</p><ol><li>项目下缺少文件<code>.jshintrc</code>，可以从其他ember项目直接复制过来</li><li>重新安装项目依赖，安装命令：<code>npm install</code>和<code>bower install</code></li></ol><p>然后重启项目即可。</p><p>参考网址：<a href="https://github.com/ember-cli/ember-cli/issues/1418">https://github.com/ember-cli/ember-cli/issues/1418</a></p><p><strong>欢迎补充</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强制 Google.com 域名使用 HTTPS（SSL）</title>
      <link href="/2020/01/18/fq/%E5%BC%BA%E5%88%B6%20Google.com%20%E5%9F%9F%E5%90%8D%E4%BD%BF%E7%94%A8%20HTTPS%EF%BC%88SSL%EF%BC%89/"/>
      <url>/2020/01/18/fq/%E5%BC%BA%E5%88%B6%20Google.com%20%E5%9F%9F%E5%90%8D%E4%BD%BF%E7%94%A8%20HTTPS%EF%BC%88SSL%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="http://laod.cn/hosts/suggestions-for-google-hosts-https-ssl.html">http://laod.cn/hosts/suggestions-for-google-hosts-https-ssl.html</a></p><p>配合 Google Hosts 的推荐操作<br>最近发现好多人说谷歌学术访问不了了，而我发现他们绝大多数都使用的是http访问，而不是https（SSL加密），如 <a href="http://scholar.google.com/">http://scholar.google.com</a> 肯定打不开，而 <a href="https://scholar.google.com/">https://scholar.google.com</a> 却正常，为了保证您能更顺利的使用 Google 在线服务，我们推荐您按照以下的步骤进行一些设置。</p><p>以下的步骤将以 Chrome 浏览器为例。</p><p>强制 Google.com 域名使用 HTTPS（SSL）-老D</p><p>虽然您可以随时自行添加 HTTPS 的前缀，但是在某些情况下网页总是会自动跳到没有加密的状态，这些状态可能出现在 Google 各个网页之间的跳转，以及搜索结果链接点击之后，这会影响您的正常使用体验，因此我们建议您强制 HTTPS 连接。</p><p>在 Chrome 浏览器上输入链接 chrome://net-internals/#hsts （可复制此地址粘贴到地址栏），回车。</p><p>在 Domain 栏里，输入 google.com ，并勾选下面的两个复选框，点击 “Add” 按钮即可。</p><p>强制 Google.com 域名使用 HTTPS（SSL）-老D</p><p>此时，您无需每次在因为跳回非加密连接中断后手动添加 HTTPS 前缀。</p><p>强制 Google.com.hk 域名使用 HTTPS<br>考虑到国内用到最多的是 google.com.hk，您需要对此域名同样增加此规则。</p><p>重复上面描述的操作，唯一的不同是，请在 Domain 栏里输入 google.com.hk 。</p><p>同理，如果你喜欢用google.com就设置为：google.com</p><p>强制 Google 网页快照使用 HTTPS<br>默认情况下，Google 网页快照是以非加密的 HTTP 连接打开的，这将导致它直接无法连接。要改变这一情况，请为此快照域名也添加强制 HTTPS 的规则。</p><p>重复上面描述的操作，唯一的不同是，请在 Domain 栏里输入 googleusercontent.com 。</p><p>强制 Google APIs 使用 HTTPS<br>某些网站加载 Google CDN 的方式可能是普通的 HTTP 连接。使用此方法强制转为 HTTPS 连接。</p><p>重复上面描述的操作，唯一的不同是，请在 Domain 栏里输入 googleapis.com 。</p><p>对于其他的浏览器<br>（个人推荐使用Chrome 浏览器）</p><p>请在对应浏览器的插件目录中查找类似 “HTTPS Everywhere” 的插件，它将自动帮助您强制所有可能的 HTTPS 连接。</p><p>如何撤销上述更改<br>倘若您想要撤销上述变更，例如您想要取消对 Google.com 的强制 HTTPS 连接，请同样前往 chrome://net-internals/#hsts，这一次，在下方的 “Delete Domain” 区域里，在 Domain 栏里输入您想要撤销规则的域名（例如 google.com），并点击 “Delete” 按钮即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何从根本解决hexo不兼容{{}}标签问题</title>
      <link href="/2020/01/18/hexo/%E5%A6%82%E4%BD%95%E4%BB%8E%E6%A0%B9%E6%9C%AC%E8%A7%A3%E5%86%B3hexo%E4%B8%8D%E5%85%BC%E5%AE%B9%7B%7B%7D%7D%E6%A0%87%E7%AD%BE%E9%97%AE%E9%A2%98/"/>
      <url>/2020/01/18/hexo/%E5%A6%82%E4%BD%95%E4%BB%8E%E6%A0%B9%E6%9C%AC%E8%A7%A3%E5%86%B3hexo%E4%B8%8D%E5%85%BC%E5%AE%B9%7B%7B%7D%7D%E6%A0%87%E7%AD%BE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>如果你的博客是使用github+hexo搭建的，很可能也遇到过由于<code>nunjucks</code>模板标签导致MD文件解析报错的问题，常见问题如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">15:07:29.010 FATAL Something is wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Template render error: (unknown path) [Line 37, Column 81]</span><br><span class="line">  expected variable end</span><br><span class="line">    at Object._prettifyError (/Users/ubuntuvim/git/xcoding/node_modules/nunjucks/src/lib.js:36:11)</span><br><span class="line">    at Template.render (/Users/ubuntuvim/git/xcoding/node_modules/nunjucks/src/environment.js:524:21)</span><br><span class="line">    at Environment.renderString (/Users/ubuntuvim/git/xcoding/node_modules/nunjucks/src/environment.js:362:17)</span><br><span class="line">    at Promise (/Users/ubuntuvim/git/xcoding/node_modules/hexo/lib/extend/tag.js:66:9)</span><br><span class="line">    at Promise._execute (/Users/ubuntuvim/git/xcoding/node_modules/bluebird/js/release/debuggability.js:303:9)</span><br><span class="line">    at Promise._resolveFromExecutor (/Users/ubuntuvim/git/xcoding/node_modules/bluebird/js/release/promise.js:483:18)</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Unhandled rejection Template render error: (unknown path) [Line <span class="number">10</span>, Column <span class="number">95</span>]</span><br><span class="line">  unexpected token: #</span><br><span class="line">    at <span class="built_in">Object</span>._prettifyError (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/nunjucks/src/lib.js:<span class="number">36</span>:<span class="number">11</span>)</span><br><span class="line">    at Template.render (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/nunjucks/src/environment.js:<span class="number">524</span>:<span class="number">21</span>)</span><br><span class="line">    at Environment.renderString (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/nunjucks/src/environment.js:<span class="number">362</span>:<span class="number">17</span>)</span><br><span class="line">    at <span class="built_in">Promise</span> (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/hexo/lib/extend/tag.js:<span class="number">66</span>:<span class="number">9</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._execute (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/bluebird/js/release/debuggability.js:<span class="number">303</span>:<span class="number">9</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._resolveFromExecutor (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/bluebird/js/release/promise.js:<span class="number">483</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/bluebird/js/release/promise.js:<span class="number">79</span>:<span class="number">10</span>)</span><br><span class="line">    at Tag.render (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/hexo/lib/extend/tag.js:<span class="number">64</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Object</span>.tagFilter [<span class="keyword">as</span> onRenderEnd] (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/hexo/lib/hexo/post.js:<span class="number">230</span>:<span class="number">16</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>.then.then.result (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/hexo/lib/hexo/render.js:<span class="number">65</span>:<span class="number">19</span>)</span><br><span class="line">    at tryCatcher (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/bluebird/js/release/util.js:<span class="number">16</span>:<span class="number">23</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromiseFromHandler (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/bluebird/js/release/promise.js:<span class="number">512</span>:<span class="number">31</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/bluebird/js/release/promise.js:<span class="number">569</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/bluebird/js/release/promise.js:<span class="number">614</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/bluebird/js/release/promise.js:<span class="number">693</span>:<span class="number">18</span>)</span><br><span class="line">    at Async._drainQueue (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/bluebird/js/release/<span class="keyword">async</span>.js:<span class="number">133</span>:<span class="number">16</span>)</span><br><span class="line">    at Async._drainQueues (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/bluebird/js/release/<span class="keyword">async</span>.js:<span class="number">143</span>:<span class="number">10</span>)</span><br><span class="line">    at Immediate.Async.drainQueues (<span class="regexp">/Users/u</span>buntuvim/git/xcoding/node_modules/bluebird/js/release/<span class="keyword">async</span>.js:<span class="number">17</span>:<span class="number">14</span>)</span><br><span class="line">    at runCallback (timers.js:<span class="number">651</span>:<span class="number">20</span>)</span><br><span class="line">    at tryOnImmediate (timers.js:<span class="number">624</span>:<span class="number">5</span>)</span><br><span class="line">    at processImmediate [<span class="keyword">as</span> _immediateCallback] (timers.js:<span class="number">596</span>:<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>出现上述原因都是因为你的Markdown文件中有标签与<code>nunjucks</code>模板引擎的标签冲突了，比如<code>{{}}`，`{#`， `{%`，这些标签都是模板引擎的，如果Markdown文件中有这些标签，那么在解析的是就会把Markdown中的标签动态解析了。通常情况下是不允许的。有关模板引擎nunjucks更多相关信息请转到[https://mozilla.github.io/nunjucks/cn/getting-started.html](https://mozilla.github.io/nunjucks/cn/getting-started.html)在hoxe的官网上有很多[相关的提问](https://github.com/hexojs/hexo/issues?utf8=%E2%9C%93&q=unexpected+token)，上面也提供了解决方案（本文的方案1），但是都不太好。## 处理方案1特别是你执行`hexo g`命令的时候就会提示Markdown文件解析错误。网上很多方法都是使用如下标签处理。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;name&#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>但是治标不治本啊，如果是用这个标签处理，那么你后续的Markdown文件内容但凡是包含`{{}}</code>或者<code>{{#}}</code>等等这些标签的内容都会解析失败，那么有什么好的处理方案呢？</p><h2 id="处理方案2"><a href="#处理方案2" class="headerlink" title="处理方案2"></a>处理方案2</h2><p>答案是有的，我们可以直接修改<code>nunjucks</code>模板的源代码，找到如下文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules&#x2F;nunjucks&#x2F;src&#x2F;lexer.js</span><br></pre></td></tr></table></figure><p>在文件的开头可以看到如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lib = <span class="built_in">require</span>(<span class="string">&#x27;./lib&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> whitespaceChars = <span class="string">&quot; \n\t\r\xA0&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> delimChars = <span class="string">&#x27;()[]&#123;&#125;%*-+~/#,:|.&lt;&gt;=!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> intChars = <span class="string">&#x27;0123456789&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> BLOCK_START = <span class="string">&#x27;&#123;%&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> BLOCK_END = <span class="string">&#x27;%&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> VARIABLE_START = <span class="string">&#x27;&#123;$&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> VARIABLE_END = <span class="string">&#x27;$&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> COMMENT_START = <span class="string">&#x27;&#123;@&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> COMMENT_END = <span class="string">&#x27;@&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> TOKEN_STRING = <span class="string">&#x27;string&#x27;</span>;</span><br></pre></td></tr></table></figure><p>可以直接改了这些渲染标签，比如我的Markdown文件中就是需要显示<code>{{name}}</code>这一类代码。那么你可以这么做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> VARIABLE_START = <span class="string">&#x27;&#123;$&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> VARIABLE_END = <span class="string">&#x27;$&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>把模板引擎的占位符修改为其他字符之后，这样模板解析的时候就不会跟你的Markdown内容冲突了，而且是对所有Markdown文件都有效的。</p><p>但是需要注意的时候，如果你在项目下执行<code>npm install</code>更新<code>nunjucks</code>模板，那么你修改的<code>node_modules/nunjucks/src/lexer.js</code>会被还原，需要重新修改一遍。<br>但是相对于每个Markdown都修改还是有很大好处的。</p><h2 id="搜索、RSS插件同步修改"><a href="#搜索、RSS插件同步修改" class="headerlink" title="搜索、RSS插件同步修改"></a>搜索、RSS插件同步修改</h2><p>如果你的博客使用<code>hexo-generator-feed</code>或者<code>hexo-generator-search</code>或者是其他依赖于hexo的插件，那么你也需要同步修改这些插件的模板处理标签。<br>比如<code>hexo-generator-search</code>这个插件，通常是用于搜索，比如本站的搜索功能，这些插件也是依赖于<code>nunjucks</code>模板的，所以你也要修改他们的源代码，一搜索插件为例：</p><p>修改如下文件的标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules&#x2F;hexo-generator-search&#x2F;templates&#x2F;search.xml</span><br></pre></td></tr></table></figure><p>把文件内容里的<code>{</code>改为<code>{$</code>即可，这个修改是根据你前面的<code>nunjucks</code>修改而定的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">search</span>&gt;</span> </span><br><span class="line">  &#123;% if posts %&#125;</span><br><span class="line">    &#123;% for post in posts.toArray() %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;$ post.title $&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;$ (url + post.path) | uriencode $&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>&#123;$ (url + post.path) | uriencode $&#125;<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">content</span> <span class="attr">type</span>=<span class="string">&quot;html&quot;</span>&gt;</span>&lt;![CDATA[&#123;$ post.content | noControlChars | safe $&#125;]]&gt;<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">      &#123;% if post.categories and post.categories.length&gt;0 %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">categories</span>&gt;</span></span><br><span class="line">          &#123;% for cate in post.categories.toArray() %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">category</span>&gt;</span> &#123;$ cate.name $&#125; <span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">categories</span>&gt;</span></span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">      &#123;% if post.tags and post.tags.length&gt;0 %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tags</span>&gt;</span></span><br><span class="line">            &#123;% for tag in post.tags.toArray() %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tag</span>&gt;</span> &#123;$ tag.name $&#125; <span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tags</span>&gt;</span></span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% if pages %&#125;</span><br><span class="line">    &#123;% for page in pages.toArray() %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;$ page.title $&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;$ (url + page.path) | uriencode $&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>&#123;$ (url + page.path) | uriencode $&#125;<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">content</span> <span class="attr">type</span>=<span class="string">&quot;html&quot;</span>&gt;</span>&lt;![CDATA[&#123;$ page.content | noControlChars | safe $&#125;]]&gt;<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">search</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他插件处理方法类似，找到模板解析标签全局修改即可。</p><h2 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h2><p>提供一个一劳永逸的方案，修改项目的<code>package.json</code>文件，把<code>hexo-generator-feed</code>、<code>hexo-generator-search</code>改为我重新处理过的插件即可。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;xcoding&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;3.7.1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">//…… 其他省略</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-feed-cst&quot;</span>: <span class="string">&quot;^0.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-search-cst&quot;</span>: <span class="string">&quot;^0.1.0&quot;</span>,</span><br><span class="line">    <span class="comment">//…… 其他省略</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完<code>package.json</code>之后执行命令<code>npm install</code>重新安装依赖。安装完毕后重新启动hexo。这两个插件相关的配置都不需要做任何修改，也不用担心查询更新后被覆盖。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>junit-jacoco代码覆盖测试</title>
      <link href="/2020/01/18/junit-jacoco/junit-jacoco%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/01/18/junit-jacoco/junit-jacoco%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="所需软件、jar"><a href="#所需软件、jar" class="headerlink" title="所需软件、jar"></a>所需软件、jar</h4><ul><li>Junit，单元测试依赖<a href="http://junit.org/">Junit</a></li><li>jacoco，用于检测覆盖率，官方网站<a href="https://www.jacoco.org/jacoco/">https://www.jacoco.org/jacoco/</a>，下载jar包</li><li>eclipse，在elipse上安装覆盖率运行的插件<a href="https://www.jacoco.org/installation.html">EclEmma</a>，在eclipse的 应用商店直接搜索<code>EclEmma</code>，第一个就是。安装成功之后在java类右键有一个选项是<code>Coverage As</code>。</li></ul><h3 id="创建java项目"><a href="#创建java项目" class="headerlink" title="创建java项目"></a>创建java项目</h3><p><img src="/image/blog-image/18120601.png" alt="项目结构"></p><p><code>src/java</code>和<code>test/java</code>都是资源目录。</p><h3 id="增加依赖jar"><a href="#增加依赖jar" class="headerlink" title="增加依赖jar"></a>增加依赖jar</h3><p>在项目根目录下新建目录<code>jacocolib</code>。复制从Junit、jacoco官网下载的jar文件。文件如下：</p><ul><li>hamcrest-core-1.3.jar</li><li>jacocoant.jar</li><li>junit-4.12.jar</li></ul><p>这些jar可以直接从我的项目中下载，地址<a href="https://github.com/ubuntuvim/coverage/tree/master/jacocolib">https://github.com/ubuntuvim/coverage/tree/master/jacocolib</a></p><h3 id="编写简单的java代码"><a href="#编写简单的java代码" class="headerlink" title="编写简单的java代码"></a>编写简单的java代码</h3><p>如下是我的业务代码，一些简单的判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.coverage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 覆盖率</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ubuntuvim</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coverage</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">normal</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;one&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;other&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exceptMethod</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        p = (p + <span class="number">10</span>) / p;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">throwExcept</span><span class="params">(<span class="keyword">int</span> p)</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            p = (p + <span class="number">10</span>) / p;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;0不能做分母。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的异常类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.coverage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码没什么好说的了，非常简单。关键看单元测试方法。</p><h3 id="编写单元测试"><a href="#编写单元测试" class="headerlink" title="编写单元测试"></a>编写单元测试</h3><p>下面的单元测试是针对<code>Coverage.java</code>类中三个方法<code>normal</code>、<code>exceptionMethod</code>和<code>throwException</code>的单元测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.coverage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Rule;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.rules.ExpectedException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoverageTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ExpectedException thrown = ExpectedException.none();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Coverage c = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        c = <span class="keyword">new</span> Coverage();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span>  <span class="comment">// 测试type为1的情况</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormalOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = c.normal(<span class="number">1</span>);</span><br><span class="line">        assertEquals(<span class="string">&quot;one&quot;</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>  <span class="comment">// 测试type为2的情况</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormalOther</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = c.normal(<span class="number">2</span>);</span><br><span class="line">        assertEquals(<span class="string">&quot;other&quot;</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>  <span class="comment">// 测试正常的情况 （try语句块里的代码）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExceptMethodP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = c.exceptMethod(<span class="number">10</span>);</span><br><span class="line">        assertEquals(<span class="number">2</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试出现异常的情况（catch语句块里的代码）</span></span><br><span class="line">    <span class="meta">@Test(expected = ArithmeticException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExceptMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        c.exceptMethod(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>  <span class="comment">// 测试正常的情况</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThrowExceptP</span><span class="params">()</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = c.throwExcept(<span class="number">10</span>);</span><br><span class="line">        assertEquals(<span class="number">2</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span>  <span class="comment">// 测试出现异常的情况</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThrowExcept</span><span class="params">()</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        <span class="comment">// 出现异常的情况会返回MyException异常</span></span><br><span class="line">        thrown.expect(MyException.class);</span><br><span class="line">        thrown.expectMessage(<span class="string">&quot;0不能做分母。&quot;</span>);</span><br><span class="line">        c.throwExcept(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有关Junit的使用请自行学习。<br>为了达到100%覆盖，需要对<code>normal</code>、<code>exceptionMethod</code>和<code>throwException</code>这三个方法中每一种情况都编写单元测试方法。具体请看上述代码。</p><p>单元测试代码编写好之后可以先运行。在<code>CoverageTest.java</code>上右键 -&gt; 选择<code>Coverage As</code> -&gt; 选择<code>Junit Test</code>。<br>执行完毕之后会有如下截图结果：</p><p><img src="/image/blog-image/18120602.png" alt="运行结果"></p><p>打开Coverage视图，可以看到我们的代码达到了100%的覆盖率。也就是说我们的代码中所有分子都已经被测试通过。</p><p><img src="/image/blog-image/18120603.png" alt="运行结果2"></p><h3 id="自动执行单元测试"><a href="#自动执行单元测试" class="headerlink" title="自动执行单元测试"></a>自动执行单元测试</h3><p>上述右键使用<code>Coverage As</code>运行一个测试类，如果有多个测试的情况要如何处理呢？可以借助于<a href="https://ant.apache.org/">ant</a>。使用ant自动编译java代码。</p><p>在项目根目录下创建<code>build.xml</code>，文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project name=&quot;AntTestReporting&quot; basedir=&quot;.&quot; default=&quot;compile&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- general --&gt;</span><br><span class="line">    &lt;property name=&quot;DEBUG&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;VERBOSE&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;TARGET&quot; value=&quot;1.8&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- folder --&gt;</span><br><span class="line">    &lt;property name=&quot;build.dir&quot; value=&quot;build&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;src.dir&quot; value=&quot;src/java&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;src.classess.dir&quot; value=&quot;$&#123;build.dir&#125;/classess&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;test.dir&quot; value=&quot;test/java&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;test.classess.dir&quot; value=&quot;$&#123;build.dir&#125;/test-classess&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;third-party-lib&quot; value=&quot;jacocolib&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- classpath --&gt;</span><br><span class="line">    &lt;path id=&quot;classpath&quot;&gt;</span><br><span class="line">        &lt;fileset dir=&quot;$&#123;third-party-lib&#125;&quot;&gt;</span><br><span class="line">            &lt;include name=&quot;**/*.jar&quot; /&gt;</span><br><span class="line">        &lt;/fileset&gt;</span><br><span class="line">    &lt;/path&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- targets --&gt;</span><br><span class="line">    &lt;target name=&quot;clean&quot;&gt;</span><br><span class="line">        &lt;delete dir=&quot;$&#123;build.dir&#125;&quot; /&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">    &lt;target name=&quot;init&quot;&gt;</span><br><span class="line">        &lt;mkdir dir=&quot;$&#123;build.dir&#125;&quot; /&gt;</span><br><span class="line">        &lt;mkdir dir=&quot;$&#123;src.classess.dir&#125;&quot; /&gt;</span><br><span class="line">        &lt;mkdir dir=&quot;$&#123;test.classess.dir&#125;&quot; /&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;target name=&quot;compile&quot; depends=&quot;clean, init&quot;&gt;</span><br><span class="line">        &lt;!-- Create the time stamp --&gt;</span><br><span class="line">        &lt;tstamp&gt;</span><br><span class="line">            &lt;format property=&quot;lastUpdated&quot; pattern=&quot;yyyy-MM-dd HH:mm:ss&quot; /&gt;</span><br><span class="line">        &lt;/tstamp&gt;</span><br><span class="line"> </span><br><span class="line">         &lt;!-- 编译java代码 --&gt;</span><br><span class="line">        &lt;javac target=&quot;$&#123;TARGET&#125;&quot; debug=&quot;$&#123;DEBUG&#125;&quot; verbose=&quot;$&#123;VERBOSE&#125;&quot; classpathref=&quot;classpath&quot;</span><br><span class="line">            optimize=&quot;true&quot; destdir=&quot;$&#123;src.classess.dir&#125;&quot; srcdir=&quot;$&#123;src.dir&#125;&quot;&gt;</span><br><span class="line">        &lt;/javac&gt;</span><br><span class="line">        &lt;echo&gt;======== java代码编译完毕 ========&lt;/echo&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;path id=&quot;classpath.src.dir&quot;&gt;</span><br><span class="line">            &lt;pathelement location=&quot;$&#123;src.classess.dir&#125;&quot; /&gt;</span><br><span class="line">            &lt;!-- 引入第三方jar --&gt;</span><br><span class="line">            &lt;fileset dir=&quot;$&#123;third-party-lib&#125;&quot;&gt;</span><br><span class="line">                &lt;include name=&quot;**/*.jar&quot; /&gt;</span><br><span class="line">            &lt;/fileset&gt;</span><br><span class="line">        &lt;/path&gt;</span><br><span class="line">         &lt;!-- 编译test代码 --&gt;</span><br><span class="line">        &lt;javac target=&quot;$&#123;TARGET&#125;&quot; debug=&quot;$&#123;DEBUG&#125;&quot; verbose=&quot;$&#123;VERBOSE&#125;&quot;</span><br><span class="line">            optimize=&quot;true&quot; destdir=&quot;$&#123;test.classess.dir&#125;&quot; srcdir=&quot;$&#123;test.dir&#125;&quot;&gt;</span><br><span class="line">            &lt;!-- test代码依赖src的代码和第三方jar --&gt;</span><br><span class="line">            &lt;classpath refid=&quot;classpath.src.dir&quot; /&gt;</span><br><span class="line">        &lt;/javac&gt;</span><br><span class="line">         &lt;echo&gt;======== test代码编译完毕 ========&lt;/echo&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>这个脚本主要做了两件事：</p><ul><li>编译<code>src/java</code>目录下面的java代码到目录<code>build/classess</code>下。</li><li>编译<code>test/java</code>目录下面的java代码到目录<code>build/test-classess</code>下。 </li></ul><p>在这个文件上右键 -&gt; <code>Run As</code> -&gt; <code>Ant Build</code>。执行完毕后，刷新项目。可以看到在项目根目录下自动创建了一个名为<code>build</code>的目录。展开之后可以看到项目的所有class文件。</p><p><img src="/image/blog-image/18120604.png" alt="编译结果1"></p><h3 id="自动生成覆盖率报告"><a href="#自动生成覆盖率报告" class="headerlink" title="自动生成覆盖率报告"></a>自动生成覆盖率报告</h3><p>编译之后得到你的业务代码class文件和单元测试的class文件。那么如何批量运行这些class呢？<br>同样的也是使用Ant。</p><p>在项目根目录下创建<code>build-test.xml</code>，文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project name=&quot;AntTestReporting-test&quot; basedir=&quot;.&quot; default=&quot;all-test&quot; xmlns:jacoco=&quot;antlib:org.jacoco.ant&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;import file=&quot;build.xml&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- Java Code Coverage --&gt;</span><br><span class="line">    &lt;taskdef uri=&quot;antlib:org.jacoco.ant&quot; resource=&quot;org/jacoco/ant/antlib.xml&quot;&gt;</span><br><span class="line">        &lt;classpath path=&quot;jacocolib/jacocoant.jar&quot; /&gt;</span><br><span class="line">    &lt;/taskdef&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;property name=&quot;reports.dir&quot; value=&quot;$&#123;basedir&#125;/reports&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;test.data.dir&quot; value=&quot;$&#123;reports.dir&#125;/testResults&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;coverage.reports.dir&quot; value=&quot;$&#123;reports.dir&#125;/coverage&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;property name=&quot;xms&quot; value=&quot;-Xms256m&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;xmx&quot; value=&quot;-Xmx1024m&quot; /&gt;</span><br><span class="line">    &lt;!-- &lt;property name=&quot;log4j.config&quot; value=&quot;-Dlog4j.configuration=file:/$&#123;base.dir&#125;/test/log4j-test.properties&quot; /&gt; --&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- test代码类路径，包括src代码、测试代码本身、jacoco jar --&gt;    </span><br><span class="line">     &lt;path id=&quot;classpath.test.dir&quot;&gt;</span><br><span class="line">         &lt;!-- 测试代码依赖src代码，需要作为test代码的运行classpath --&gt;</span><br><span class="line">        &lt;path refid=&quot;classpath.src.dir&quot;/&gt;</span><br><span class="line">        &lt;pathelement location=&quot;$&#123;test.classess.dir&#125;&quot; /&gt;</span><br><span class="line">    &lt;/path&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;target name=&quot;init-report-dir&quot;&gt;</span><br><span class="line">        &lt;delete dir=&quot;$&#123;test.data.dir&#125;&quot; /&gt;</span><br><span class="line">        &lt;delete dir=&quot;$&#123;coverage.reports.dir&#125;&quot; /&gt;</span><br><span class="line">        &lt;delete dir=&quot;$&#123;reports.dir&#125;&quot; /&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;mkdir dir=&quot;$&#123;reports.dir&#125;&quot; /&gt;</span><br><span class="line">        &lt;mkdir dir=&quot;$&#123;test.data.dir&#125;&quot; /&gt;</span><br><span class="line">        &lt;mkdir dir=&quot;$&#123;coverage.reports.dir&#125;&quot; /&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;target name=&quot;test&quot; depends=&quot;init-report-dir, compile&quot;&gt;</span><br><span class="line">        &lt;echo&gt;========= 运行所有test类 =========&lt;/echo&gt;</span><br><span class="line">        &lt;jacoco:coverage destfile=&quot;$&#123;test.data.dir&#125;/jacoco.exec&quot;&gt;</span><br><span class="line">            &lt;junit printsummary=&quot;true&quot; haltonfailure=&quot;false&quot; fork=&quot;yes&quot; forkmode=&quot;once&quot;&gt;</span><br><span class="line">                &lt;jvmarg value=&quot;$&#123;xms&#125;&quot; /&gt;</span><br><span class="line">                &lt;jvmarg value=&quot;$&#123;xmx&#125;&quot; /&gt;</span><br><span class="line">                &lt;classpath refid=&quot;classpath.test.dir&quot; /&gt;</span><br><span class="line">                &lt;formatter type=&quot;xml&quot; /&gt;</span><br><span class="line">                &lt;!-- 执行 *Test类 --&gt;</span><br><span class="line">                &lt;batchtest todir=&quot;$&#123;test.data.dir&#125;&quot;&gt;</span><br><span class="line">                    &lt;fileset dir=&quot;$&#123;test.classess.dir&#125;&quot;&gt;</span><br><span class="line">                        &lt;!-- Exclude inner classes --&gt;</span><br><span class="line">                        &lt;exclude name=&quot;**/*$*.class&quot; /&gt;</span><br><span class="line">                        &lt;include name=&quot;**/*Test.class&quot; /&gt;</span><br><span class="line">                    &lt;/fileset&gt;</span><br><span class="line">                &lt;/batchtest&gt;</span><br><span class="line">            &lt;/junit&gt;</span><br><span class="line">        &lt;/jacoco:coverage&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;!-- Generate HTML report</span><br><span class="line">            - junit-noframes.html -&gt; Single page HTML-report</span><br><span class="line">            - index.html -&gt; HTML-report using frames (several files, but more comfortable to read)--&gt;</span><br><span class="line">        &lt;echo&gt;========= 生成Junit报告 =========&lt;/echo&gt;</span><br><span class="line">        &lt;junitreport todir=&quot;$&#123;test.data.dir&#125;&quot;&gt;</span><br><span class="line">            &lt;fileset dir=&quot;$&#123;test.data.dir&#125;&quot;&gt;</span><br><span class="line">                &lt;include name=&quot;TEST-*.xml&quot; /&gt;</span><br><span class="line">            &lt;/fileset&gt;</span><br><span class="line">        &lt;/junitreport&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        &lt;!-- Generate Code Coverage report</span><br><span class="line">            See: http://www.eclemma.org/jacoco/trunk/doc/ant.html --&gt;</span><br><span class="line">        &lt;echo&gt;========= 生成覆盖率报告 =========&lt;/echo&gt;    </span><br><span class="line">        &lt;jacoco:report&gt;</span><br><span class="line">            &lt;executiondata&gt;</span><br><span class="line">                &lt;file file=&quot;$&#123;test.data.dir&#125;/jacoco.exec&quot; /&gt;</span><br><span class="line">            &lt;/executiondata&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;structure name=&quot;AntTestReporting&quot;&gt;</span><br><span class="line">                &lt;classfiles&gt;</span><br><span class="line">                    &lt;fileset dir=&quot;$&#123;src.classess.dir&#125;&quot;&gt;</span><br><span class="line">                        &lt;include name=&quot;**/*.class&quot; /&gt;</span><br><span class="line">                        &lt;!-- 生成的报告中排除test类 --&gt;</span><br><span class="line">                        &lt;!-- &lt;exclude name=&quot;**/*Test*.class&quot; /&gt; --&gt;</span><br><span class="line">                        &lt;!-- Exclude inner classes --&gt;</span><br><span class="line">                        &lt;exclude name=&quot;**/*$*.class&quot; /&gt;</span><br><span class="line">                    &lt;/fileset&gt;</span><br><span class="line">                &lt;/classfiles&gt;</span><br><span class="line">            &lt;/structure&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;html destdir=&quot;$&#123;coverage.reports.dir&#125;&quot; /&gt;</span><br><span class="line">        &lt;/jacoco:report&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;target name=&quot;all-test&quot; depends=&quot;test&quot; /&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>这个脚本主要做如下三件事：</p><h4 id="1-运行所有test类"><a href="#1-运行所有test类" class="headerlink" title="1. 运行所有test类"></a>1. 运行所有test类</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;jacoco:coverage destfile=&quot;$&#123;test.data.dir&#125;/jacoco.exec&quot;&gt;</span><br><span class="line">    &lt;junit printsummary=&quot;true&quot; haltonfailure=&quot;false&quot; fork=&quot;yes&quot; forkmode=&quot;once&quot;&gt;</span><br><span class="line">        &lt;jvmarg value=&quot;$&#123;xms&#125;&quot; /&gt;</span><br><span class="line">        &lt;jvmarg value=&quot;$&#123;xmx&#125;&quot; /&gt;</span><br><span class="line">        &lt;classpath refid=&quot;classpath.test.dir&quot; /&gt;</span><br><span class="line">        &lt;formatter type=&quot;xml&quot; /&gt;</span><br><span class="line">        &lt;!-- 执行 build/test-classess下面的所有class --&gt;</span><br><span class="line">        &lt;batchtest todir=&quot;$&#123;test.data.dir&#125;&quot;&gt;</span><br><span class="line">            &lt;fileset dir=&quot;$&#123;test.classess.dir&#125;&quot;&gt;</span><br><span class="line">                &lt;include name=&quot;**/*Test.class&quot; /&gt;</span><br><span class="line">            &lt;/fileset&gt;</span><br><span class="line">        &lt;/batchtest&gt;</span><br><span class="line">    &lt;/junit&gt;</span><br><span class="line">&lt;/jacoco:coverage&gt;</span><br></pre></td></tr></table></figure><p>这段代码就是用于执行Junit方法的，有关Junit标签详细使用说明请移步<a href="https://ant.apache.org/manual/">https://ant.apache.org/manual/</a>。<br>通过标签<code>batchtest</code>指定了执行的范围，<code>dir</code>属性指定运行的class文件放在<code>build/test-classess</code>。这个目录下有可能有其他的文件所以使用<code>include</code>标签指定只执行名字后缀是<code>Test</code>的class文件。<br>这段脚本执行完毕之后会在<code>reports/testResults</code>得到一个exec文件。这些文件和目录也是脚本自动创建的。</p><h4 id="2-生成Junit报告"><a href="#2-生成Junit报告" class="headerlink" title="2. 生成Junit报告"></a>2. 生成Junit报告</h4><p>经过第一点的脚本之后，根据执行结果生成Junit报告。报告保存在<code>reports/testResults</code>。这部分是可选的，如果你不想要Junit报告可以删除这段脚本。删除之后再执行在<code>reports/testResults</code>目录下面就不会有<code>TESTS-TestSuites.xml</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;junitreport todir=&quot;$&#123;test.data.dir&#125;&quot;&gt;</span><br><span class="line">    &lt;fileset dir=&quot;$&#123;test.data.dir&#125;&quot;&gt;</span><br><span class="line">        &lt;include name=&quot;TEST-*.xml&quot; /&gt;</span><br><span class="line">    &lt;/fileset&gt;</span><br><span class="line">&lt;/junitreport&gt;</span><br></pre></td></tr></table></figure><h4 id="3-生成覆盖率报告"><a href="#3-生成覆盖率报告" class="headerlink" title="3. 生成覆盖率报告"></a>3. 生成覆盖率报告</h4><p>经过前面两步之后，可以根据前面两步的结果生成覆盖率的报告。报告所依赖的数据就是<code>&lt;file file=&quot;$&#123;test.data.dir&#125;/jacoco.exec&quot; /&gt;</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;jacoco:report&gt;</span><br><span class="line">    &lt;executiondata&gt;</span><br><span class="line">        &lt;file file=&quot;$&#123;test.data.dir&#125;/jacoco.exec&quot; /&gt;</span><br><span class="line">    &lt;/executiondata&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;structure name=&quot;AntTestReporting&quot;&gt;</span><br><span class="line">        &lt;classfiles&gt;</span><br><span class="line">            &lt;fileset dir=&quot;$&#123;src.classess.dir&#125;&quot;&gt;</span><br><span class="line">                &lt;include name=&quot;**/*.class&quot; /&gt;</span><br><span class="line">                &lt;!-- 生成的报告中排除test类 --&gt;</span><br><span class="line">                &lt;!-- &lt;exclude name=&quot;**/*Test*.class&quot; /&gt; --&gt;</span><br><span class="line">                &lt;!-- Exclude inner classes --&gt;</span><br><span class="line">                &lt;exclude name=&quot;**/*$*.class&quot; /&gt;</span><br><span class="line">            &lt;/fileset&gt;</span><br><span class="line">        &lt;/classfiles&gt;</span><br><span class="line">    &lt;/structure&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;html destdir=&quot;$&#123;coverage.reports.dir&#125;&quot; /&gt;</span><br><span class="line">&lt;/jacoco:report&gt;</span><br></pre></td></tr></table></figure><p>最终，整个脚本执行完毕之后，在项目根目录下可以看到如下截图内容：</p><p><img src="/image/blog-image/18120605.png" alt="覆盖率报告"></p><p>用浏览器打开<code>index.html</code>，在这里文件中可以看到项目所有代码的覆盖率情况。</p><p><img src="/image/blog-image/18120606.png" alt="覆盖率报告2"></p><p>报告单结果和你直接使用<code>Coverage As</code>运行的结果是一致的。如果别人需要项目的结果你就可以把<code>reports</code>目录发给他了，这个就是项目的单元覆盖率结果。</p><h3 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h3><p><a href="https://github.com/ubuntuvim/coverage">https://github.com/ubuntuvim/coverage</a></p><p>后续版本会继承spring，针对spring或者是springMVC项目又是如何做的呢？？</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Junit </tag>
            
            <tag> Jacoco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-gradle-代码覆盖测试</title>
      <link href="/2020/01/18/junit-jacoco/spring-gradle-%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/01/18/junit-jacoco/spring-gradle-%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p><strong>单元测试、代码覆盖率</strong></p><ul><li><a href="http://xcoding.tech/2018/12/06/junit-jacoco/junit-jacoco%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E6%B5%8B%E8%AF%95/">junit-jacoco代码覆盖测试</a></li><li><a href="http://xcoding.tech/2018/12/09/junit-jacoco/spring-junit-jacoco%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E6%B5%8B%E8%AF%95/">spring-junit-jacoco代码覆盖测试</a></li></ul><p>接着上一篇《spring-junit-jacoco代码覆盖测试》，本篇介绍一下如何gradle单元测试、代码覆盖率。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>gradle。请自行安装好gradle</li></ul><h3 id="使用maven转为gradle项目"><a href="#使用maven转为gradle项目" class="headerlink" title="使用maven转为gradle项目"></a>使用maven转为gradle项目</h3><p>在项目根目录下执行如下命令把maven项目转为gradle项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle init --type pom</span><br></pre></td></tr></table></figure><p>命令执行完毕之后刷新项目可以看到项目目录下已经有gradle的配置<code>build.gradle</code>、<code>settings.gradle</code>等配置。</p><p>修改<code>settings.gradle</code>里面的项目名称，改为<code>coverage-spring-gradle</code>。如果不改为和项目同名字使用gradle编译的时候会报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">org.eclipse.buildship.core.UnsupportedConfigurationException: Project at &#x27;/Users/ubuntuvim/codes/java_keeping/coverage-spring-gradle&#x27; can&#x27;t be named &#x27;coverage-spring-gradle33&#x27; because it&#x27;s located directly under the workspace root. If such a project is renamed, Eclipse would move the container directory. To resolve this problem, move the project out of the workspace root or configure it to have the name &#x27;coverage-spring-gradle&#x27;.</span><br><span class="line">    at org.eclipse.buildship.core.workspace.internal.DefaultWorkspaceOperations.validateProjectName(DefaultWorkspaceOperations.java:183)</span><br><span class="line">    at org.eclipse.buildship.core.workspace.internal.ProjectNameUpdater.checkProjectName(ProjectNameUpdater.java:107)</span><br><span class="line">    at org.eclipse.buildship.core.workspace.internal.ProjectNameUpdater.updateProjectName(ProjectNameUpdater.java:44)</span><br><span class="line">    at org.eclipse.buildship.core.workspace.internal.SynchronizeGradleBuildOperation.synchronizeOpenWorkspaceProject(SynchronizeGradleBuildOperation.java:208)</span><br><span class="line">    at org.eclipse.buildship.core.workspace.internal.SynchronizeGradleBuildOperation.synchronizeWorkspaceProject(SynchronizeGradleBuildOperation.java:186)</span><br><span class="line">    at org.eclipse.buildship.core.workspace.internal.SynchronizeGradleBuildOperation.synchronizeGradleProjectWithWorkspaceProject(SynchronizeGradleBuildOperation.java:176)</span><br><span class="line">    at org.eclipse.buildship.core.workspace.internal.SynchronizeGradleBuildOperation.access$000(SynchronizeGradleBuildOperation.java:99)</span><br><span class="line">    at org.eclip</span><br></pre></td></tr></table></figure><h4 id="删除maven依赖文件"><a href="#删除maven依赖文件" class="headerlink" title="删除maven依赖文件"></a>删除maven依赖文件</h4><p>使用gradle之后就不需要maven的文件了，删除<code>master-lib</code>,<code>coverage.xml</code>,<code>compile.xml</code>,<code>jacocolib</code>。</p><p>项目右键 –&gt; gradle –&gt; refresh gradle project。之后项目结构如下图：</p><p><img src="/image/blog-image/java/junit-coverage/9.png" alt="报告"></p><h3 id="运行生成单元测试报告"><a href="#运行生成单元测试报告" class="headerlink" title="运行生成单元测试报告"></a>运行生成单元测试报告</h3><p>打开gradle视图</p><p><img src="/image/blog-image/java/junit-coverage/10.png" alt="报告"></p><p>可以看到gradle已经提供了很多任务，直接运行即可，我们不需要像使用Ant一样自己编写一大堆的脚本。</p><p><img src="/image/blog-image/java/junit-coverage/11.png" alt="build任务"></p><p>直接运行<code>build</code> -&gt; <code>build</code>这个任务。稍等执行完毕之后，刷新项目，打开项目目录下<code>build</code>目录，展开之后可以看到一个index.html。这个文件就是单元测试报告。</p><p><img src="/image/blog-image/java/junit-coverage/12.png" alt="build任务"></p><p>生成一个单元测试报告就是这么简单，什么脚本都不需要写了，gradle已经帮你做好。</p><h3 id="生成覆盖率报告"><a href="#生成覆盖率报告" class="headerlink" title="生成覆盖率报告"></a>生成覆盖率报告</h3><p>要构建一个覆盖率报告也是非常简单的。仍然是使用gradle提供好的插件，修改<code>build.gradle</code>，在文件中增加覆盖率插件。</p><h4 id="增加覆盖率插件"><a href="#增加覆盖率插件" class="headerlink" title="增加覆盖率插件"></a>增加覆盖率插件</h4><p>首先引入jacoco插件。在<code>build.gradle</code>第三行增加：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;jacoco&#x27;</span></span><br></pre></td></tr></table></figure><p>在这个文件末尾增加如下配置：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jacoco任务配置</span></span><br><span class="line">jacoco &#123;</span><br><span class="line">    <span class="comment">// 设置覆盖率报告目录</span></span><br><span class="line">    reportsDir = file(<span class="string">&quot;$buildDir/coverage-report&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">jacocoTestReport &#123;</span><br><span class="line">   reports &#123;</span><br><span class="line">      xml.enabled = <span class="literal">true</span></span><br><span class="line">      html.enabled = <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生成覆盖率报告-1"><a href="#生成覆盖率报告-1" class="headerlink" title="生成覆盖率报告"></a>生成覆盖率报告</h4><p>进入项目根目录，直接如下命令即可生成覆盖率报告。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle clean test jacocoTestReport</span><br></pre></td></tr></table></figure><p>执行过程需要下载一下依赖jar，稍等几分钟之后刷新项目，一步步展开<code>build</code>目录。</p><p><img src="/image/blog-image/java/junit-coverage/13.png" alt="报告文件"></p><p>打开<code>index.html</code>可以看到详细报告内容。</p><p><img src="/image/blog-image/java/junit-coverage/14.png" alt="覆盖率报告"></p><p>使用gradle是在简单很多，根本不需要你编写一大堆的脚本。非常爽。</p><h3 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h3><p><a href="https://github.com/ubuntuvim/coverage/tree/coverage-spring-gradle">https://github.com/ubuntuvim/coverage/tree/coverage-spring-gradle</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构漫谈</title>
      <link href="/2020/01/18/%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%84%E6%BC%AB%E8%B0%88/"/>
      <url>/2020/01/18/%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%84%E6%BC%AB%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<p><strong>文章来源InfoQ。</strong></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol start="0"><li><a href="http://www.infoq.com/cn/minibooks/discussion-on-architecture">架构师特刊：架构漫谈</a></li><li><a href="http://www.infoq.com/cn/articles/an-informal-discussion-on-architecture-part01?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=articles_link&utm_content=link_text">架构漫谈（一）：什么是架构？</a></li><li><a href="http://www.infoq.com/cn/articles/an-informal-discussion-on-architecture-part02?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=articles_link&utm_content=link_text">架构漫谈（二）：认识概念是理解架构的基础</a></li><li><a href="http://www.infoq.com/cn/articles/an-informal-discussion-on-architecture-part03?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=articles_link&utm_content=link_text">架构漫谈（三）：如何做好架构之识别问题</a></li><li>[架构漫谈（四）：如何做好架构之架构切分](<a href="http://www.infoq.com/cn/articles/an-informal-discussion-on-architecture-part04?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_m">http://www.infoq.com/cn/articles/an-informal-discussion-on-architecture-part04?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_m</a><br>edium=articles_link&amp;utm_content=link_text)</li><li><a href="http://www.infoq.com/cn/articles/an-informal-discussion-on-architecture-part05?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=articles_link&utm_content=link_text">架构漫谈（五）：什么是软件</a></li><li><a href="http://www.infoq.com/cn/articles/an-informal-discussion-on-architecture-part06?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=articles_link&utm_content=link_text">架构漫谈（六）：软件架构到底是要解决什么问题？</a></li><li><a href="http://www.infoq.com/cn/articles/an-informal-discussion-on-architecture-part07?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=articles_link&utm_content=link_text">架构漫谈（七）：不要空设架构师这个职位，给他实权</a></li><li><a href="http://www.infoq.com/cn/articles/an-informal-discussion-on-architecture-part08?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=articles_link&utm_content=link_text">架构漫谈（八）：从架构的角度看如何写好代码</a></li><li><a href="http://www.infoq.com/cn/articles/an-informal-discussion-on-architecture-part09?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=articles_link&utm_content=link_text">架构漫谈（九）：理清技术、业务和架构的关系</a></li></ol><p><strong>完整内容请看附件PDF</strong></p><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><p><a href="http://notes.ddlisting.com/api/file/getAttach?fileId=572b1c3fe729e40b3800000a">Informal-Discussion-on-Architecture.pdf</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构漫谈学习笔记</title>
      <link href="/2020/01/18/%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%84%E6%BC%AB%E8%B0%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/18/%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%84%E6%BC%AB%E8%B0%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>摘抄出处：<a href="http://www.infoq.com/cn/articles/an-informal-discussion-on-architecture-part06?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=articles_link&utm_content=link_text">软件架构到底是要解决什么问题？</a></p><h3 id="一、虚拟化业务需要完成这些事情："><a href="#一、虚拟化业务需要完成这些事情：" class="headerlink" title="一、虚拟化业务需要完成这些事情："></a>一、虚拟化业务需要完成这些事情：</h3><ol><li>学习业务知识，认识业务所涉及的stakeholders的核心利益述求，以及业务是如何分拆满足这些利益述求，并通过怎样的组织架构完成整个组织的核心利益的，以及业务运作的流程，涉及到哪些概念，有哪些权利和责任等。</li><li>通过对业务知识的学习，针对这些概念所对应的权利和责任以及组织架构，对业务进行建模，把并把建模的结果用编程语言实现。这是业务的模型，通常是现实生活中利益斗争的结果，是非常稳定的。</li><li>学习业务所参与的stakeholder是如何和业务打交道，并完成每个人的权利和义务的，并通过编程语言，结合业务模型实现这些打交道的沟通通道。这部分是变化最频繁的，属于组合关系。明白了这一点，对后续的实现非常有帮助。</li><li>如何把业务运行的结果，持久化，并通过合适的手段把持久化后的数据，在合适的时间合适的地点加载出来。这部分和基础设施有关，变化可能也会比较频繁。</li></ol><h3 id="二、代码如何运营，需要完成这些事情："><a href="#二、代码如何运营，需要完成这些事情：" class="headerlink" title="二、代码如何运营，需要完成这些事情："></a>二、代码如何运营，需要完成这些事情：</h3><ol><li>需要多少硬件设备来满足访问的需求？</li><li>代码要分成多少个组件部署到哪些硬件设备上？</li><li>这些代码如何通过硬件设备互相连接在一起？</li><li>当业务流量增大到超过一台机器的容量时，软件能否支持通过部署到新增机器上的方式，扩大对业务的支撑？</li><li>当某台或某些硬件设备失效时，软件是否仍然能够不影响用户的访问。</li><li>软件运行产生的数据，能否支持提取出来并加以分析，为下一轮的业务决策提供依据。</li></ol><h3 id="三、如果分成不同的角色来完成这些事情，就需要一个组织架构来组织代码的编写和运营，需要做哪些事情："><a href="#三、如果分成不同的角色来完成这些事情，就需要一个组织架构来组织代码的编写和运营，需要做哪些事情：" class="headerlink" title="三、如果分成不同的角色来完成这些事情，就需要一个组织架构来组织代码的编写和运营，需要做哪些事情："></a>三、如果分成不同的角色来完成这些事情，就需要一个组织架构来组织代码的编写和运营，需要做哪些事情：</h3><ol><li>完成一和二所列的这些事情，需要哪些角色参与？</li><li>这些事情基本都需要顺序的发生，如何保证信息在不同角色的传递过程中不会有损失？ </li><li>或者说即使有损失，也能快速纠正？</li><li>这些角色之间是如何协调，才能共同完成虚拟化业务的需求？</li></ol><h3 id="其他摘录"><a href="#其他摘录" class="headerlink" title="其他摘录"></a>其他摘录</h3><p>摘录文章<a href="http://www.infoq.com/cn/articles/an-informal-discussion-on-architecture-part09?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=articles_link&utm_content=link_text">理清技术、业务和架构的关系</a></p><p>在软件设计开发的过程中经常会看到，很多所谓的架构讨论实际上只是在讨论某种技术。在很多人的概念里面，架构和技术实际上是等同的。<strong>学会了几种技术，就认为自己是架构师了，甚至是学习的技术越多，就觉得自己的水平越高。这样实际上是对自己很不负责任的。要知道任何技术都是为了解决某种问题而存在的，学会了技术，并不代表自己能够解决问题，这一点非常的重要。</strong>学会的技术的多少，所带来的差别只是自己解决问题的手段多了罢了。但是手段多了就一定是好事吗？ 很多时候，学习的技术越多，越不知道采用哪种技术好，所谓“乱花渐欲迷人眼”。</p><p>还有另一种很普遍的观点：技术人普遍看不起业务，认为技术更高端，而业务太低端，并且业务往往喜欢给技术挖坑。业务则觉得技术眼光高，但是实际解决不了问题，总是理解有偏差，但是又无可奈何，因为自己不会。</p><p>一般是先有技术，才会有架构。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义MVC框架之一框架总说明</title>
      <link href="/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%B8%80%E6%A1%86%E6%9E%B6%E6%80%BB%E8%AF%B4%E6%98%8E/"/>
      <url>/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%B8%80%E6%A1%86%E6%9E%B6%E6%80%BB%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>本系列文章将为你介绍一个简单的自定义的MVC框架，主要是用于学习，框架模拟struts实现。</p><p><strong>项目结构如下：</strong></p><p><img src="http://7xnrhh.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160303141839.png" alt="项目结构"></p><ol><li>LoginAction.java 测试，模拟登陆处理</li><li>Action.java 框架Action接口</li><li>ActionManager.java 根据配置的Action类名反射得到实例</li><li>ActionMapping.java 根据Action配置定义的javabean类，用于保存Action配置信息</li><li>ActionMappingManager.java 读取、解析Action配置并把配置转换成对应的ActionMapping对象</li><li>CharactorFilter.java 编码过滤器</li><li>ActionServlet.java 框架拦截器，根据web.xml的配置拦截请求</li><li>snails-actions-validate.xsd Action配置的校验文件，此文件限定了Action配置的格式</li><li>snails-actions.xml Action配置，类似于struts，配置了Action的名称、类、结果页面</li><li>依赖jar commons-lang3-3.1.jar dom4j-1.6.1.jar</li><li>web.xml项目总配置文件</li><li>fail.jsp 登录失败页面后跳转页面</li><li>index.jsp登录页面</li><li>success.jsp 登录成功后跳转页面</li></ol><h3 id="框架执行流程"><a href="#框架执行流程" class="headerlink" title="框架执行流程"></a>框架执行流程</h3><p><img src="http://7xnrhh.com1.z0.glb.clouddn.com/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%EF%BC%8C%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="执行流程"></p><p>重点在框架拦截器<code>ActionServlet</code>，此拦截器负责初始化配置、根据<code>Action</code>实现类处理结果跳转不同的试图页面。<br>另一个需要注意的类是<code>ActionMappingManager</code>此类负责配置文件的解析。</p><p>框架的介绍从<code>Action</code>的配置开始，因为本框架很大程度上都是围绕着这个配置文件开展的。</p><ol><li><a href="https://github.com/ubuntuvim/study-note/blob/master/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%BA%8Caction%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9A%E4%B9%89.md">自定义MVC框架之二action配置文件定义</a></li><li><a href="https://github.com/ubuntuvim/study-note/blob/master/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%B8%89Action%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89.md">自定义MVC框架之三Action接口定义</a></li><li><a href="https://github.com/ubuntuvim/study-note/blob/master/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%9B%9BActionMapping%E5%AE%9A%E4%B9%89.md">自定义MVC框架之四ActionMapping定义</a></li><li><a href="https://github.com/ubuntuvim/study-note/blob/master/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%BA%94%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%99%A8ActionMappingManager%E5%AE%9A%E4%B9%89.md">自定义MVC框架之五配置文件解析器ActionMappingManager定义</a></li><li><a href="https://github.com/ubuntuvim/study-note/blob/master/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%85%ADActionManager%E5%AE%9A%E4%B9%89.md">自定义MVC框架之六ActionManager定义</a></li><li><a href="https://github.com/ubuntuvim/study-note/blob/master/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%B8%83%E6%A1%86%E6%9E%B6%E6%8B%A6%E6%88%AA%E5%99%A8ActionServlet%E5%AE%9A%E4%B9%89%E3%80%81%E9%85%8D%E7%BD%AE.md">自定义MVC框架之七框架拦截器ActionServlet定义、配置</a></li><li><a href="https://github.com/ubuntuvim/study-note/blob/master/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%85%AB%E4%BD%BF%E7%94%A8%E6%A1%86%E6%9E%B6%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86.md">自定义MVC框架之八使用框架模拟登陆</a></li></ol><p>希望通过上述的文章能给你一点收获，如果你能理解其中的思想对于你学习Java三大框架SSH是非常有帮助的。</p><p>项目完整代码请看<a href="https://github.com/ubuntuvim/myMVC">MyMVC</a>，欢迎fork学习，如果你觉得对你有帮助给我点个赞吧，当然也欢迎给我提意见（email:<a href="mailto:&#x31;&#53;&#50;&#55;&#50;&#x35;&#x34;&#48;&#x32;&#x37;&#x40;&#113;&#113;&#x2e;&#x63;&#111;&#109;">&#x31;&#53;&#50;&#55;&#50;&#x35;&#x34;&#48;&#x32;&#x37;&#x40;&#113;&#113;&#x2e;&#x63;&#111;&#109;</a>，chendequanroob@gmail.com）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义MVC框架之七框架拦截器ActionServlet定义、配置</title>
      <link href="/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%B8%83%E6%A1%86%E6%9E%B6%E6%8B%A6%E6%88%AA%E5%99%A8ActionServlet%E5%AE%9A%E4%B9%89%E3%80%81%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%B8%83%E6%A1%86%E6%9E%B6%E6%8B%A6%E6%88%AA%E5%99%A8ActionServlet%E5%AE%9A%E4%B9%89%E3%80%81%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>到本篇为止，全部的准备工作都已经做好了，万事俱备只欠东风。本类的作用就类似于<code>struts</code>框架的入口文件，我们需要在<code>web.xml</code>配置，指定那些请求会进入到框架中，框架会根据请求的内容截取到<code>Action</code>名字，然后根据<code>Action</code>名字获取到<code>Action</code>的配置信息，然后根据<code>class</code>属性值反射得到类实例，然后执行<code>Action</code>的<code>execute</code>方法得到返回的试图名。最后根据视图名对应的视图跳转。</p><h4 id="拦截器定义"><a href="#拦截器定义" class="headerlink" title="拦截器定义"></a>拦截器定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.snails.framework.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.snails.framework.action.Action;</span><br><span class="line"><span class="keyword">import</span> com.snails.framework.action.ActionManager;</span><br><span class="line"><span class="keyword">import</span> com.snails.framework.action.ActionMapping;</span><br><span class="line"><span class="keyword">import</span> com.snails.framework.action.ActionMappingManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * action的总控制器，所有以&quot;.action&quot;结尾的请求都会被这个servlet拦截，并进入到框架中处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ActionMappingManager amm = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActionServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 截取请求，如果请求是以&quot;.action&quot;结尾则进入到框架中处理</span></span><br><span class="line"><span class="comment">     * 否则不处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// amm 在init方法中初始化</span></span><br><span class="line">            ActionMapping am = amm.getActionMapping(getActionName(request));</span><br><span class="line">            <span class="comment">//  获取action实例</span></span><br><span class="line">            Action action = ActionManager.createAction(am.getActionClassName());</span><br><span class="line">            <span class="comment">//  执行实现类的业务逻辑</span></span><br><span class="line">            String result = action.execute(request, response);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(result)) &#123;</span><br><span class="line">                response.sendError(<span class="number">404</span>, <span class="string">&quot;未配置Action对应的input元素。&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Map&lt;String, String&gt; resultMap = am.getResult(result);</span><br><span class="line">      <span class="comment">// map的key暂时写死了</span></span><br><span class="line">            <span class="keyword">if</span> (Boolean.parseBoolean(resultMap.get(<span class="string">&quot;REDIRECT&quot;</span>))) &#123;</span><br><span class="line">                response.sendRedirect(resultMap.get(<span class="string">&quot;RESULT_CONTENT&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                request.getRequestDispatcher(resultMap.get(<span class="string">&quot;RESULT_CONTENT&quot;</span>)).forward(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析URL获取action的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getActionName</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String contextPath = request.getContextPath();</span><br><span class="line">        String actionPath = request.getRequestURI().substring(contextPath.length());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> actionPath.substring(<span class="number">1</span>, actionPath.lastIndexOf(<span class="string">&quot;.&quot;</span>)).trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//  读取框架拦截器的配置信息</span></span><br><span class="line">        String configFiles = config.getInitParameter(<span class="string">&quot;configFiles&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(configFiles)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;没有在拦截器中配置任何action配置文件！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//  先去除分割配置文件间的空格（如果有）</span></span><br><span class="line">      <span class="comment">//  如果多个配置文件使用逗号&#x27;,&#x27;分割，用于学习的就不做的那么灵活了。</span></span><br><span class="line">            <span class="keyword">this</span>.amm = <span class="keyword">new</span> ActionMappingManager(configFiles.replaceAll(<span class="string">&quot;\\s*&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单讲这就是一个拦截器，然后根据请求的<code>URL</code>处理。在方法<code>init</code>中读取初始化Action的配置信息，由于在<code>web.xml</code>中设定了此拦截器在项目的启动的时候就初始化了，所以在<code>doGet</code>、<code>doPost</code>中就随便使用了！</p><h4 id="拦截器配置"><a href="#拦截器配置" class="headerlink" title="拦截器配置"></a>拦截器配置</h4><p>定义好拦截器之后还没起作用，需要在<code>web.xml</code>中配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xmlns:web</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>snails<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.snails.framework.filter.CharactorFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ignore<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- true过滤，false不过滤 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--  框架拦截器配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>框架拦截器配置<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ActionServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ActionServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.snails.framework.servlet.ActionServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>configFiles<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>config/snails-actions.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>0<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ActionServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述是项目的全部<code>web.xml</code>配置，但是只要注意最后一段即可，其他的配置暂时不管。</p><ul><li><code>&lt;param-value&gt;config/snails-actions.xml&lt;/param-value&gt;</code>指定了Action配置文件</li><li><code>&lt;load-on-startup&gt;0&lt;/load-on-startup&gt;</code>设定当项目启动时就实例化这个拦截器</li><li><code>&lt;url-pattern&gt;*.action&lt;/url-pattern&gt;</code>定义了框架拦截器的请求后缀，只有以”.action”为后缀的请求才会进入到自定义的框架中。</li></ul><p>项目完整代码请看<a href="https://github.com/ubuntuvim/myMVC">MyMVC</a>，欢迎fork学习，如果你觉得对你有帮助给我点个赞吧，当然也欢迎给我提意见（email:<a href="mailto:&#x31;&#53;&#50;&#55;&#50;&#x35;&#x34;&#48;&#50;&#x37;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#109;">&#x31;&#53;&#50;&#55;&#50;&#x35;&#x34;&#48;&#50;&#x37;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#109;</a>，chendequanroob@gmail.com）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义MVC框架之二action配置文件定义</title>
      <link href="/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%B8%89Action%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89/"/>
      <url>/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%B8%89Action%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>前一篇<a href="https://github.com/ubuntuvim/study-note/blob/master/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%B8%80action%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9A%E4%B9%89.md">自定义MVC框架之一action配置文件定义</a>定义了Action的配置格式。本篇介绍<code>Action</code>接口的定义，由于是用于学习只是简单定义了几个公共变量和一个业务处理的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.snails.framework.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String INPUT = <span class="string">&quot;input&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String ERROR = <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String SUCCESS = <span class="string">&quot;success&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理业务逻辑方法，每个Action类都需要重写此方法，并返回与配置文件对应的页面配置字符串</span></span><br><span class="line"><span class="comment">     * 比如返回 &#x27;input&#x27;：</span></span><br><span class="line"><span class="comment">     * &lt;result name=&quot;input&quot;&gt;index.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，不多说。其他使用框架的所有<code>Action</code>类都要实现此类。</p><p>项目完整代码请看<a href="https://github.com/ubuntuvim/myMVC">MyMVC</a>，欢迎fork学习，如果你觉得对你有帮助给我点个赞吧，当然也欢迎给我提意见（email:<a href="mailto:&#49;&#53;&#50;&#55;&#x32;&#x35;&#x34;&#x30;&#50;&#x37;&#x40;&#113;&#113;&#x2e;&#99;&#x6f;&#109;">&#49;&#53;&#50;&#55;&#x32;&#x35;&#x34;&#x30;&#50;&#x37;&#x40;&#113;&#113;&#x2e;&#99;&#x6f;&#109;</a>，chendequanroob@gmail.com）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义MVC框架之二action配置文件定义</title>
      <link href="/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%BA%8Caction%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9A%E4%B9%89/"/>
      <url>/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%BA%8Caction%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>为了减少Java代码中的校验我们先定义<code>Action配置</code>的文件的校验文件（<code>snails-actions-validate.xsd</code>），文件路径请看<a href="https://github.com/ubuntuvim/study-note/blob/master/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%B8%80%E6%A1%86%E6%9E%B6%E6%80%BB%E8%AF%B4%E6%98%8E.md">框架总说明</a>中的图片所示。</p><h4 id="snails-actions-validate-xsd"><a href="#snails-actions-validate-xsd" class="headerlink" title="snails-actions-validate.xsd"></a>snails-actions-validate.xsd</h4><p>下面的<code>schema</code>文件既是格式校验文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:schema</span> <span class="attr">xmlns:xs</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.w3schools.com&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3schools.com&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">elementFormDefault</span>=<span class="string">&quot;qualified&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- elementFormDefault=&quot;qualified&quot; 指出任何 XML 实例文档所使用的且在此 schema</span></span><br><span class="line"><span class="comment">    中声明过的元素必须被命名空间限定。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;actions&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- maxOccurs=&quot;unbounded&quot;定义元素可以出现一次或者多次 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:sequence</span> <span class="attr">maxOccurs</span>=<span class="string">&quot;unbounded&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;action&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">xs:sequence</span> <span class="attr">maxOccurs</span>=<span class="string">&quot;unbounded&quot;</span>&gt;</span></span><br><span class="line">                                  <span class="comment">&lt;!-- action的子元素result --&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;result&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">                                        <span class="comment">&lt;!-- result节点，节点包括字符串形式的内容 --&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">xs:simpleContent</span>&gt;</span></span><br><span class="line">                                          <span class="tag">&lt;<span class="name">xs:extension</span> <span class="attr">base</span>=<span class="string">&quot;xs:string&quot;</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xs:string&quot;</span> <span class="attr">use</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">                                                  <span class="comment">&lt;!-- 定义属性redirect只能有2个值， --&gt;</span></span><br><span class="line">                                                  <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">&quot;redirect&quot;</span> <span class="attr">use</span>=<span class="string">&quot;optional&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">                                                        <span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xs:string&quot;</span>&gt;</span></span><br><span class="line">                                                              <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">                                                              <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">                                                          <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line">                                                      <span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;/<span class="name">xs:attribute</span>&gt;</span></span><br><span class="line">                                          <span class="tag">&lt;/<span class="name">xs:extension</span>&gt;</span></span><br><span class="line">                                      <span class="tag">&lt;/<span class="name">xs:simpleContent</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                          <span class="comment">&lt;!-- action 节点的属性 --&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xs:string&quot;</span> <span class="attr">use</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">&quot;class&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xs:string&quot;</span> <span class="attr">use</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签的解释请看注释信息或者看下面的参考网址：</p><ol><li><a href="http://www.w3chtml.com/schema/xml-schema-root.html">http://www.w3chtml.com/schema/xml-schema-root.html</a></li><li><a href="http://www.cnblogs.com/caoxch/archive/2006/11/17/563856.html">http://www.cnblogs.com/caoxch/archive/2006/11/17/563856.html</a></li><li><a href="https://www.ibm.com/developerworks/cn/xml/x-cert/part6/">https://www.ibm.com/developerworks/cn/xml/x-cert/part6/</a></li></ol><h4 id="snails-actions-xml"><a href="#snails-actions-xml" class="headerlink" title="snails-actions.xml"></a>snails-actions.xml</h4><p>得到校验文件后，开始编写<code>Action配置文件</code>，我们可以先写一个用户登录Action的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">actions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3schools.com&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.w3schools.com snails-actions-validate.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.snails.action.LoginAction&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;fail&quot;</span> <span class="attr">redirect</span>=<span class="string">&quot;true&quot;</span>&gt;</span>fail.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">actions</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意头部的<code>xsi:schemaLocation=&quot;http://www.w3schools.com snails-actions-validate.xsd</code>，这里引入了校验文件，此时两个xml都是在同一个目录下。</p><p>到此两个主要的配置文件已经定义完成，下面就是解析xml文件了。</p><p>项目完整代码请看<a href="https://github.com/ubuntuvim/myMVC">MyMVC</a>，欢迎fork学习，如果你觉得对你有帮助给我点个赞吧，当然也欢迎给我提意见（email:<a href="mailto:&#49;&#x35;&#x32;&#x37;&#50;&#x35;&#x34;&#48;&#x32;&#x37;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#x6d;">&#49;&#x35;&#x32;&#x37;&#50;&#x35;&#x34;&#48;&#x32;&#x37;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#x6d;</a>，chendequanroob@gmail.com）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义MVC框架之四ActionMapping定义</title>
      <link href="/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%BA%94%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%99%A8ActionMappingManager%E5%AE%9A%E4%B9%89/"/>
      <url>/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%BA%94%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%99%A8ActionMappingManager%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>数据（Action配置文件）有了，对应的数据存储类（ActionMapping）也有了。毫无疑问，接下来就是数据的解析了。使用<code>dom4j</code>解析<code>xml</code>文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.snails.framework.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取action的配置文件，并转换成ActionMapping对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionMappingManager</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 参数一保存每个action标签的name属性值，参数二保存转换后的action标签对象</span></span><br><span class="line">    Map&lt;String, ActionMapping&gt; actionMappings = <span class="keyword">new</span> HashMap&lt;String, ActionMapping&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActionMappingManager</span><span class="params">()</span> </span>&#123;    &#125;</span><br><span class="line">    <span class="comment">// 读取配置文件并解析</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActionMappingManager</span><span class="params">(String[] configFiles)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//  校验入参</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == configFiles || configFiles.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;请指定action的配置文件！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历action配置文件，并解析初始化到actionMappings中</span></span><br><span class="line">        <span class="keyword">for</span> (String cfgFile : configFiles) &#123;</span><br><span class="line">            readCfg(cfgFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据action类名获取action配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> actionName 名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ActionMapping</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionMapping <span class="title">getActionMapping</span><span class="params">(String actionName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(actionName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;入参actionName不允许为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ActionMapping am = <span class="keyword">this</span>.actionMappings.get(actionName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == am) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;没有Action[&quot;</span>+actionName+<span class="string">&quot;]的配置！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> am;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取action配置，并设置到ActionMapping map中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfgFile action配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readCfg</span><span class="params">(String cfgFile)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//  解析action配置</span></span><br><span class="line"><span class="comment">//            InputStream is = this.getClass().getResourceAsStream(cfgFile);</span></span><br><span class="line">            InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(cfgFile);</span><br><span class="line">             <span class="comment">// 创建saxReader对象  </span></span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();  </span><br><span class="line">            <span class="comment">// 通过read方法读取一个文件 转换成Document对象  </span></span><br><span class="line">            Document doc = reader.read(is);   <span class="comment">//new File(&quot;src/dom4j/sida.xml&quot;)</span></span><br><span class="line">            <span class="comment">//获取根节点元素对象  </span></span><br><span class="line">            Element actions = doc.getRootElement();</span><br><span class="line">            <span class="comment">//  遍历每个action标签</span></span><br><span class="line">            Iterator it = actions.elementIterator();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="comment">//  action转换为ActionMapping</span></span><br><span class="line">                ActionMapping am = <span class="keyword">new</span> ActionMapping();</span><br><span class="line">                Element action = (Element) it.next();</span><br><span class="line">                <span class="comment">// 获取action标签的属性name和class</span></span><br><span class="line">                String actionName = action.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                String actionClassName = action.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                </span><br><span class="line">                am.setActionName(actionName);</span><br><span class="line">                am.setActionClassName(actionClassName);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 遍历action下的result标签</span></span><br><span class="line">                Iterator results = action.elementIterator();</span><br><span class="line">                <span class="keyword">while</span> (results.hasNext()) &#123;</span><br><span class="line">                    Element result = (Element) results.next();</span><br><span class="line">                    <span class="comment">// 获取result标签的属性name和内容</span></span><br><span class="line">                    String resultName = result.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                    String redirect = result.attributeValue(<span class="string">&quot;redirect&quot;</span>);</span><br><span class="line">                    String resultContent = result.getTextTrim();</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isBlank(resultContent))</span><br><span class="line">                        resultContent = <span class="string">&quot;input&quot;</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//  保存result标签值</span></span><br><span class="line">                    Map&lt;String, String&gt; rs = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">                    rs.put(<span class="string">&quot;RESULT_CONTENT&quot;</span>, resultContent);</span><br><span class="line">                    rs.put(<span class="string">&quot;REDIRECT&quot;</span>, redirect);</span><br><span class="line">                    am.setResultMap(resultName, rs);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                actionMappings.put(am.getActionName(), am);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            </span><br><span class="line">        String cfgFile = <span class="string">&quot;E:\\html2pdf_codes\\snails\\src\\com\\snails\\framework\\config\\snails-actions.xml&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> ActionMappingManager().readCfg(cfgFile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法中的参数异常直接抛到上一层处理。代码也没什么难度，注意解析过程获取节点数据的关键字与xml文件对应即可。<br>如果你对xml文件的解析不是很明白请参考<a href="https://www.baidu.com/s?wd=dom4j%E8%A7%A3%E6%9E%90xml&rsv_spt=1&rsv_iqid=0xd4cdb0e5000a615d&issp=1&f=3&rsv_bp=1&rsv_idx=2&ie=utf-8&tn=baiduhome_pg&rsv_enter=0&oq=dom4j%E8%A7%A3%E6%9E%90xml&rsv_t=44e2UcI2nb1JG2MNxwVoCiJAnp7EY8mCUw8hbK5d9n4q6EYLtB5t/ooTycDqlaIQW4pq&rsv_sug3=8&rsv_sug1=6&rsv_sug7=100&rsv_pq=8bd2fa580008e6b8&rsv_sug4=458">xml解析教程</a>。其他不多说，请继续看后面的文章。</p><p>项目完整代码请看<a href="https://github.com/ubuntuvim/myMVC">MyMVC</a>，欢迎fork学习，如果你觉得对你有帮助给我点个赞吧，当然也欢迎给我提意见（email:<a href="mailto:&#x31;&#x35;&#x32;&#55;&#50;&#53;&#x34;&#48;&#50;&#55;&#x40;&#113;&#113;&#46;&#99;&#111;&#x6d;">&#x31;&#x35;&#x32;&#55;&#50;&#53;&#x34;&#48;&#50;&#55;&#x40;&#113;&#113;&#46;&#99;&#111;&#x6d;</a>，chendequanroob@gmail.com）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义MVC框架之四ActionMapping定义</title>
      <link href="/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%85%AB%E4%BD%BF%E7%94%A8%E6%A1%86%E6%9E%B6%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86/"/>
      <url>/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%85%AB%E4%BD%BF%E7%94%A8%E6%A1%86%E6%9E%B6%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86/</url>
      
        <content type="html"><![CDATA[<p>到此框架已经开发完成，此时你可以启动项目，验证项目是否有错误，特别是配置的文件的路径问题。<br>如果项目成功启动并且没有报任何错误，说明框架开发是没问题的，下面就是验证框架是否达到要求。我们使用登录这个非常常见的例子验证。</p><ol><li>新建三个JSP文件，这三个文件的作用请看<a href="https://github.com/ubuntuvim/study-note/blob/master/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%B8%80%E6%A1%86%E6%9E%B6%E6%80%BB%E8%AF%B4%E6%98%8E.md">自定义MVC框架之一框架总说明</a>中的说明</li><li>在配置文件<code>snails-actions.xml</code>增加<code>LoginAction</code>类配置</li><li>编写<code>LoginAction</code>，简单判断用户名和密码都是等于<code>admin</code>时跳转到成功页面<code>success.jsp</code>，否则跳转到失败页面<code>fail.jsp</code>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.snails.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.snails.framework.action.Action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">//  简单判断，如果用户名和密码都是admin则登录成</span></span><br><span class="line">        <span class="keyword">if</span> (username.equals(password)) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">            <span class="keyword">return</span> SUCCESS;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 要使用框架就必须实现<code>Action</code>类，并且实现方法<code>execute</code>，在此方法中调用M层处理，最后返回与配置对应的视图名。</p><h4 id="JSP页面"><a href="#JSP页面" class="headerlink" title="JSP页面"></a>JSP页面</h4><p>这三个JSP页面就不再贴出来了，请直接到<a href="https://github.com/ubuntuvim/myMVC/tree/master/WebContent">github项目myMVC</a>直接获取吧。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>启动项目，输入<a href="http://localhost:8080/snails/">http://localhost:8080/snails/</a>进入到登录页面。<br>用户名和密码都是输入admin，点击提交，可以看到了转到<code>success.jsp</code>。</p><p><strong>登录成功</strong></p><p><img src="http://7xnrhh.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160303175614.png" alt="用户名和密码输入admin"></p><p><img src="http://7xnrhh.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160303175655.png" alt="登录成功"></p><p><strong>登录失败</strong></p><p><img src="http://7xnrhh.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160303175715.png" alt="用户名和密码输入的不是admin"></p><p>可以看到地址栏为：<code>http://localhost:8080/snails/fail.jsp</code>因为此跳转设置为重定向（<code>&lt;result name=&quot;fail&quot; redirect=&quot;true&quot;&gt;fail.jsp&lt;/result&gt;</code>）。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>从结果验证上看，自己开发的MVC框架实现了类似于struts框架的功能，虽然没有struts那么强大，但是起码实现了视图层与控制层的分离，如果还有另外的业务我们只需要再添加一个实现<code>Action</code>类的控制器，然后再配置控制器。业务的跳转只需要在配置文件中配置即可，不需要再在Java代码中编写跳转。</p><p>项目完整代码请看<a href="https://github.com/ubuntuvim/myMVC">MyMVC</a>，欢迎fork学习，如果你觉得对你有帮助给我点个赞吧，当然也欢迎给我提意见（email:<a href="mailto:&#49;&#53;&#x32;&#x37;&#50;&#53;&#x34;&#x30;&#x32;&#x37;&#64;&#113;&#x71;&#46;&#99;&#111;&#109;">&#49;&#53;&#x32;&#x37;&#50;&#53;&#x34;&#x30;&#x32;&#x37;&#64;&#113;&#x71;&#46;&#99;&#111;&#109;</a>，chendequanroob@gmail.com）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义MVC框架之四ActionMapping定义</title>
      <link href="/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%85%ADActionManager%E5%AE%9A%E4%B9%89/"/>
      <url>/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%85%ADActionManager%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>本类主要用于根据类名反射得到类实例。类的名字根据解析得到的Action配置得到，得到Action配置中的<code>class</code>属性值后就可以使用反射获取类实例了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.snails.framework.action;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据action配置的class属性值反射得到对应的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionManager</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Action <span class="title">createAction</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = Thread.currentThread().getContextClassLoader().loadClass(className);</span><br><span class="line">            <span class="comment">//  判断当前线程是否运行了改action</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == clazz) &#123;</span><br><span class="line">                clazz = Class.forName(className);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> (Action) clazz.newInstance();</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目完整代码请看<a href="https://github.com/ubuntuvim/myMVC">MyMVC</a>，欢迎fork学习，如果你觉得对你有帮助给我点个赞吧，当然也欢迎给我提意见（email:<a href="mailto:&#x31;&#53;&#x32;&#x37;&#x32;&#53;&#x34;&#48;&#50;&#x37;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#109;">&#x31;&#53;&#x32;&#x37;&#x32;&#53;&#x34;&#48;&#50;&#x37;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#109;</a>，chendequanroob@gmail.com）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义MVC框架之四ActionMapping定义</title>
      <link href="/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%9B%9BActionMapping%E5%AE%9A%E4%B9%89/"/>
      <url>/2020/01/18/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6/%E8%87%AA%E5%AE%9A%E4%B9%89MVC%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%9B%9BActionMapping%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>有了Action配置之后，我们需要定义一个与配置匹配的javabean。主要是方便数据保存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.snails.framework.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每个ActionMapping对象对应着一个action配置。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;action name=&quot;login&quot; class=&quot;com.snails.action.LoginAction&quot;&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;result name=&quot;input&quot;&gt;index.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;result name=&quot;success&quot;&gt;success.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;/action&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionMapping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String actionName;</span><br><span class="line">    <span class="keyword">private</span> String actionClassName;</span><br><span class="line">    <span class="comment">//  result数组，参数一保存result的name属性值，参数二保存result标签内的内容</span></span><br><span class="line"><span class="comment">//    private Map&lt;String, String&gt; resultMap = new HashMap&lt;String, String&gt;();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  result数组，参数一保存result的name属性值，参数二也是一个map，保存result标签内的内容与属性redirect的值</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Map&lt;String, String&gt;&gt; resultMap = <span class="keyword">new</span> HashMap&lt;String, Map&lt;String, String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取标签 &lt;result name=&quot;resultName&quot; redirect=&quot;true&quot;&gt;xxx.jsp&lt;/result&gt; 的内容 xxx.jsp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 标签name属性值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> result标签的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getResult</span><span class="params">(String resultName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resultMap.get(resultName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResultMap</span><span class="params">(String resultNameAttr, Map&lt;String, String&gt; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resultMap.put(resultNameAttr, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getActionName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> actionName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setActionName</span><span class="params">(String actionName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.actionName = actionName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getActionClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> actionClassName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setActionClassName</span><span class="params">(String actionClassName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.actionClassName = actionClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目完整代码请看<a href="https://github.com/ubuntuvim/myMVC">MyMVC</a>，欢迎fork学习，如果你觉得对你有帮助给我点个赞吧，当然也欢迎给我提意见（email:<a href="mailto:&#49;&#53;&#50;&#x37;&#x32;&#x35;&#x34;&#48;&#x32;&#x37;&#64;&#x71;&#x71;&#46;&#99;&#111;&#x6d;">&#49;&#53;&#50;&#x37;&#x32;&#x35;&#x34;&#48;&#x32;&#x37;&#64;&#x71;&#x71;&#46;&#99;&#111;&#x6d;</a>，chendequanroob@gmail.com）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员的3年之痒改变的不止薪水</title>
      <link href="/2020/01/18/%E9%B8%A1%E6%B1%A4/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%843%E5%B9%B4%E4%B9%8B%E7%97%92%E6%94%B9%E5%8F%98%E7%9A%84%E4%B8%8D%E6%AD%A2%E8%96%AA%E6%B0%B4/"/>
      <url>/2020/01/18/%E9%B8%A1%E6%B1%A4/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%843%E5%B9%B4%E4%B9%8B%E7%97%92%E6%94%B9%E5%8F%98%E7%9A%84%E4%B8%8D%E6%AD%A2%E8%96%AA%E6%B0%B4/</url>
      
        <content type="html"><![CDATA[<p><strong>写在开始，这里借用特立独行的猫的一句话，你可以原地踏步，但别觉得别人都该和你一样。</strong></p><p><img src="http://bbs.aliyun.com/attachment/Fid_229/229_1427985705731853_07044c54f0a6465.jpg?84"></p><p>程序员的3年之痒，的确是时候该挠挠自己了。3年的程序员生涯，不长不短，但它的确是一个坎。3年改变了我们的不仅仅是年龄，当然还有薪水。</p><p>工作也有几年了，特别是今年要学的东西越来越多，然后感觉自己越来越无知。有时候恨不能所有的东西都要了解都要懂甚至要精通。但时间毕竟是有限的，况且你还有项目任务在身。当然很多时候也是惰性使然，空闲时间对于技术的关注虽然有，但是很多东西都是理论的东西。备注引用(工作了挺久，发现有个挺有意思的现象，从程序员、高级程序员，到现在挂着架构师、专家之类的头衔，伴随着技术和能力的提高，想不明白的事情反而越来越多了)</p><p>躺在那里的叫信息(information)，只有内化为自己的才是知识(knowledge)。涓涓细流，饮多少全凭心意。作为一名合格的程序员，你不能嘴上说的天花乱坠，实际让你去做的时候你就干瞪眼。从后台到前台，从汇编到java，从大数据到云计算，吾生有崖而知无崖，欣赏，开放，包容，很多地方都可以学习。</p><p>所以很多东西，特别是感兴趣的开源框架，我一般都会做一个demo，理论性深层的东西可以暂且放到一边，当然你要懂得基本的概念，它是个什么东西，用来做什么的。然后慢慢去接触一些框架底层的东西，实现原理和设计模式，当然你如果模仿框架写一个自己的东西，那么恭喜你框架模型已经吃透了。</p><p>记得前一段时间接触阿里巴巴的分布式框架dubbo，网上查询了很多资料，也加了几个群，关注一下架构大牛的心得历程。其中有一个同学，貌似依照dubbo写了一个属于自己的调度框架，虽然下面有些评论说基本跟dubbo一个架构，但我感觉他是吃透了这个框架才能一步步模仿来的，生活中处处不都是学习借鉴嘛。有句老话怎么说来，照着葫芦画瓢，虽然不甚完美，但有些人他连笔都懒得拿。</p><p>提到dubbo我不得不说下敏捷开发，现在很多公司提倡敏捷开发，包括我们公司，老总会议也是提倡我们要做敏捷开发。起初我是不大关注这个词语的还特意百度了一下，如下：敏捷开发以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发。在敏捷开发中，软件项目在构建初期被切分成多个子项目，各个子项目的成果都经过测试，具备可视、可集成和可运行使用的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。</p><p>但是就目前来说，公司的项目很多敏捷性都不够好，的确我们开发以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发，但后面的内容我们执行的很不好，或许我们缺少一个好的架构师，也许我们缺少一个好的前端设计师，更甚至我们缺少一个好的核心程序员。作为一个一线的程序员，你要知道一个功能要改N+1个项目的时候你是奔溃的，当你将要完成这个功能，上面说需求有变动时你是泪奔的，即使你愤怒也仅仅是你自己的事。你永远不知道这样的需求还有多少，而大多数程序员也就是这样过来的。</p><p>出现问题总是要解决问题，提出统一合理的解决方案，如果这件事现在没人做，对于你来说这何尝不是一次挑战或者是机会。程序员的思维不仅仅是完成本职工作，而应该是敢于突破自己，挑战公司现有平台的缺陷和不合理的地方。程序员的经验不是随着岁月的流逝而累加的，也就是说经验的增长并不与年龄成正比的。不是说你工作3年就一定能成为一个中级或者高级程序员，也不是说你才工作2年就不可以成为一个架构师。还是那句话，涓涓细流，饮多少全凭心意。你掌握多少东西在心而不是在年龄。</p><p>安逸的公司环境会是一个不求上进的程序员，变得更加懒惰，我甚至无法想象如果脱离公司去其他项目公司会是怎样一种情景。所以，我时常跟身边的同事说，不要仅仅做好本职工作就ok了。不要空闲的时候无所事事，浏览新闻，逛贴吧，这个年龄段你应该成熟的去面对和规划自己的职业生涯了。不要觉得自己多做了就是吃亏，要知道做了就是自己了，年终总结不是写个一二三那么简单。不要庆幸，上级就给我分配了一点任务，又可以无聊发呆看新闻了，殊不知，上级可能觉得你根本无法承担此任务(这样你还感到庆幸吗)。</p><p>你得尝试着去改变，不能因为公司怎样你就可以这样一直下去。事情总是朝着好的方向去发展的，你要真正把自己当成公司的一员，而不是一个打工的。你要把公司向好的一面去推进，其实很早有就发现公司平台有很多差强人意的地方，只是的确自己水平有限，有改造的想法，但是没有实施的能力。</p><p>你得尝试着去改变，你要把平台复杂的问题简单化，重复的任务统一化。我觉得这才是敏捷开发的根本，用最少得时间成本解决相对复杂繁重的问题。最近也在研究一些架构性的我东西，也是得益于李智慧老师的大型网站技术架构，很系统很全面。什么是架构？有人讲， 说架构并不是一 个很 悬 乎的 东西 ， 实际 上就是一个架子 ， 放一些 业务 和算法，跟我们的生活中的晾衣架很像。更抽象一点，说架构其 实 是 对 我 们 重复性业务 的抽象和我 们 未来 业务 拓展的前瞻，强调过去的经验和你对整个行业的预见。 </p><p><img src="http://bbs.aliyun.com/attachment/Fid_229/229_1427985705731853_896e8c6de5abb50.png?69"></p><p> 一个合理的架构设计后期是可以避免很多不必要的繁重的任务。从你的项目搭建，服务化组件，消息中间件，数据库中间件，配置管理，甚至于项目安全，高可用，扩展性，伸缩性等等都是架构师所考虑的范畴。当然一个合格的架构师关注的是人而不是产品，一定要坚信：一群优秀的人做一件他们热爱的事情，一定能取得成功。不管过程多么曲折，不管外人开来多么不可思议。一个好的产品，驱动应该是人而不应该是其它。一个优秀的架构师，指望优秀的人来帮自己做事，不如做成一件事让自己和参与的人都变得优秀。</p><p>成长是需要过程的，更是需要用心的，所以不要在最好的年华浪费了你最充沛的精力。前几天一个朋友碰巧问到我并发的问题，其实这方面我也接触的比较少，至少到目前为止公司的项目数据库都没有做主从、读写分离，又何来的高并发让你去实践。但这并不代表有些东西你就不能去接触，未来和机会总是留给时刻有准备的人。高并发其实虚无缥缈东西，很少有网站真的需要这些东西，而且其中很多技术，其实你已经在用了，只有很少的网站真的能达到高并发， 所以很多人没有接触也是常态。</p><p>其实对于这个问题，我是不好意思回答的。虽然系统中也用到了类似的技术，比如页面静态化，本地缓存服务，Nginx反向代理，静态文件压缩以及动静分离。当然还有，消息队列，文件服务器，数据库主和集群，应用负载均衡集群以及分布式服务等等。说到底，解决高并发无非是上面技术的罗列，程序员要做的就是把每个技术具体实现。 </p><p> 对于一些创业型公司来说，免费的永远是最好的，linux、nginx、tomcat、mysql、java，redis……各种开源免费的工具。在保障可用的情况的，尽量使公司的利益最大化。<br>所以作为一名合格的程序员，你不仅仅要会写几行代码，掌握以上开源的工具也很重要的。对于linux的关注，其实也是在去年开始。由于win2003的不再维护，我狠狠心把服务器系统换成了linux系统。从开始的不习惯到现在的得心应手，说真的，不要畏缩不要不敢去尝试，习惯这东西说白了就是懒惰，明知道有更好的解决方案，更好的结果和未来，你就不去做，除了懒能是什么？</p><p>再长的路一步一步也能走完，再短的路不迈开双脚也无法到达。可能这句话用在这里不是那么恰当，只是让大家明白一点，勇敢的走出一步，兴趣永远是最好的老师，当然一步步收获的喜悦也是你前进的动力。</p><p>说了这么多，有点乱，但都是平时的一些思考。这里引用博客园的一段话：</p><p> <img src="http://bbs.aliyun.com/attachment/Fid_229/229_1427985705731853_65f18b2befc2562.png?48"></p><p> 如何不停的学习和提升，这里以Java语言为例，首先， 一定要 理解 JAVA；第二步，JAVA完了以后，一定要 理 解 JVM；其次，还要 理解 操作系统；再次还是要了解一下 Design Pattern，这将告诉你怎么把过去的经验抽象沉淀供将来借鉴；还要学习 TCP/IP、 分布式系 统、数据结构和算法。</p><p>最后就是我想说的就是今天我所说的可能一切都是错的！大家通过不停的学习、练习和总结， 形成自己的一认知体系，谢谢大家。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 鸡汤 </tag>
            
            <tag> 软文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举（enumerables）</title>
      <link href="/2020/01/18/ember-teach/The%20Object%20Model/%E6%9E%9A%E4%B8%BE%EF%BC%88enumerables%EF%BC%89/"/>
      <url>/2020/01/18/ember-teach/The%20Object%20Model/%E6%9E%9A%E4%B8%BE%EF%BC%88enumerables%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在<code>Ember</code>中，枚举是包含多个子对象的对象，并且提供了丰富的API（<a href="http://emberjs.com/api/classes/Ember.Enumerable.html">Ember.Enumerable API</a>）去获取所包含的子对象。<code>Ember</code>的枚举都是基于原生的<code>javascript</code>数组实现的，<code>Ember</code>扩展了其中的很多接口。<br><code>Ember</code>提供一个标准化接口处理枚举，并且允许开发者完全改变底层数据存储，而无需修改应用程序的数据访问代码。<br><code>Ember</code>的<code>Enumerable API</code>尽可能的遵照<code>ECMAScript</code>规范。为了减少与其他库不兼容，<code>Ember</code>允许你使用本地浏览器实现数组。</p><p>下面是一些重要而常用的<code>API</code>列表；请注意左右两列的不同。</p><table border="1">  <tr bgcolor="#ccc">      <td>标准方法</td>      <td>可被观察方法</td>      <td>说明</td>  </tr>  <tr>    <td>pop</td>    <td>popObject</td>    <td>该函数从从数组中删除最后项，并返回该删除项</td>  </tr>  <tr>    <td>push</td>    <td>pushObject</td>    <td>新增元素</td>  </tr> <tr>    <td>reverse</td>    <td>reverseObject</td>    <td>颠倒数组元素</td>  </tr><tr>    <td>shift</td>    <td>shiftObject</td>    <td>把数组的第一个元素从其中删除，并返回第一个元素的值</td>  </tr><tr>    <td>unshift</td>    <td>unshiftObject</td>    <td>可向数组的开头添加一个或更多元素，并返回新的长度</td>  </tr></table><p>详细文档请看：<a href="http://emberjs.com/api/classes/Ember.Enumerable.html">http://emberjs.com/api/classes/Ember.Enumerable.html</a></p><p>在列表上右侧的方法是<code>Ember</code>重写标准的<code>JavaScript</code>方法而得的，他们最大的不同之处是使用普通的方法（左边部分）操作的数组不会在你的应用程序中自动更新（不会触发观察者），而使用<code>Ember</code>重写过的方法则可以触发观察者，只要你的数据有变化<code>Ember</code>就可以观察到，并且更新到模板上。</p><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h4 id="1，数组迭代器"><a href="#1，数组迭代器" class="headerlink" title="1，数组迭代器"></a>1，数组迭代器</h4><p>遍历数组元素使用<code>forEach</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;chen&#x27;</span>, <span class="string">&#x27;ubuntuvm&#x27;</span>, <span class="string">&#x27;1527254027@qq.com&#x27;</span>, <span class="string">&#x27;i2cao.xyz&#x27;</span>, <span class="string">&#x27;ubuntuvim.xyz&#x27;</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index+<span class="number">1</span> + <span class="string">&quot;, &quot;</span> +item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2，获取数组首尾元素"><a href="#2，获取数组首尾元素" class="headerlink" title="2，获取数组首尾元素"></a>2，获取数组首尾元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  获取头尾的元素，直接调用Ember封装好的firstObject和lastObject方法即可</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;The firstItem is &#x27;</span> + arr.get(<span class="string">&#x27;firstObject&#x27;</span>));  <span class="comment">// output&gt; chen</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;The lastItem is &#x27;</span> + arr.get(<span class="string">&#x27;lastObject&#x27;</span>));  <span class="comment">//output&gt; ubuntuvim.xyz</span></span><br></pre></td></tr></table></figure><h4 id="3，map方法"><a href="#3，map方法" class="headerlink" title="3，map方法"></a>3，map方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  map方法，转换数组，并且可以在回调函数里添加自己的逻辑</span></span><br><span class="line"><span class="comment">//  map方法会新建一个数组，并且返回被转换数组的元素</span></span><br><span class="line"><span class="keyword">var</span> arrMap = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;map: &#x27;</span> + item;  <span class="comment">//  增加自己的所需要的逻辑处理</span></span><br><span class="line">&#125;);</span><br><span class="line">arrMap.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;-----------------------------------------------&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="4，mapBy方法"><a href="#4，mapBy方法" class="headerlink" title="4，mapBy方法"></a>4，mapBy方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mapBy 方法：返回对象属性的集合，</span></span><br><span class="line"><span class="comment">// 当你的数组元素是一个对象的时候，你可以根据对象的属性名获取对应值</span></span><br><span class="line"><span class="keyword">var</span> obj1 = Ember.Object.create(&#123;</span><br><span class="line">  username: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  age: <span class="number">25</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj2 = Ember.Object.create(&#123;</span><br><span class="line">  username: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">  age: <span class="number">35</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> obj3 = Ember.Object.create(&#123;</span><br><span class="line">  username: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  age: <span class="number">40</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj4 = Ember.Object.create(&#123;</span><br><span class="line">  age: <span class="number">40</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> arrObj = [obj1, obj2, obj3, obj4];  <span class="comment">//对象数组</span></span><br><span class="line"><span class="keyword">var</span> tmp = arrObj.mapBy(<span class="string">&#x27;username&#x27;</span>);  <span class="comment">// </span></span><br><span class="line"> </span><br><span class="line">tmp.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index+<span class="number">1</span>+<span class="string">&quot;, &quot;</span>+item);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;-----------------------------------------------&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="5，filter方法"><a href="#5，filter方法" class="headerlink" title="5，filter方法"></a>5，filter方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  filter 过滤器方法，过滤普通数组元素</span></span><br><span class="line"><span class="comment">//  filter方法可以跟你指定的条件过滤掉不匹配的数据，比如下面的代码：过滤了元素大于4的元素</span></span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">//  参数self值数组本身</span></span><br><span class="line"><span class="keyword">var</span> numsTmp = nums.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, self</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &lt; <span class="number">4</span>;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">numsTmp.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;item = &#x27;</span> + item);  <span class="comment">//  1， 2， 3</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;-----------------------------------------------&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>filter</code>方法会返回所有判断为<code>true</code>的元素，会把判断结果为<code>false</code>或者<code>undefined</code>的元素过滤掉。</p><h4 id="6，filterBy方法"><a href="#6，filterBy方法" class="headerlink" title="6，filterBy方法"></a>6，filterBy方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  如果你想根据对象的某个属性过滤数组你需要用filterBy方法，比如下面的代码根据isDone这个对象属性过滤</span></span><br><span class="line"><span class="keyword">var</span> o1 = Ember.Object.create(&#123;</span><br><span class="line">  name: <span class="string">&#x27;u1&#x27;</span>,</span><br><span class="line">  isDone: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> o2 = Ember.Object.create(&#123;</span><br><span class="line">  name: <span class="string">&#x27;u2&#x27;</span>,</span><br><span class="line">  isDone: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> o3 = Ember.Object.create(&#123;</span><br><span class="line">  name: <span class="string">&#x27;u3&#x27;</span>,</span><br><span class="line">  isDone: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> o4 = Ember.Object.create(&#123;</span><br><span class="line">  name: <span class="string">&#x27;u4&#x27;</span>,</span><br><span class="line">  isDone: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> todos = [o1, o2, o3, o4];</span><br><span class="line"><span class="keyword">var</span> isDoneArr = todos.filterBy(<span class="string">&#x27;isDone&#x27;</span>, <span class="literal">true</span>);  <span class="comment">//会把o2过滤掉</span></span><br><span class="line">isDoneArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;name = &#x27;</span> + item.get(<span class="string">&#x27;name&#x27;</span>) + <span class="string">&#x27;, isDone = &#x27;</span> + item.get(<span class="string">&#x27;isDone&#x27;</span>));</span><br><span class="line">  <span class="comment">// console.log(item);</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;-----------------------------------------------&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>filter</code>和<code>filterBy</code>不同的地方是前者可以自定义过滤逻辑，后者可以直接使用。</p><h4 id="7，every、some方法"><a href="#7，every、some方法" class="headerlink" title="7，every、some方法"></a>7，every、some方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// every、some 方法</span></span><br><span class="line"><span class="comment">// every 用于判断数组的所有元素是否符合条件，如果所有元素都符合指定的判断条件则返回true，否则返回false</span></span><br><span class="line"><span class="comment">// some 用于判断数组的所有元素只要有一个元素符合条件就返回true，否则返回false</span></span><br><span class="line">Person = Ember.Object.extend(&#123;</span><br><span class="line">  name: <span class="literal">null</span>,</span><br><span class="line">  isHappy: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> people = [</span><br><span class="line">  Person.create(&#123; <span class="attr">name</span>: <span class="string">&#x27;chen&#x27;</span>, <span class="attr">isHappy</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  Person.create(&#123; <span class="attr">name</span>: <span class="string">&#x27;ubuntuvim&#x27;</span>, <span class="attr">isHappy</span>: <span class="literal">false</span> &#125;),</span><br><span class="line">  Person.create(&#123; <span class="attr">name</span>: <span class="string">&#x27;i2cao.xyz&#x27;</span>, <span class="attr">isHappy</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  Person.create(&#123; <span class="attr">name</span>: <span class="string">&#x27;123&#x27;</span>, <span class="attr">isHappy</span>: <span class="literal">false</span> &#125;),</span><br><span class="line">  Person.create(&#123; <span class="attr">name</span>: <span class="string">&#x27;ibeginner.sinaapp.com&#x27;</span>, <span class="attr">isHappy</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> every = people.every(<span class="function"><span class="keyword">function</span>(<span class="params">person, index, self</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (person.get(<span class="string">&#x27;isHappy&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;every = &#x27;</span> + every);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> some = people.some(<span class="function"><span class="keyword">function</span>(<span class="params">person, index, self</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (person.get(<span class="string">&#x27;isHappy&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;some = &#x27;</span> + some);</span><br></pre></td></tr></table></figure><h4 id="8，isEvery、isAny方法"><a href="#8，isEvery、isAny方法" class="headerlink" title="8，isEvery、isAny方法"></a>8，isEvery、isAny方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  与every、some类似的方法还有isEvery、isAny </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;isEvery = &#x27;</span> + people.isEvery(<span class="string">&#x27;isHappy&#x27;</span>, <span class="literal">true</span>));  <span class="comment">//  全部都为true，返回结果才是true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;isAny = &#x27;</span> + people.isAny(<span class="string">&#x27;isHappy&#x27;</span>, <span class="literal">true</span>));  <span class="comment">//只要有一个为true，返回结果就是true</span></span><br></pre></td></tr></table></figure><p>上述方法的使用与普通<code>JavaScript</code>提供的方法基本一致。学习难度不大⋯⋯自己敲两边就懂了！</p><p>这些方法非常重要，请一定要学会如何使用！！！<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用在github项目上给我个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类的扩展</title>
      <link href="/2020/01/18/ember-teach/The%20Object%20Model/%E7%B1%BB%E7%9A%84%E6%89%A9%E5%B1%95/"/>
      <url>/2020/01/18/ember-teach/The%20Object%20Model/%E7%B1%BB%E7%9A%84%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h3 id="扩展一般属性"><a href="#扩展一般属性" class="headerlink" title="扩展一般属性"></a>扩展一般属性</h3><blockquote><p><code>reopen</code>不知道怎么翻译好，如果按照<code>reopen</code>翻译过来应该是“重新打开”，但是总觉得不顺，所以就译成<code>扩展</code>了，如果有不妥请指正。</p></blockquote><p>当你想扩展一个类你可以直接使用<code>reopen()</code>方法为一个已经定义好的类添加属性、方法。如果是使用<code>extend()</code>方法你需要重新定义一个子类，然后在子类中添加新的属性、方法。<br>前一篇所过，调用<code>create()</code>方法时候不能传入计算属性并且不推荐在此方法中新定义、重写方法，但是使用<code>reopen()</code>方法可以弥补<code>create()</code>方法的补足。与<code>extend()</code>方法非常相似，下面的代码演示了它们的不同之处。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">Parent = Ember.Object.extend(&#123;</span><br><span class="line">    name: <span class="string">&#x27;ubuntuvim&#x27;</span>,</span><br><span class="line">    fun1() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;The name is &quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    common() &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;common method...&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);   </span><br><span class="line"></span><br><span class="line"><span class="comment">//  使用extend()方法添加新的属性、方法</span></span><br><span class="line">Child1 = Parent.extend(&#123;</span><br><span class="line">    <span class="comment">//  给类Parent为新增一个属性</span></span><br><span class="line">    pwd: <span class="string">&#x27;12345&#x27;</span>,</span><br><span class="line">    <span class="comment">//  给类Parent为新增一个方法</span></span><br><span class="line">    fun2() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;The pwd is &quot;</span> + <span class="built_in">this</span>.pwd);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//    重写父类的common()方法</span></span><br><span class="line">    common() &#123;</span><br><span class="line">        <span class="comment">//console.log(&quot;override common method of parent...&quot;);</span></span><br><span class="line">        <span class="built_in">this</span>._super();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> c1 = Child1.create();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name = &quot;</span> + c1.get(<span class="string">&#x27;name&#x27;</span>) + <span class="string">&quot;, pwd = &quot;</span> + c1.get(<span class="string">&#x27;pwd&#x27;</span>));   </span><br><span class="line">c1.fun1();</span><br><span class="line">c1.fun2();     </span><br><span class="line">c1.common();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;-----------------------&quot;</span>);    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//  使用reopen()方法添加新的属性、方法</span></span><br><span class="line">Parent.reopen(&#123;</span><br><span class="line">    <span class="comment">//  给类Parent为新增一个属性</span></span><br><span class="line">    pwd: <span class="string">&#x27;12345&#x27;</span>,</span><br><span class="line">    <span class="comment">//  给类Parent为新增一个方法</span></span><br><span class="line">    fun2() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;The pwd is &quot;</span> + <span class="built_in">this</span>.pwd);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//  重写类本身common()方法</span></span><br><span class="line">    common() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;override common method by reopen method...&quot;</span>);</span><br><span class="line">        <span class="comment">//this._super();</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//  新增一个计算属性</span></span><br><span class="line">    fullName: Ember.computed(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;compute method...&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p = Parent.create();    </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name = &quot;</span> + p.get(<span class="string">&#x27;name&#x27;</span>) + <span class="string">&quot;, pwd = &quot;</span> + p.get(<span class="string">&#x27;pwd&#x27;</span>));   </span><br><span class="line">p.fun1();</span><br><span class="line">p.fun2();    </span><br><span class="line">p.common();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;---------------------------&quot;</span>);    </span><br><span class="line">p.get(<span class="string">&#x27;fullName&#x27;</span>);  <span class="comment">//  获取计算属性值，这里是直接输出：compute method...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  使用extend()方法添加新的属性、方法</span></span><br><span class="line">Child2 = Parent.extend(&#123;</span><br><span class="line">    <span class="comment">//  给类Parent为新增一个属性</span></span><br><span class="line">    pwd: <span class="string">&#x27;12345&#x27;</span>,</span><br><span class="line">    <span class="comment">//  给类Parent为新增一个方法</span></span><br><span class="line">    fun2() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;The pwd is &quot;</span> + <span class="built_in">this</span>.pwd);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//    重写父类的common()方法</span></span><br><span class="line">    common() &#123;</span><br><span class="line">        <span class="comment">//console.log(&quot;override common method of parent...&quot;);</span></span><br><span class="line">        <span class="built_in">this</span>._super();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);    </span><br><span class="line"><span class="keyword">var</span> c2 = Child2.create();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name = &quot;</span> + c2.get(<span class="string">&#x27;name&#x27;</span>) + <span class="string">&quot;, pwd = &quot;</span> + c2.get(<span class="string">&#x27;pwd&#x27;</span>));   </span><br><span class="line">c2.fun1();</span><br><span class="line">c2.fun2(); </span><br><span class="line">c2.common();</span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/img/201509/07145943_tsNb.png" alt="执行结果"></p><p>从执行结果可以看到如下的差异:<br><br><strong>同点</strong>： 都可以用于扩展某个类。<br><br><strong>异点</strong>：<br></p><ol><li><code>extend</code>需要重新定义一个类并且要继承被扩展的类；</li><li><code>reopen</code>是在被扩展的类本身上新增属性、方法，可以扩展计算属性（相比<code>create()</code>方法）； </li></ol><p>到底用那个方法有实际情况而定，<code>reopen</code>方法会改变了原类的行为（可以想象为修改了对象的原型对象的方法和属性），就如演示实例一样在<code>reopen</code>方法之后调用的<code>Child2</code>类的<code>common</code>方法的行为已经改改变了，在编码过程忘记之前已经调用过<code>reopen</code>方法就有可能出现自己都不知道怎么回事的问题！<br>如果是<code>extend</code>方法会导致类越来越多，继承树也会越来越深，对性能、调试也是一大挑战，但是<code>extend</code>不会改变被继承类的行为。</p><h3 id="扩展静态属性"><a href="#扩展静态属性" class="headerlink" title="扩展静态属性"></a>扩展静态属性</h3><p>使用<code>reopenClass()</code>方法可以扩展<code>static</code>类型的属性、方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Parent = Ember.Object.extend();   </span><br><span class="line">    </span><br><span class="line"><span class="comment">//  使用reopenClass()方法添加新的static属性、方法</span></span><br><span class="line">Parent.reopenClass(&#123;</span><br><span class="line">    isPerson: <span class="literal">true</span>,</span><br><span class="line">    username: <span class="string">&#x27;blog.ddlisting.com&#x27;</span> </span><br><span class="line">    <span class="comment">//,name: &#x27;test&#x27;  //这里有点奇怪，不知道为何不能使用名称为name定义属性，会提示这个是自读属性，使用username却没问题！！估计name是这个方法的保留关键字</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Parent.reopen(&#123;</span><br><span class="line">    isPerson: <span class="literal">false</span>,</span><br><span class="line">    name: <span class="string">&#x27;ubuntuvim&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(Parent.isPerson);</span><br><span class="line"><span class="built_in">console</span>.log(Parent.name);  <span class="comment">//  输出空</span></span><br><span class="line"><span class="built_in">console</span>.log(Parent.create().get(<span class="string">&#x27;isPerson&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(Parent.create().get(<span class="string">&#x27;name&#x27;</span>));    <span class="comment">//  输出 ubuntuvim</span></span><br></pre></td></tr></table></figure><p>对于在<code>reopenClass</code>方法中使用属性<code>name</code>的问题下面的地址有解释</p><ol><li><a href="http://discuss.emberjs.com/t/reopenclass-method-can-not-pass-attribute-named-name-of-it/10189">http://discuss.emberjs.com/t/reopenclass-method-can-not-pass-attribute-named-name-of-it/10189</a></li><li><a href="http://stackoverflow.com/questions/36078464/reopenclass-method-can-not-pass-attribute-named-name-of-it">http://stackoverflow.com/questions/36078464/reopenclass-method-can-not-pass-attribute-named-name-of-it</a></li></ol><p>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用在github项目上给我个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类的定义、初始化、继承</title>
      <link href="/2020/01/18/ember-teach/The%20Object%20Model/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%81%E7%BB%A7%E6%89%BF/"/>
      <url>/2020/01/18/ember-teach/The%20Object%20Model/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%81%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p><a href="http://emberjs.com/">Ember JS</a>提供一套自己的类系统，普通的<code>JavaScript</code>标准类不能自动更新属性值，Ember JS的类会自动触发观察者，自动更新属性值、自动刷新模板上的属性值。如果一个类是Ember JS提供的可以看到前缀命名空间是<code>Ember.Object</code>。<br><code>Ember</code>类定义使用<code>extend()</code>方法，创建类实例使用<code>create()</code>方法，可以在方法传入参数，但是参数要以<code>hash</code>列表方式传入。</p><p>Ember JS重写了标准<code>JavaScript</code>的数组类<code>Array</code>，并且为了与标准<code>JavaScript</code>类区别命名为<code>Ember.Enumerable</code>（<a href="http://emberjs.com/api/classes/Ember.Enumerable.html">API介绍</a>）</p><p>Ember JS还扩展了<code>String</code>属性的特性，提供了一系列特有的处理方法，<a href="http://emberjs.com/api/classes/Ember.String.html">API介绍</a>。</p><p><em>关于类的命名规则在此不做介绍，自己网上找一份<code>Java</code>的命名规则的教材看看即可。</em></p><p>开始之前先做好准备工作，首先创建一个HTML文件，并引入Ember JS所必须的文件（后面会介绍一种更加简单的方法去搭建<code>EmberJS</code>的项目方法，当然如果你有时间也可以提前去了解，这种方式是使用<a href="http://www.ember-cli.com/user-guide/"><code>Ember CLI</code></a>搭建<code>EmberJS</code>的项目）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ember.js • Guides<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn.bootcss.com/jquery/2.0.0/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  &lt;script src=&quot;http://cdn.bootcss.com/ember.js/2.1.0-beta.2/ember.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn.bootcss.com/ember.js/2.1.0-beta.2/ember.debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn.bootcss.com/ember.js/2.1.0-beta.2/ember.prod.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//  在这里编写Ember代码</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码是一个简单的<code>HTML</code>文件，所需的<code>Ember</code>库直接使用<code>CDN</code>。</p><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><p>下面定义一个<code>Person</code>类，定义方式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person = Ember.Object.extend(&#123;</span><br><span class="line">  say(thing) &#123;</span><br><span class="line">    alert(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码定义了一个<code>Person</code>类，并且在类里面还定义了一个方法<code>say</code>，方法传入一个参数<code>thing</code>。方法体仅仅是打印了传入的参数。</p><h3 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h3><p>在子类重写父类的方法，并在方法里调用<code>_super()</code>方法来调用父类中对应的方法触发父类方法的行为。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Person = Ember.Object.extend(&#123;</span><br><span class="line">    </span><br><span class="line">  say(thing) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="built_in">this</span>.get(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">    alert(name + <span class="string">&quot; says: &quot;</span> + thing);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Soldier = Person.extend(&#123;</span><br><span class="line">    </span><br><span class="line">  say(thing) &#123;</span><br><span class="line">    <span class="comment">// this will call the method in the parent class (Person#say), appending</span></span><br><span class="line">    <span class="comment">// the string &quot;, sir!&quot; to the variable `thing` passed in</span></span><br><span class="line">    <span class="built_in">this</span>._super(thing + <span class="string">&quot;, sir!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yehuda = Soldier.create(&#123;</span><br><span class="line">  name: <span class="string">&quot;Yehuda Katz&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">yehuda.say(<span class="string">&quot;Yes&quot;</span>); <span class="comment">// alerts &quot;Yehuda Katz says: Yes, sir!&quot;</span></span><br></pre></td></tr></table></figure><p>运行代码，刷新浏览器，可以看到如下结果：</p><p><img src="http://7xnrhh.com1.z0.glb.clouddn.com/1.png" alt="运行结果截图"></p><p>结果正确了，但是我们还不知道类是怎么初始化的，它初始化的顺序又是怎么样的呢？其实每个类都有一个默认的初始化方法，555……别急，接着往下看。</p><h3 id="类实例化"><a href="#类实例化" class="headerlink" title="类实例化"></a>类实例化</h3><p>要获取一个类的实例只需要调用类的<code>create()</code>方法即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Person = Ember.Object.extend(&#123;</span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;My name is &quot;</span> + <span class="built_in">this</span>.get(<span class="string">&#x27;name&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> person = Person.create(&#123;</span><br><span class="line">    name: <span class="string">&#x27;ubuntuvim&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">person.show();  <span class="comment">// My name is ubuntuvim</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> person2 = Person.create(&#123;</span><br><span class="line">    pwd: <span class="string">&#x27;ubuntuvim&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//  由于创建person2的时候没有设置name的值，默认是undefined</span></span><br><span class="line">person2.show();  <span class="comment">// My name is undefined</span></span><br></pre></td></tr></table></figure><p><img src="http://7xnrhh.com1.z0.glb.clouddn.com/2.png" alt="结果图"></p><p><strong>注意</strong>：处于性能的考虑在使用<code>create()</code>方法创建实例的时候，不允许新定义、重写计算属性，也不推荐新定义、重写普通方法，<code>Ember</code>推荐在使用<code>create()</code>方法时只是传递简单的参数，比如上述代码的<code>&#123;name: &#39;ubuntuvim&#39;&#125;</code>。如果你需要新地定义、重写方法请新建一个子类来实现。</p><p><strong>在<code>create()</code>方法内定义计算属性</strong>，运行后会直接报如下图的报错信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person = Ember.Object.create(&#123;</span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;My name is &quot;</span> + <span class="built_in">this</span>.get(<span class="string">&#x27;name&#x27;</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    fullName: Ember.computed(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;computed properties.&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/img/201509/07100717_uEV8.png" alt="报错信息"></p><h3 id="类初始化"><a href="#类初始化" class="headerlink" title="类初始化"></a>类初始化</h3><p>前面提过，我们在类继承的时候到底类是怎么初始化，这节就介绍类的初始化，<code>Ember</code>定义了一个<code>init()</code>方法，此方法在类被实例化的时候自动调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Parent = Ember.Object.extend(&#123;</span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;parent init...&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;My name is &quot;</span> + <span class="built_in">this</span>.get(<span class="string">&#x27;name&#x27;</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    others() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;the method in parent class..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//parent = Parent.create(&#123;</span></span><br><span class="line"><span class="comment">//    name: &#x27;parent&#x27;</span></span><br><span class="line"><span class="comment">//&#125;);  </span></span><br><span class="line">    </span><br><span class="line">Child = Parent.extend(&#123;</span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;child init...&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="built_in">this</span>._super();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">child = Child.create(&#123;</span><br><span class="line">    name: <span class="string">&#x27;child&#x27;</span></span><br><span class="line">&#125;);    </span><br><span class="line">child.show();</span><br><span class="line">child.others();</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<code>init()</code>方法只有在类的<code>create()</code>方法被调用的时候才会被自动调用，上面的例子中，如果只是<code>child.others()</code>这个方法父类并不会调用<code>init()</code>方法，只有执行<code>Parent.create()</code>这个调用的时候才会执行<code>init()</code>方法。<br>上面代码如果把<code>Parent.create()</code>这几句代码注释掉得到的结果如下：</p><p><img src="http://7xnrhh.com1.z0.glb.clouddn.com/3.png" alt="运行结果"></p><p>可见父类的<code>init()</code>方法没有被调用，然后修改代码，注释掉<code>child.others()</code>这句，再把<code>Parent.create()</code>这几句的注释去掉。得到如下结果</p><p><img src="http://7xnrhh.com1.z0.glb.clouddn.com/4.png" alt="去掉child.others()结果"></p><p>可以看到父类的<code>init()</code>方法被调用了！由此可见<code>init()</code>方法是在调用<code>create()</code>方法的时候才调用的。<br>在项目中有可能你需要继承<code>Ember</code>提供的组件，比如继承<code>Ember.Component</code>类，此时你就要注意了，在你继承<code>Ember</code>的组件的时候你必须显式的调用父类方法<code>this._super()</code>否则你继承得到的类无法获取<code>Component</code>提供的行为或者得到无法预知的结果。</p><h3 id="类属性的访问"><a href="#类属性的访问" class="headerlink" title="类属性的访问"></a>类属性的访问</h3><p><code>Ember</code>建议访问类的属性使用<code>get、set</code>方法。如果你直接使用<code>obj.prop</code>这种方式访问也是可以得到类的属性值，但是如果你不是使用访问器操作的就会导致很多问题：计算属性不能被重新计算、无法察觉对象属性的变化、模板也不能自动更新。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Person = Ember.Object.extend(&#123;</span><br><span class="line">    name: <span class="string">&#x27;ubuntuvim&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Ember 推荐的访问方式</span></span><br><span class="line"><span class="keyword">var</span> person = Person.create();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;My name is &quot;</span> + person.get(<span class="string">&#x27;name&#x27;</span>));</span><br><span class="line">person.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&quot;Tobias Funke&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;My name is &quot;</span> + person.get(<span class="string">&#x27;name&#x27;</span>));   </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line"><span class="comment">//  不推荐的方式</span></span><br><span class="line"><span class="keyword">var</span> person2 = Person.create();    </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;My name is &quot;</span> + person2.name);</span><br><span class="line">person2.name = <span class="string">&quot;Tobias Funke&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;My name is &quot;</span> + person2.name);</span><br></pre></td></tr></table></figure><p>Ember为我们封装了<code>get、set</code>实现细节，开发者直接使用即可。<br><br><br>最后感谢<a href="http://weibo.com/3265765111">唯獨莪靑睐</a>的指正。<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用在github项目上给我个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章对象模型小结</title>
      <link href="/2020/01/18/ember-teach/The%20Object%20Model/%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%B0%8F%E7%BB%93/"/>
      <url>/2020/01/18/ember-teach/The%20Object%20Model/%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>本篇之前的6篇文章都是第一章的内容，这一章节主要介绍了<code>Ember</code>的对象模型。其中最重要的是计算属性和枚举这2章，非常之重要，一定要好好掌握！</p><p>下一章节是第二章模板，<code>Ember</code>应用使用的模板库是<code>handlebar</code>（<a href="http://handlebarsjs.com/">点我查看更多有关此模板的介绍</a>），这个模板库功能强大，有丰富的标签，包括判断标签<code>if</code>，<code>if else</code>,以及遍历标签<code>each</code>等等。</p><p>另外，从下一章开始，我们不再自己手动搭建<code>Ember</code>项目，也不用手动引入<code>Ember</code>库文件，而是使用官方提供的一个非常棒的构建工具——<code>Ember CLI</code>，要使用这个构建工具首先安装并配置。下面两个地址是介绍安装与配置的（推荐第一个）：</p><ol><li><a href="http://www.ember-cli.com/user-guide/">http://www.ember-cli.com/user-guide/</a></li><li><a href="https://guides.emberjs.com/v2.4.0/getting-started/">https://guides.emberjs.com/v2.4.0/getting-started/</a></li></ol><p><code>Ember CLI</code>是一个非常重要的构建工具，它可以为开发者创建文件并初始化部分固定的代码。它还可以运行、打包、测试<code>Ember</code>应用。</p><p>下面使用这个工具创建一个新的<code>Ember</code>项目<code>chapter2_tempalte</code>。</p><ol><li>新建项目命令:<br><code>ember new chapter2_tempalte</code></li><li>进入项目目录并启动服务器：<br><code>cd chapter2_template</code><br><br><code>ember server</code></li><li>运行项目，浏览器打开这个链接：<a href="http://localhost:4200/">http://localhost:4200/</a>，如果你能看到如下信息说明安装成功了。</li></ol><p><img src="/content/images/2016/03/14-1.png" alt="run proj"></p><p>如果项目创建成功你可以继续往下看，如果项目创建不成功请重试，因为后面的代码都基于这个项目来演示的！！！对于创建项目后得到的每个文件和目录请你看官网文档，上面会有非常详细的说明。为了方便懒人在此就简单介绍其中几个很重要的文件和目录：</p><table border="1" style="border: 1px solid #ccc !important;">  <tr bgcolor="#ccc" style="border: 1px solid #ccc !important;"><td>目录</td> <td>说明</td></tr><tr><td>app </td>   <td>项目的主要代码都是放在这个目录下</td></tr><tr><td>app/controllers</td>    <td>存放C（MVC）层（controller）的代码文件</td></tr><tr><td>app/helpers</td>    <td>    存放自定义的helper代码文件</td></tr><tr><td>app/models  </td>   <td>存放M（MVC）层（model）代码文件</td></tr><tr><td>app/routes</td> <td>    存放项目路由设置代码文件</td></tr><tr><td>app/templates   </td>   <td>存放项目模板代码文件</td></tr><tr><td>bower_components</td>   <td>存放使用bower命令安装的第三方插件库</td></tr><tr><td>bower.json</td> <td>保存使用bower命令安装的第三方库的配置</td></tr><tr><td>package.json</td>   <td>保存使用npm命令安装的第三方库的配置</td></tr><tr><td>node_modules</td>   <td>存放使用npm命令安装的第三方插件库</td></tr><tr><td>ember-cli-build.js  </td>   <td>设置构建规范，引入第三方库</td></tr><tr><td>dist    </td>   <td>存放编译打包后的项目文件，可以直接复制到服务器中运行</td></tr></table>上述这些文件或者目录是后面开发过程经常会用到，相对其他目录和文件来说这些目录和文件是很重要的，只要你是使用`ember new appName`命令生成的项目都会包括上述这些目录或者文件。其中最重要的就是`app`目录下的文件、目录了，从`app`里面的目录结果你就可以很清楚的看到这是个`MVC`框架的项目。`Ember`之所以能找到`controller`对应的`template`也是根据目录和文件的名称找到的，`Ember`是有自己的一套命名规则的，如果你想了解更多有关信息请移步[folder-layout](http://ember-cli.com/user-guide/#folder-layout)。<p>搭好环境之后开始我们的<code>Ember</code>之旅吧！！！<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绑定（bingding）</title>
      <link href="/2020/01/18/ember-teach/The%20Object%20Model/%E7%BB%91%E5%AE%9A%EF%BC%88bingding%EF%BC%89/"/>
      <url>/2020/01/18/ember-teach/The%20Object%20Model/%E7%BB%91%E5%AE%9A%EF%BC%88bingding%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>正如其他的框架一样，<code>Ember</code>也有它特有的数据绑定方式，并且可以在任何一个对象上使用绑定。而然，数据绑定大多数情况都是使用在<code>Ember</code>框架本身，对于开发者最好还是使用计算属性更为简单方便。</p><h3 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双向绑定</span></span><br><span class="line">Wife = Ember.Object.extend(&#123;</span><br><span class="line">  householdIncome: <span class="number">800</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> wife = Wife.create();</span><br><span class="line"></span><br><span class="line">Hasband = Ember.Object.extend(&#123;</span><br><span class="line">  <span class="comment">//  使用 alias方法实现绑定</span></span><br><span class="line">  householdIncome: Ember.computed.alias(<span class="string">&#x27;wife.householdIncome&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hasband = Hasband.create(&#123;</span><br><span class="line">  wife: wife</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;householdIncome = &#x27;</span> + hasband.get(<span class="string">&#x27;householdIncome&#x27;</span>));  <span class="comment">//  output &gt; 800</span></span><br><span class="line"><span class="comment">// 可以双向设置值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  在wife方设置值</span></span><br><span class="line">wife.set(<span class="string">&#x27;householdIncome&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;householdIncome = &#x27;</span> + hasband.get(<span class="string">&#x27;householdIncome&#x27;</span>));  <span class="comment">// output &gt; 1000</span></span><br><span class="line"><span class="comment">// 在hasband方设置值</span></span><br><span class="line">hasband.set(<span class="string">&#x27;householdIncome&#x27;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;wife householdIncome = &#x27;</span> + wife.get(<span class="string">&#x27;householdIncome&#x27;</span>));</span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/img/201509/09095720_nTt7.png" alt="run result"></p><p>需要注意的是绑定并不会立刻更新对应的值，<code>Ember</code>会等待直到程序代码完成运行完成并且是在同步改变之前，所以你可以多次改变计算属性的值。由于绑定是很短暂的所以也不需要担心开销问题。</p><h3 id="单向绑定"><a href="#单向绑定" class="headerlink" title="单向绑定"></a>单向绑定</h3><p>单向绑定只会在一个方向上传播变化。相对双向绑定来说，单向绑定做了性能优化，对于双向绑定来说如果你只是在一个方向上设置关联其实就是一个单向绑定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = Ember.Object.create(&#123;</span><br><span class="line">  fullName: <span class="string">&#x27;Kara Gates&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">UserComponent = Ember.Component.extend(&#123;</span><br><span class="line">  userName: Ember.computed.oneWay(<span class="string">&#x27;user.fullName&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">userComponent = UserComponent.create(&#123;</span><br><span class="line">  user: user</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;fullName = &#x27;</span> + user.get(<span class="string">&#x27;fullName&#x27;</span>));</span><br><span class="line"><span class="comment">// 从user可以设置</span></span><br><span class="line">user.set(<span class="string">&#x27;fullName&#x27;</span>, <span class="string">&quot;krang Gates&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;component&gt;&gt; &#x27;</span> + userComponent.get(<span class="string">&#x27;userName&#x27;</span>));</span><br><span class="line"><span class="comment">// UserComponent 设置值，user并不能获取，因为是单向的绑定</span></span><br><span class="line">userComponent.set(<span class="string">&#x27;fullName&#x27;</span>, <span class="string">&quot;ubuntuvim&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;user &gt;&gt;&gt; &#x27;</span> + user.get(<span class="string">&#x27;fullName&#x27;</span>));</span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/img/201509/09095720_L5ho.png" alt="run result"></p><p>关于数据绑定的知识点不多，相对来说不是重点，毕竟对象之间的关联关系是越少、越简单越好。关联关系多了反而难以维护。<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用在github项目上给我个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者（observer）</title>
      <link href="/2020/01/18/ember-teach/The%20Object%20Model/%E8%A7%82%E5%AF%9F%E8%80%85%EF%BC%88observer%EF%BC%89/"/>
      <url>/2020/01/18/ember-teach/The%20Object%20Model/%E8%A7%82%E5%AF%9F%E8%80%85%EF%BC%88observer%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Ember</code>可以检测任何属性的变化，包括计算属性。</p></blockquote><h3 id="观察者使用"><a href="#观察者使用" class="headerlink" title="观察者使用"></a>观察者使用</h3><p><code>Ember</code>可以察觉所有属性的变化，包括计算属性。观察者是非常有用的，特别是计算属性绑定之后需要同步的时候。<br>观察者经常被Ember开发过度使用。<code>Ember</code>框架本身已经大量使用观察者，但是对于大多数的开发者面对开发问题时使用计算属性是更适合的解决方案。<br>使用方式：可以用<code>Ember.observer</code>创建一个对象为观察者。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Observer对于Emberjs来说非常重要，前面你看到的很多代码都是与它有关系，计算属性之所以能更新也是因为它</span></span><br><span class="line">Person = Ember.Object.extend(&#123;</span><br><span class="line">  firstName: <span class="literal">null</span>,</span><br><span class="line">  lastName: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  fullName: Ember.computed(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;firstName&#x27;</span>) + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>.get(<span class="string">&#x27;lastName&#x27;</span>);</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  当fullName被改变的时候触发观察者</span></span><br><span class="line">  fullNameChange: Ember.observer(<span class="string">&#x27;fullName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;The fullName is changed by caller&quot;</span>);</span><br><span class="line">    <span class="comment">//return this.get(&#x27;fullName&#x27;);</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = Person.create(&#123;</span><br><span class="line">  firstName: <span class="string">&#x27;chen&#x27;</span>,</span><br><span class="line">  lastName: <span class="string">&#x27;ubuntuvim&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 如果被观察的计算属性还没执行过get()方法不会触发观察者</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;fullName = &#x27;</span> + person.get(<span class="string">&#x27;fullName&#x27;</span>));  </span><br><span class="line"><span class="comment">//  fullName是依赖firstName和lastName的，这里改变了firstName的值，计算属性会自动更新，</span></span><br><span class="line"><span class="comment">//  fullName被改变了所以会触发观察者</span></span><br><span class="line">person.set(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;change firstName value&#x27;</span>);  <span class="comment">// 观察者会被触发</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;fullName = &#x27;</span> + person.get(<span class="string">&#x27;fullName&#x27;</span>));</span><br></pre></td></tr></table></figure><p><code>fullName</code>是依赖<code>firstName</code>和<code>lastName</code>的，调用<code>set()</code>方法改变了<code>firstName</code>的值，自然的导致<code>fullName</code>的值也被改变了，<code>fullName</code>变化了就触发观察者。从执行的结果就可以看出来；</p><p><img src="http://static.oschina.net/uploads/img/201509/08215431_TNgu.png" alt="运行结果图"></p><p><code>Ember</code>还为开发者提供了另一种使用观察者的方式。这种方式使你可以在类定义之外为某个计算属性增加一个观察者。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person.addObserver(<span class="string">&#x27;fullName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// deal with the change…</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="观察者与异步"><a href="#观察者与异步" class="headerlink" title="观察者与异步"></a>观察者与异步</h3><p>目前，观察者在<code>Ember</code>中是同步的（不是笔误，官网就是这么说的<code>Observers in Ember are currently synchronous.</code>）。这就意味着只要计算属性一发生变化就会触发观察者。也因为这个原因很容易就会引入这样的<code>bug</code>在计算属性没有同步的时候。比如下面的代码；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person.reopen(&#123;</span><br><span class="line">  lastNameChanged: Ember.observer(<span class="string">&#x27;lastName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// The observer depends on lastName and so does fullName. Because observers</span></span><br><span class="line">    <span class="comment">// are synchronous, when this function is called the value of fullName is</span></span><br><span class="line">    <span class="comment">// not updated yet so this will log the old value of fullName</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.get(<span class="string">&#x27;fullName&#x27;</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然而由于同步的原因如果你的的观察者同时观察多个属性，就会导致观察者执行多次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">person = Ember.Object.extend(&#123;</span><br><span class="line">  firstName: <span class="literal">null</span>,</span><br><span class="line">  lastName: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  fullName: Ember.computed(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;firstName&#x27;</span>) + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>.get(<span class="string">&#x27;lastName&#x27;</span>);</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  当fullName被改变的时候触发观察者</span></span><br><span class="line">  fullNameChange: Ember.observer(<span class="string">&#x27;fullName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;The fullName is changed by caller&quot;</span>);</span><br><span class="line">    <span class="comment">//return this.get(&#x27;fullName&#x27;);</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">Person.reopen(&#123;</span><br><span class="line">  partOfNameChanged: Ember.observer(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  同时观察了firstName和lastName两个属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;========partOfNameChanged======&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> person = Person.create(&#123;</span><br><span class="line">  firstName: <span class="string">&#x27;chen&#x27;</span>,</span><br><span class="line">  lastName: <span class="string">&#x27;ubuntuvim&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">person.set(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;[firstName]&#x27;</span>);</span><br><span class="line">person.set(<span class="string">&#x27;lastName&#x27;</span>, <span class="string">&#x27;[lastName]&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/img/201509/08215431_5Zli.png" alt="run result"></p><p>显然上述代码执行了两次<code>set()</code>所以观察者也会执行2次，但是如果开发中需要设置只能执行一次观察出呢？Ember提供了一个<code>once()</code>方法，这个方法会在下一次循环所有绑定属性都同步的时候执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Person = Ember.Object.extend(&#123;</span><br><span class="line">  firstName: <span class="literal">null</span>,</span><br><span class="line">  lastName: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  fullName: Ember.computed(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;firstName&#x27;</span>) + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>.get(<span class="string">&#x27;lastName&#x27;</span>);</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  当fullName被改变的时候触发观察者</span></span><br><span class="line">  fullNameChange: Ember.observer(<span class="string">&#x27;fullName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;The fullName is changed by caller&quot;</span>);</span><br><span class="line">    <span class="comment">//return this.get(&#x27;fullName&#x27;);</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">Person.reopen(&#123;</span><br><span class="line">  partOfNameChanged: Ember.observer(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  同时观察了firstName和lastName两个属性</span></span><br><span class="line">    <span class="comment">//  方法partOfNameChanged本身还是会执行多次，但是方法processFullName只会执行一次</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;========partOfNameChanged======&#x27;</span>);  <span class="comment">//  </span></span><br><span class="line">    Ember.run.once(<span class="built_in">this</span>, <span class="string">&#x27;processFullName&#x27;</span>);</span><br><span class="line">  &#125;),</span><br><span class="line">  processFullName: Ember.observer(<span class="string">&#x27;fullName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当你同时设置多个属性的时候，此观察者只会执行一次，并且是发生在下一次所有属性都被同步的时候</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fullName = &#x27;</span> + <span class="built_in">this</span>.get(<span class="string">&#x27;fullName&#x27;</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = Person.create(&#123;</span><br><span class="line">  firstName: <span class="string">&#x27;chen&#x27;</span>,</span><br><span class="line">  lastName: <span class="string">&#x27;ubuntuvim&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">person.set(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;[firstName]&#x27;</span>);</span><br><span class="line">person.set(<span class="string">&#x27;lastName&#x27;</span>, <span class="string">&#x27;[lastName]&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/img/201509/08215431_xi6t.png" alt="run result"></p><h3 id="观察者与对象初始化"><a href="#观察者与对象初始化" class="headerlink" title="观察者与对象初始化"></a>观察者与对象初始化</h3><p>观察者一直到对象初始化完成之后才会执行。<br>如果你想观察者在对象初始化的时候就执行你必须要手动调用<code>Ember.on()</code>方法。这个方法会在对象初始化之后就执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Person = Ember.Object.extend(&#123;</span><br><span class="line">  salutation:<span class="literal">null</span>,</span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="built_in">this</span>.set(<span class="string">&#x27;salutation&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;init....&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  salutationDidChange: Ember.on(<span class="string">&#x27;init&#x27;</span>, Ember.observer(<span class="string">&#x27;salutation&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;salutationDidChange......&#x27;</span>);</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = Person.create();</span><br><span class="line">p.get(<span class="string">&#x27;salutationDidChange&#x27;</span>);  <span class="comment">//  output &gt; init....  salutationDidChange......</span></span><br><span class="line"><span class="built_in">console</span>.log(p.get(<span class="string">&#x27;salutation&#x27;</span>));  <span class="comment">// output &gt; hello</span></span><br><span class="line">p.set(<span class="string">&#x27;salutation&#x27;</span>);  <span class="comment">//  output &gt; salutationDidChange......</span></span><br></pre></td></tr></table></figure><h3 id="未获取过值的计算属性不会触发观察者"><a href="#未获取过值的计算属性不会触发观察者" class="headerlink" title="未获取过值的计算属性不会触发观察者"></a>未获取过值的计算属性不会触发观察者</h3><p>如果一个计算属性从来没有调用过<code>get()</code>方法获取的其值，观察者就不会被触发，即使是计算属性的值发生变化了。你可以这么认为，观察者是根据调用<code>get()</code>方法前后的值比较判断出计算属性值是否发生改变了。如果没调用过<code>get()</code>之前的改变观察者认为是没有变化。<br>  通常我们不需要担心这个问题会影响到程序代码，因为几乎所有被观察的计算属性在触发前都会执行取值操作。如果你仍然担心观察者不会被触发，你可以在<code>init()</code>方法了执行一次<code>get</code>操作。这样足以保证你的观察在触发之前是执行过get操作的。<br><br><br>对于初学者来说，属性值的自动更新还是有点难以理解，到底它是怎么个更新法！！！先别急，先放一放，随着不断深入学习你就会了解到这个是多么强大的特性。<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用在github项目上给我个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包裹内容</title>
      <link href="/2020/01/18/ember-teach/components/%E5%8C%85%E8%A3%B9%E5%86%85%E5%AE%B9/"/>
      <url>/2020/01/18/ember-teach/components/%E5%8C%85%E8%A3%B9%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<p>为了能使用块方式传递模板到组件中，在调用组件的时候必须使用“#”开始的方式（两种调用方式：<code>{{component-name}}</code>或者<code>{{#component-name}}……{{/component-name}}</code>），<strong>注意一定要有关闭标签！</strong></p><p> 稍加改造前面的例子，这时候不只是传递一个简单的数据，而是传入一个包含HTML标签的简单模板。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  app/templates/components/wrapping-content-<span class="keyword">in</span>-component.hbs  --&gt;</span><br><span class="line"> </span><br><span class="line">&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;!--  模板编译渲染之后&#123;&#123;<span class="keyword">yield</span>&#125;&#125;助手会被组件标签wrapping-content-<span class="keyword">in</span>-component包含的内容替换掉 --&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123;<span class="keyword">yield</span>&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>注意此时div标签内使用的是<code>{{yield}}</code>助手，而不是直接使用<code>{{body}}</code>。</p><p>下面是调用组件的模板。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  app/templates/wrapping-content-<span class="keyword">in</span>-component-route.hbs  --&gt;</span><br><span class="line"> </span><br><span class="line">&#123;&#123;!wrapping-content-<span class="keyword">in</span>-component title=model.title body=model.body&#125;&#125;</span><br><span class="line">&lt;!--  调用组件的方式必须是以标签的形式，</span><br><span class="line">       模板编译渲染之后small标签和&#123;&#123;body&#125;&#125;这两行的内容会渲染到组件wrapping-content-<span class="keyword">in</span>-component的&#123;&#123;<span class="keyword">yield</span>&#125;&#125;助手上  --&gt;</span><br><span class="line">&#123;&#123;#wrapping-content-in-component title=model.title&#125;&#125;</span><br><span class="line">       &#123;&#123;model.body&#125;&#125;</span><br><span class="line">       &lt;small&gt;by &#123;&#123;model.author&#125;&#125;&lt;/small&gt;</span><br><span class="line">&#123;&#123;/wrapping-content-<span class="keyword">in</span>-component&#125;&#125;</span><br></pre></td></tr></table></figure><p>页面加载之后效果如下：</p><p><img src="http://static.oschina.net/uploads/img/201510/11023751_kx74.png"></p><p>查看页面HTML源代码，可以看到在<div class=”body”>这个标签内的内容确实是调用组件wrapping-content-in-component传入进来的简单HTML模板。你可以把<code>{{#wrapping-content-in-component}}……{{/wrapping-content-in-component}}</code>中间的内容当做是一个参数理解。</p><p><img src="http://static.oschina.net/uploads/img/201510/11023751_cpld.png"></p><p>到此组件包裹内容的知识点介绍完毕，内容很少也比较简单！如果有疑问请给我留言或者直接看<a href="http://guides.emberjs.com/v2.0.0/components/wrapping-content-in-a-component/">官方教程</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算属性（compute properties）</title>
      <link href="/2020/01/18/ember-teach/The%20Object%20Model/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%EF%BC%88compute%20properties%EF%BC%89/"/>
      <url>/2020/01/18/ember-teach/The%20Object%20Model/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%EF%BC%88compute%20properties%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="简单的计算属性"><a href="#简单的计算属性" class="headerlink" title="简单的计算属性"></a>简单的计算属性</h3><p>简单地来说，计算属性就是将函数声明为属性，就类似于调用了一个函数，<code>Ember</code>会自动调用这个函数。计算属性最大的特点就是能自动检测变化，及时更新数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Person = Ember.Object.extend(&#123;</span><br><span class="line">    firstName: <span class="literal">null</span>,</span><br><span class="line">    lastName: <span class="literal">null</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  fullName 就是一个计算属性</span></span><br><span class="line">    fullName: Ember.computed(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;firstName&#x27;</span>) + <span class="string">&quot;, &quot;</span> + <span class="built_in">this</span>.get(<span class="string">&#x27;lastName&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  实例化同时传入参数</span></span><br><span class="line"><span class="keyword">var</span> piter = Person.create(&#123;</span><br><span class="line">    firstName: <span class="string">&#x27;chen&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;ubuntuvim&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(piter.get(<span class="string">&#x27;fullName&#x27;</span>));  <span class="comment">// output &gt;&gt;   chen, ubuntuvim</span></span><br></pre></td></tr></table></figure><p>计算属性其实就是一个函数，如果你接触过就<code>jQuery、Extjs</code>相信你回非常熟悉，在这两个框架中函数就是这么定义的。只不过在<code>Ember</code>中，把这种函数当做属性来处理，并且可以通过get获取函数的返回值。</p><h3 id="计算属性链"><a href="#计算属性链" class="headerlink" title="计算属性链"></a>计算属性链</h3><p>在<code>Ember</code>程序中，计算属性还能调用另外一个计算属性，形成计算属性链，也可以用于扩展某个方法。在上一实例的基础上增加一个<code>description()</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Person = Ember.Object.extend(&#123;</span><br><span class="line">    firstName: <span class="literal">null</span>,</span><br><span class="line">    lastName: <span class="literal">null</span>,</span><br><span class="line">    age: <span class="literal">null</span>,</span><br><span class="line">    county: <span class="literal">null</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  fullName 就是一个计算属性</span></span><br><span class="line">    fullName: Ember.computed(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;firstName&#x27;</span>) + <span class="string">&quot;, &quot;</span> + <span class="built_in">this</span>.get(<span class="string">&#x27;lastName&#x27;</span>);</span><br><span class="line">    &#125;),</span><br><span class="line">    description: Ember.computed(<span class="string">&#x27;fullName&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;county&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;fullName&#x27;</span>) + <span class="string">&quot; age &quot;</span> + <span class="built_in">this</span>.get(<span class="string">&#x27;age&#x27;</span>) + <span class="string">&quot; county &quot;</span> + <span class="built_in">this</span>.get(<span class="string">&#x27;county&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  实例化同时传入参数</span></span><br><span class="line"><span class="keyword">var</span> piter = Person.create(&#123;</span><br><span class="line">    firstName: <span class="string">&#x27;chen&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;ubuntuvim&#x27;</span>,</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    county: <span class="string">&#x27;china&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(piter.get(<span class="string">&#x27;description&#x27;</span>));  <span class="comment">// output &gt;&gt;   chen, ubuntuvim</span></span><br></pre></td></tr></table></figure><p>当用户使用<code>set</code>方法改变<code>firstName</code>的值，然后再调用<code>get(&#39;description&#39;)</code>得到的值也是更新后的值。</p><h3 id="重写计算属性的get、set方法"><a href="#重写计算属性的get、set方法" class="headerlink" title="重写计算属性的get、set方法"></a>重写计算属性的get、set方法</h3><p>注意要把重写的属性作为参数传入<code>computed</code>方法，要区别计算属性的定义方法，定义的时候<code>computed</code>方法的最后一个参数是一个<code>function</code>，而重写的时候最后一个参数是一个<code>hash</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    重写计算属性的get、set方法</span></span><br><span class="line">Person = Ember.Object.extend(&#123;</span><br><span class="line">    firstName: <span class="literal">null</span>,</span><br><span class="line">    lastName: <span class="literal">null</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  重写计算属性fullName的get、set方法</span></span><br><span class="line">    fullName: Ember.computed(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>, &#123;</span><br><span class="line">        get(key) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;firstName&#x27;</span>) + <span class="string">&quot;,&quot;</span> + <span class="built_in">this</span>.get(<span class="string">&#x27;lastName&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        set(key, value) &#123;</span><br><span class="line">            <span class="comment">//  这个官方文档使用的代码，但是我运行的时候出现 Uncaught SyntaxError: Unexpected token [  这个错误，不知道是否是缺少某个文件，后续会补上；</span></span><br><span class="line"><span class="comment">//            console.log(&quot;value = &quot; + value);</span></span><br><span class="line"><span class="comment">//            var [ firstName, lastName ] = value.split(/\s+/);  </span></span><br><span class="line">            <span class="keyword">var</span> firstName = value.split(<span class="regexp">/\s+/</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> lastName = value.split(<span class="regexp">/\s+/</span>)[<span class="number">1</span>];</span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;firstName&#x27;</span>, firstName);</span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;lastName&#x27;</span>, lastName);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;),</span><br><span class="line"><span class="comment">//    对于普通的属性无法重写get、set方法</span></span><br><span class="line"><span class="comment">//    firstName: Ember.computed(&#x27;firstName&#x27;, &#123;</span></span><br><span class="line"><span class="comment">//        get(key) &#123;</span></span><br><span class="line"><span class="comment">//            return this.get(&#x27;firstName&#x27;) + &quot;@@&quot;;</span></span><br><span class="line"><span class="comment">//        &#125;,</span></span><br><span class="line"><span class="comment">//        set(key, value) &#123;</span></span><br><span class="line"><span class="comment">//            this.set(&#x27;firstName&#x27;, value);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;)</span></span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> jack = Person.create();    </span><br><span class="line">jack.set(<span class="string">&#x27;fullName&#x27;</span>, <span class="string">&quot;james kobe&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(jack.get(<span class="string">&#x27;firstName&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(jack.get(<span class="string">&#x27;lastName&#x27;</span>));</span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/img/201509/08100319_16q9.png" alt="运行结果"></p><h3 id="计算属性值的统计"><a href="#计算属性值的统计" class="headerlink" title="计算属性值的统计"></a>计算属性值的统计</h3><p>我们经常会遇到这种情况：某个计算属性值是依赖某个数组或者其他对象的，比如在<code>Ember</code>的<code>todos</code>这个例子中有这样的一段代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">  todos: [</span><br><span class="line">    Ember.Object.create(&#123; <span class="attr">isDone</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">    Ember.Object.create(&#123; <span class="attr">isDone</span>: <span class="literal">false</span> &#125;),</span><br><span class="line">    Ember.Object.create(&#123; <span class="attr">isDone</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  ],</span><br><span class="line">  remaining: Ember.computed(<span class="string">&#x27;todos.@each.isDone&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> todos = <span class="built_in">this</span>.get(<span class="string">&#x27;todos&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> todos.filterBy(<span class="string">&#x27;isDone&#x27;</span>, <span class="literal">false</span>).get(<span class="string">&#x27;length&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>计算属性<code>remaining</code>的值于依赖数组<code>todos</code>。在这里还有个知识点：在上述代码<code>computed()</code>方法里有一个<code>todos.@each.isDone</code>这样的键，里面包含了一个特别的键<code>@each</code>（后面还会看到更特别的键<code>[]</code>）。需要注意的是这种键不能嵌套并且是只能获取一个层次的属性。比如<code>todos.@each.foo.name</code>(获取多层次属性，这里是先得到foo再获取<code>name</code>)或者<code>todos.@each.owner.@each.name</code>(嵌套)这两种方式都是不允许的。</p><p>在如下4种情况<code>Ember</code>会自动更新绑定的计算属性值：<br><br>1.在<code>todos</code>数组中任意一个对象的<code>isDone</code>属性值发生变化的时候；<br>2.往<code>todos</code>数组新增元素的时候；<br>3.从<code>todos</code>数组删除元素的时候；<br>4.在控制器中<code>todos</code>数组被改变为其他的数组的时候；</p><p>比如下面代码演示的结果；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">Task = Ember.Object.extend(&#123;</span><br><span class="line">  isDone: <span class="literal">false</span>  <span class="comment">//  默认为false</span></span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">WorkerLists = Ember.Object.extend(&#123;</span><br><span class="line">  <span class="comment">//  定义一个Task对象数组</span></span><br><span class="line">  lists: [</span><br><span class="line">    Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">false</span> &#125;),</span><br><span class="line">    Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">    Task.create(),</span><br><span class="line">    Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">    Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">    Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">    Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">false</span> &#125;),</span><br><span class="line">    Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  remaining: Ember.computed(<span class="string">&#x27;lists.@each.isDone&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lists = <span class="built_in">this</span>.get(<span class="string">&#x27;lists&#x27;</span>);</span><br><span class="line">    <span class="comment">//  先查询属性isDone值为false的对象，再返回其数量</span></span><br><span class="line">    <span class="keyword">return</span> lists.filterBy(<span class="string">&#x27;isDone&#x27;</span>, <span class="literal">false</span>).get(<span class="string">&#x27;length&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如下代码使用到的API请查看：http://emberjs.com/api/classes/Ember.MutableArray.html</span></span><br><span class="line"><span class="keyword">var</span> wl = WorkerLists.create();</span><br><span class="line"><span class="comment">//  所有isDone属性值未做任何修改</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1,&gt;&gt; Not complete lenght is &#x27;</span> + wl.get(<span class="string">&#x27;remaining&#x27;</span>));  <span class="comment">//  output 3</span></span><br><span class="line"><span class="keyword">var</span> lists = wl.get(<span class="string">&#x27;lists&#x27;</span>);  <span class="comment">//  得到对象内的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----  演示第一种情况： 1. 在todos数组中任意一个对象的isDone属性值发生变化的时候；</span></span><br><span class="line"><span class="comment">//  修改数组一个元素的isDone的 值</span></span><br><span class="line"><span class="keyword">var</span> item1 = lists.objectAt(<span class="number">3</span>);  <span class="comment">//  得到第4个元素 objectAt()方法是Ember为我们提供的</span></span><br><span class="line"><span class="comment">// console.log(&#x27;item1 = &#x27; + item1);</span></span><br><span class="line">item1.set(<span class="string">&#x27;isDone&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;2,&gt;&gt; Not complete lenght is &#x27;</span> + wl.get(<span class="string">&#x27;remaining&#x27;</span>));  <span class="comment">//  output 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  --------- 2.  往todos数组新增元素的时候；</span></span><br><span class="line">lists.pushObject(Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">false</span> &#125;));  <span class="comment">//新增一个isDone为false的对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;3,&gt;&gt; Not complete lenght is &#x27;</span> + wl.get(<span class="string">&#x27;remaining&#x27;</span>));  <span class="comment">//  output 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  --------- 3.  从todos数组删除元素的时候；</span></span><br><span class="line">lists.removeObject(item1);  <span class="comment">// 删除了一个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;4,&gt;&gt; Not complete lenght is &#x27;</span> + wl.get(<span class="string">&#x27;remaining&#x27;</span>));  <span class="comment">//  output 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  --------- 4.  在控制器中todos数组被改变为其他的数组的时候；</span></span><br><span class="line"><span class="comment">//  创建一个Controller</span></span><br><span class="line">TodosController = Ember.Controller.extend(&#123;</span><br><span class="line">  <span class="comment">// 在控制器内定义另外一个Task对象数组</span></span><br><span class="line">  todosInController: [</span><br><span class="line">    Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">false</span> &#125;),</span><br><span class="line">    Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">//  使用键”@each.isDone“遍历得到的filterBy()方法过滤后的对象的isDone属性</span></span><br><span class="line">  remaining: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  remaining()方法返回的是控制器内的数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;todosInController&#x27;</span>).filterBy(<span class="string">&#x27;isDone&#x27;</span>, <span class="literal">false</span>).get(<span class="string">&#x27;length&#x27;</span>);</span><br><span class="line">  &#125;.property(<span class="string">&#x27;@each.isDone&#x27;</span>)  <span class="comment">//  指定遍历的属性</span></span><br><span class="line">&#125;);</span><br><span class="line">todosController = TodosController.create();</span><br><span class="line"><span class="keyword">var</span> count = todosController.get(<span class="string">&#x27;remaining&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;5,&gt;&gt; Not complete lenght is &#x27;</span> + count);  <span class="comment">//  output 1</span></span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/img/201509/08100320_d33w.png" alt="代码演示的结果"></p><p>上述的情况中，我们对数组对象的是关注点是在对象的属性上，但是实际中往往很多情况我们并不关系对象内的属性是否变化了，而是把数组元素作为一个整体对象处理（比如数组元素个数的变化）。相比上述的代码下面的代码检测的是数组对象元素的变化，而不是对象的<code>isDone</code>属性的变化。在这种情况你可以看看下面例子，在例子中使用键<code>[]</code>代替键<code>@each</code>。从键的变化也可以看出他们的不同之处。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Task = Ember.Object.extend(&#123;</span><br><span class="line">  isDone: <span class="literal">false</span>,  <span class="comment">//  默认为false</span></span><br><span class="line">  name: <span class="string">&#x27;taskName&#x27;</span>,</span><br><span class="line">  <span class="comment">//  为了显示结果方便，重写toString()方法</span></span><br><span class="line">  toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;[name = &#x27;</span>+<span class="built_in">this</span>.get(<span class="string">&#x27;name&#x27;</span>)+<span class="string">&#x27;, isDone = &#x27;</span>+<span class="built_in">this</span>.get(<span class="string">&#x27;isDone&#x27;</span>)+<span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">WorkerLists = Ember.Object.extend(&#123;</span><br><span class="line">  <span class="comment">//  定义一个Task对象数组</span></span><br><span class="line">  lists: [</span><br><span class="line">    Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">name</span>: <span class="string">&#x27;ibeginner.sinaapp.com&#x27;</span> &#125;),</span><br><span class="line">    Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">&#x27;i2cao.xyz&#x27;</span> &#125;),</span><br><span class="line">    Task.create(),</span><br><span class="line">    Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">&#x27;ubuntuvim&#x27;</span> &#125;),</span><br><span class="line">    Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">true</span> , <span class="attr">name</span>: <span class="string">&#x27;1527254027@qq.com&#x27;</span>&#125;),</span><br><span class="line">    Task.create(&#123; <span class="attr">isDone</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  index: <span class="literal">null</span>,</span><br><span class="line">  indexOfSelectedTodo: Ember.computed(<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;lists.[]&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;lists&#x27;</span>).objectAt(<span class="built_in">this</span>.get(<span class="string">&#x27;index&#x27;</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wl = WorkerLists.create();</span><br><span class="line"><span class="comment">//  所有isDone属性值未做任何修改</span></span><br><span class="line"><span class="keyword">var</span> index = <span class="number">1</span>;</span><br><span class="line">wl.set(<span class="string">&#x27;index&#x27;</span>, index);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Get &#x27;</span>+wl.get(<span class="string">&#x27;indexOfSelectedTodo&#x27;</span>).toString()+<span class="string">&#x27; by index &#x27;</span> + index);</span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/img/201509/08100320_HZ9I.png" alt="代码演示的结果"></p><p><code>Ember.computed</code>这个组件中有很多使用键<code>[]</code>实现的方法。当你想创建一个计算属性是数组的时候特别适用。你可以使用<code>Ember.computed.map</code>来构建你的计算属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Hamster = Ember.Object.extend(&#123;</span><br><span class="line">  chores: <span class="literal">null</span>,</span><br><span class="line">  excitingChores: Ember.computed(<span class="string">&#x27;chores.[]&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//告诉Ember chores是一个数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;chores&#x27;</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">chore, index</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//return `$&#123;index&#125; --&gt; $&#123;chore.toUpperCase()&#125;`;  //  可以使用$&#123;&#125;表达式，并且在表达式内可以直接调用js方法</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;chore&#125;</span>`</span>;  <span class="comment">//返回元素值</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  为数组赋值</span></span><br><span class="line"><span class="keyword">const</span> hamster = Hamster.create(&#123;</span><br><span class="line">  <span class="comment">//  名字chores要与类Hamster定义指定数组的名字一致</span></span><br><span class="line">  chores: [<span class="string">&#x27;First Value&#x27;</span>, <span class="string">&#x27;write more unit tests&#x27;</span>]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hamster.get(<span class="string">&#x27;excitingChores&#x27;</span>));</span><br><span class="line">hamster.get(<span class="string">&#x27;chores&#x27;</span>).pushObject(<span class="string">&quot;Add item test&quot;</span>);  <span class="comment">//add an item to chores array</span></span><br><span class="line"><span class="built_in">console</span>.log(hamster.get(<span class="string">&#x27;excitingChores&#x27;</span>));</span><br></pre></td></tr></table></figure><p><code>Ember</code>还提供了另外一种方式去定义数组类型的计算属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Hamster = Ember.Object.extend(&#123;</span><br><span class="line">  chores: <span class="literal">null</span>,</span><br><span class="line">  excitingChores: Ember.computed(<span class="string">&#x27;chores.[]&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;chores&#x27;</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">chore, index</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//return `$&#123;index&#125; --&gt; $&#123;chore.toUpperCase()&#125;`;  //  可以使用$&#123;&#125;表达式，并且在表达式内可以直接调用js方法</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;chore&#125;</span>`</span>;  <span class="comment">//返回元素值</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  为数组赋值</span></span><br><span class="line"><span class="keyword">const</span> hamster = Hamster.create(&#123;</span><br><span class="line">  <span class="comment">//  名字chores要与类Hamster定义指定数组的名字一致</span></span><br><span class="line">  chores: [<span class="string">&#x27;First Value&#x27;</span>, <span class="string">&#x27;write more unit tests&#x27;</span>]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hamster.get(<span class="string">&#x27;excitingChores&#x27;</span>));</span><br><span class="line">hamster.get(<span class="string">&#x27;chores&#x27;</span>).pushObject(<span class="string">&quot;Add item test&quot;</span>);  <span class="comment">//add an item to chores array</span></span><br><span class="line"><span class="built_in">console</span>.log(hamster.get(<span class="string">&#x27;excitingChores&#x27;</span>));</span><br></pre></td></tr></table></figure><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用在github项目上给我个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>属性传递</title>
      <link href="/2020/01/18/ember-teach/components/%E5%B1%9E%E6%80%A7%E4%BC%A0%E9%80%92/"/>
      <url>/2020/01/18/ember-teach/components/%E5%B1%9E%E6%80%A7%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<h2 id="1，传递参数到组件上"><a href="#1，传递参数到组件上" class="headerlink" title="1，传递参数到组件上"></a>1，传递参数到组件上</h2><p>每个组件都是相对独立的，因此任何组件所需的数据都需要通过组件的属性把数据传递到组件中。</p><p>比如上篇<a href="http://xcoding.tech/2018/08/04/ember-teach/components/%E7%BB%84%E4%BB%B6%E5%AE%9A%E4%B9%89/">Ember.js 入门指南之二十八组件定义</a>的第三点<code>{{component item.pn post=item}}</code>就是通过属性post把数据传递到组件<code>foo-component</code>或者<code>bar-component</code>上。如果在<code>index.hbs</code>中是如下方式调用组件那么渲染之后的页面是空的。<br><code>{{component item.pn}}</code><br>请读者自己修改<code>index.hbs</code>的代码后演示效果。</p><p>传递到组件的参数也是动态更新的，当传递到组件上的参数变化时组件渲染的HTML也会随之发生改变。</p><h4 id="2，位置参数"><a href="#2，位置参数" class="headerlink" title="2，位置参数"></a>2，位置参数</h4><p>传递的属性参数不一定要指定参数的名字。你可以不指定属性参数的名称，然后根据参数的位置获取对应的值，但是要在组件对应的组件类中指定位置参数的名称。比如下面的代码：</p><p>准备工作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ember g route passing-properties-to-component</span><br><span class="line"></span><br><span class="line">ember g component passing-properties-to-component</span><br></pre></td></tr></table></figure><p>调用组件的模板，传入两个位置参数，分别是item.title、item.body。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/passing-properties-to-component.hbs  --&gt;</span></span><br><span class="line"> </span><br><span class="line">&#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">       <span class="comment">&lt;!-- 传递到组件blog-post第一个参数为数据的title值，第二个为body值 --&gt;</span></span><br><span class="line">       &#123;&#123;passing-properties-to-component item.title item.body&#125;&#125;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><p>准备需要显示的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/padding-properties-to-component.js</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"> </span><br><span class="line">       model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> [</span><br><span class="line">                 &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;Bower: dependencies and resolutions new&#x27;</span>, <span class="attr">body</span>: <span class="string">&quot;In the bower.json file, I see 2 keys dependencies and resolutionsWhy is that so? &quot;</span> &#125;,</span><br><span class="line">                 &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&#x27;Highly Nested JSON Payload - hasMany error&#x27;</span>, <span class="attr">body</span>: <span class="string">&quot;Welcome to the Ember.js discussion forum. We&#x27;re running on the open source, Ember.js-powered Discourse forum software. &quot;</span> &#125;,</span><br><span class="line">                 &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">&#x27;Passing a jwt to my REST adapter new &#x27;</span>, <span class="attr">body</span>: <span class="string">&quot;This sets up a binding between the category query param in the URL, and the category property on controller:articles. &quot;</span> &#125;</span><br><span class="line">           ];</span><br><span class="line">         </span><br><span class="line">       &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在组件类中指定位置参数的名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/padding-properties-to-component.js</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">       <span class="comment">// 指定位置参数的名称</span></span><br><span class="line">       positionalParams: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;body&#x27;</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>属性positionalParams指定的参数不能在运行期改变。</p><p>组件直接使用组件类中指定的位置参数名称获取数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/components/passing-properties-to-component.hbs  --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;body&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>获取数据的名称必须要与组件类指定的名称一致，否则无法正确获取数据。</p><p>显示结果如下：</p><p> <img src="http://static.oschina.net/uploads/space/2015/1009/234249_uzqI_565401.png"></p><p>       Ember还允许你指定任意多个参数，但是组件类获取参数的方式就需要做点小修改。比如下面的例子：</p><p>调用组件的模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/passing-properties-to-component.hbs  --&gt;</span></span><br><span class="line"> </span><br><span class="line">&#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">       <span class="comment">&lt;!-- 传递到组件blog-post第一个参数为数据的title值，第二个为body值 --&gt;</span></span><br><span class="line">       &#123;&#123;passing-properties-to-component item.title item.body &#x27;third value&#x27; &#x27;fourth value&#x27;&#125;&#125;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><p>指定参数名称的组件类，获取参数的方式可以参考<a href="http://ibeginner.sinaapp.com/index.php?m=Home&c=Index&a=detail&id=99fdb00c49afb32174c4f189c60382d6">计算属性</a>这章。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/padding-properties-to-component.js</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">       <span class="comment">// 指定位置参数为参数数组</span></span><br><span class="line">       positionalParams: <span class="string">&#x27;params&#x27;</span>,</span><br><span class="line">       title: Ember.computed(<span class="string">&#x27;params.[]&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;params&#x27;</span>)[<span class="number">0</span>];  <span class="comment">//获取第一个参数</span></span><br><span class="line">       &#125;),</span><br><span class="line">       body: Ember.computed(<span class="string">&#x27;params.[]&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;params&#x27;</span>)[<span class="number">1</span>];  <span class="comment">//获取第二个参数</span></span><br><span class="line">       &#125;),</span><br><span class="line">       third: Ember.computed(<span class="string">&#x27;params.[]&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;params&#x27;</span>)[<span class="number">2</span>];  <span class="comment">//获取第三个参数</span></span><br><span class="line">       &#125;),</span><br><span class="line">       fourth: Ember.computed(<span class="string">&#x27;params.[]&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;params&#x27;</span>)[<span class="number">3</span>];  <span class="comment">//获取第四个参数</span></span><br><span class="line">       &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下面看组件是怎么获取传递过来的参数的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/components/passing-properties-to-component.hbs  --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;body&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>third: &#123;&#123;third&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>fourth: &#123;&#123;fourth&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示结果如下：</p><p> <img src="http://static.oschina.net/uploads/space/2015/1009/234309_BMUy_565401.png"></p><p>到此组件参数传递的内容全部介绍完毕。总的来说没啥难度。Ember中参数的传递与获取方式基本是相似的，比如<a href="http://xcoding.tech/2018/08/04/ember-teach/templetes/link-to%20helper/">link-to助手</a>、<a href="http://xcoding.tech/2018/08/04/ember-teach/templetes/action%20helper/">action助手</a>。</p><p>br<br>博文完整代码放在<a href="httpsgithub.comubuntuvimmy_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处理事件</title>
      <link href="/2020/01/18/ember-teach/components/%E5%A4%84%E7%90%86%E4%BA%8B%E4%BB%B6/"/>
      <url>/2020/01/18/ember-teach/components/%E5%A4%84%E7%90%86%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>你可以在组件中响应事件，比如用户的双击、鼠标滑过、键盘的按下等等事件。只需要在组件类中增加<a href="http://emberjs.com/">Ember</a>提供的处理事件，然后<a href="http://emberjs.com/">Ember</a>会自动判断用户的操作执行相应的事件，只要在组件类中添加的事件不冲突你甚至一次性增加多个事件，事件执行次序根据触发的次序执行。</p><p>1，简单事件处理<br>准备工作，使用<a href="http://ember-cli.com/user-guide">Ember CLI</a>创建演示所需文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember g component handle-events</span><br><span class="line">ember g route component-route</span><br></pre></td></tr></table></figure><p>生成的组件模板不做任何修改。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/components/handle-events.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;yield&#125;&#125;</span><br></pre></td></tr></table></figure><p>注意看组件类的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/handle-events.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;click...&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 返回true允许事件冒泡到父组件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mouseLeave: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;mouseDown....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在组件类中增加了两个事件<code>click</code>和<code>mouseLeaver</code>，一个是单击事件一个是鼠标移开事件，更多<a href="http://emberjs.com/">Ember</a>支持的事件请看<a href="https://guides.emberjs.com/v2.4.0/components/handling-events/#toc_event-names">handling-events</a>。</p><p>调用组件的模板如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/component-route.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;#handle-events&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor: pointer;&quot;</span>&gt;</span>从我身上飘过或者点我都会触发事件~<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&#123;&#123;/handle-events&#125;&#125;</span><br></pre></td></tr></table></figure><p>当用户只是把鼠标从文字“从我身上飘过或者点我都会触发事件~”上划过市只执行<code>mouseLeave</code>事件，当用户点击文字时先执行<code>click</code>事件再执行<code>mouseLeave</code>事件，因为用户点击文字时鼠标还没移开。</p><p>但是如果你增加的事件是有冲突的可能会得到无法预知的结果，比如在组件类中增加了双击和单击事件，此时只会执行单击事件，双击事件就无法触发。</p><h2 id="2，发送行为"><a href="#2，发送行为" class="headerlink" title="2，发送行为"></a>2，发送行为</h2><p>某些情况下，你的组件需要支持拖放事件。比如组件可能要发送一个<code>id</code>到<code>drop</code>事件中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;drop-target action=”didDrop”&#125;&#125;</span><br></pre></td></tr></table></figure><p>你可以定义组件的事件处理器去管理<code>drop</code>事件。如果有需要可以通过返回<code>false</code>防止事件冒泡。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/drop-target.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    attribuBindings: [<span class="string">&#x27;draggable&#x27;</span>],</span><br><span class="line">    draggable: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    dragOver: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    didDrop: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> id = event.dataTransfer.getData(<span class="string">&#x27;text/data&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.sendAction(<span class="string">&#x27;action&#x27;</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>本章内容不多，重点是第一点的内容，第二点的内容就简单介绍，更多详细信息请移步<a href="guides.emberjs.com/v2.0.0/components/handling-events/">官网文档</a>。</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>action触发变化</title>
      <link href="/2020/01/18/ember-teach/components/action%E8%A7%A6%E5%8F%91%E5%8F%98%E5%8C%96/"/>
      <url>/2020/01/18/ember-teach/components/action%E8%A7%A6%E5%8F%91%E5%8F%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>组件就像一个相对独立的盒子。在前面的文章中介绍过组件是怎么通过属性传递参数，并且这个属性值你可以在模板或者js代码中获取。</p><p>但是到目前为止还没介绍过子组件从父组件中获取数组，在<a href="http://emberjs.com/">Ember</a>应用中组件之间的通信是通过<code>actions</code>实现的。</p><p>跟着下面的步骤来，创建一个组件之间通信的示例。</p><h4 id="1，创建组件"><a href="#1，创建组件" class="headerlink" title="1，创建组件"></a>1，创建组件</h4><p>创建组件的方法不用我多说，直接使用<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令创建即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ember g component button-with-confirmation</span><br><span class="line">ember g component user-profile</span><br><span class="line">ember g route button-with-confirmation-route</span><br></pre></td></tr></table></figure><p>为了测试方便多增加了一个路由。</p><p>下面是组件<code>user-profile</code>的定义，调用组件<code>button-with-confirmation</code>，那么此时<code>user-profile</code>作为父组件，<code>button-with-confirmation</code>作为子组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/temlates/components/user-profile.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;button-with-confirmation text=&quot;Click OK to delete your account&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="2，在组件类中添加action"><a href="#2，在组件类中添加action" class="headerlink" title="2，在组件类中添加action"></a>2，在组件类中添加action</h4><p>要想<code>action</code>能执行需要作如下两步：</p><ul><li>在父组件中定义好需要处理的动作（action）。在这个例子中父组件的动作是要删除用户账号并发送一个提示信息到另一个组件。</li><li>在子组件中，判断发生什么事件并发出通知信息。在这个例子中当用户点击“确认”按钮之后触发一个外部的动作（删除账户或者发送提示信息）。</li></ul><p>下面是实现代码：</p><p><strong>实现父组件动作（action）</strong></p><p>在父组件中，定义好当用户点击“确认”之后触发的动作。在这个例子中的动作（<code>action</code>）是先找出用户账号再删除。</p><p>在<a href="http://emberjs.com/">Ember</a>应用中，每个组件都有一个名为<code>actions</code>的属性。这个属性值是函数，是可以被用户或者子组件执行的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/user-profile.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    actions: &#123;</span><br><span class="line">        userDidDeleteAccount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(“userDidDeleteAccount⋯”);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在已经实现了父组件逻辑，但是并没有告诉Ember这个动作什么时候触发，下一步将实现这个功能。</p><p><strong>实现子组件动作（action）</strong></p><p>这一步我们将实现当用户点击“确定”之后触发事件的逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/button-with-confirmation.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    tagName: <span class="string">&#x27;button&#x27;</span>,</span><br><span class="line">    click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (confirm(<span class="built_in">this</span>.get(<span class="string">&#x27;text&#x27;</span>))) &#123;</span><br><span class="line">            <span class="comment">// 在这里获取父组件的事件（数据）并触发</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3，传递action到组件中"><a href="#3，传递action到组件中" class="headerlink" title="3，传递action到组件中"></a>3，传递action到组件中</h4><p>现在我们在<code>user-profile</code>组件中使用<code>onConfirm()</code>方法触发组件<code>button-with-confirmation</code>类中的<code>userDidDeleteAccount</code>事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/temlates/components/user-profile.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;#button-with-confirmation text=&quot;Click OK to delete your account&quot; onConfirm=(action &#x27;userDidDeleteAccount&#x27;)&#125;&#125;</span><br><span class="line">执行userDidDeleteAccount方法</span><br><span class="line">&#123;&#123;/button-with-confirmation&#125;&#125;</span><br></pre></td></tr></table></figure><p>这段代码的意思是告诉父组件，<code>userDidDeleteAccount</code>方法会通过<code>onConfirm</code>方法执行。</p><p>现在你可以在子组件中使用<code>onConfirm</code>方法执行父组件的动作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/button-with-confirmation.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    tagName: <span class="string">&#x27;button&#x27;</span>,</span><br><span class="line">    click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (confirm(<span class="built_in">this</span>.get(<span class="string">&#x27;text&#x27;</span>))) &#123;</span><br><span class="line">            <span class="comment">// 在父组件中触发动作</span></span><br><span class="line">            <span class="built_in">this</span>.get(<span class="string">&#x27;onConfirm&#x27;</span>)();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>this.gete(“onConfirm”)</code>从父组件返回一个值<code>onConfirm</code>，然后与<code>()</code>组合成了一个个方法<code>onConfirm()</code>。</p><p>在模板<code>button-with-confirmation-route.hbs</code>中调用组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/temlates/button-with-confirmation-route.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;user-profile&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/img/201510/14010229_OrI7.png" alt="结果"></p><p>点击这个<code>button</code>，会触发事件。弹出对话框。再点击“确认”后执行方法<code>userDidDeleteAccount</code>，可以看到浏览器控制台输出了<strong>userDidDeleteAccount⋯</strong>，未点击“确认”前或者点击“取消”不会输出这个信息，说明不执行这个方法<code>userDidDeleteAccount</code>。</p><p><img src="http://static.oschina.net/uploads/img/201510/14010230_bkQw.png" alt="结果截图"></p><p><img src="http://static.oschina.net/uploads/img/201510/14010230_Cc6W.png" alt="结果截图"></p><p>像普通属性，<code>actions</code>可以组件的一个属性，唯一的区别是，属性设置为一个函数，它知道如何触发的行为。</p><p>在组件的<code>actions</code>属性中定义的方法，允许你决定怎么去处理一个事件，有助于模块化，提高组件重用率。</p><p>到此，组件这一章节的内容全部介绍完毕了，不知道你看懂了多少？如果有疑问请给我留言一起交流学习，获取是直接去官网学习官方教程。</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件小节</title>
      <link href="/2020/01/18/ember-teach/components/%E7%BB%84%E4%BB%B6%E5%B0%8F%E8%8A%82/"/>
      <url>/2020/01/18/ember-teach/components/%E7%BB%84%E4%BB%B6%E5%B0%8F%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<p>对于组件这一章是非常重要的，组件会在<code>3.0</code>之后的版本替代控制器。</p><p>这一章最重要的内容包括如下几篇博文：</p><ol><li><a href="http://blog.ddlisting.com/2016/04/07/ember-js-ru-men-zhi-nan-zhi-er-shi-jiu-shu-xing-chuan-di/">Ember.js 入门指南之二十九属性传递</a></li><li><a href="http://blog.ddlisting.com/2016/04/07/ember-js-ru-men-zhi-nan-zhi-san-shi-zi-ding-yi-bao-guo-zu-jian-de-htmlbiao-qian/">Ember.js 入门指南之三十一自定义包裹组件的HTML标签</a></li><li><a href="http://blog.ddlisting.com/2016/01/26/communicating-with-ember-js-components-using-sendaction/">Ember.js的组件如何使用sendAction与控制器、路由通信</a></li><li><a href="https://guides.emberjs.com/v2.4.0/components/the-component-lifecycle/">The Component Lifecycle</a>（很重要）</li><li><a href="https://guides.emberjs.com/v2.4.0/components/customizing-a-components-element/">自定义组件元素</a></li></ol><p>要想学好组件必须多看上述几篇文章。特别是第四篇，介绍了组件的生命周期，对于理解组件的原理是非常有帮助的。</p><p>组件到此也介绍完毕了，其中很重要的两个知识点没有放到博客中，请自行从官方参考文档学习。在接下来的一章将为大家介绍控制器（<code>controller</code>），虽然控制器会在<code>3.0</code>版本中被移除，但是目前仍然是支持的，所以还需要简单讲解。</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件定义</title>
      <link href="/2020/01/18/ember-teach/components/%E7%BB%84%E4%BB%B6%E5%AE%9A%E4%B9%89/"/>
      <url>/2020/01/18/ember-teach/components/%E7%BB%84%E4%BB%B6%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>不得不说，<a href="http://emberjs.com/">Ember</a>的更新是在是太快了！！本教程还没写到一半就又更新到<code>v2.1.0</code>了！！！！不过为了统一还是使用官方<code>v2.0.0</code>的参考文档！！</p><p>从本篇开始进入新的一章——组件。这一章将用6篇文章介绍Ember的组件，从它的定义开始知道它的使用方式，我将为你一一解答！</p><p><strong>准备工作</strong>：<br>    本章代码统一访问项目chapter4_components下，项目代码可以在以下网址上找到：<a href="https://github.com/ubuntuvim/my_emberjs_code">my_emberjs_code</a>。</p><p>与之前的文章一样，项目仍然是使用<a href="http://www.ember-cli.com/user-guide">Ember CLI</a>命令创建项目和各个组件文件。</p><p>创建项目并测试运行，首先执行如下四条命令，最后在浏览器执行：<a href="http://localhost:4200/">http://localhost:4200/</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ember new chapter4_components</span><br><span class="line">cd chapter4_components</span><br><span class="line">ember server</span><br></pre></td></tr></table></figure><p>如果你能在页面上看到<strong>Welcome to Ember</strong>说明项目框架搭建成功！那么你可以继续往下看了，否则想搭建好项目再往下学习<del>~</del></p><h2 id="1，自定义组件及使用"><a href="#1，自定义组件及使用" class="headerlink" title="1，自定义组件及使用"></a>1，自定义组件及使用</h2><p>创建组件方法很简单：<code>ember generate component my-component-name</code>。一条命令即可，但是需要注意的是组件的名称必须要包含中划线<code>-</code>，比如<code>blog-post</code>、<code>test-component</code>、<code>audio-player-controls</code>这种格式的命名是合法，但是<code>post</code>、<code>test</code>这种方式的命名是不合法的！其一是为了防止用户自定义的组件名与W3C规定的元素标签名重复；其二是为了确保<a href="http://emberjs.com/">Ember</a>能自动检测到用户自定义的组件。</p><p>下面定义一个组件，<code>ember g component blog-post</code>。<a href="http://www.ember-cli.com/user-guide/">Ember CLI</a>会自动为你创建组件对应的的模板，执行这条命令之后你可以在<code>app/components</code>和<code>app/templates/components</code>下看到创建的文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/components/blog-post.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;blog-post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;yield&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Edit title: &#123;&#123;input type=&quot;text&quot; value=title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了演示组件的使用需要做些准备工作：<br><code>ember g route index</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    </span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> [</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;Bower: dependencies and resolutions new&#x27;</span>, <span class="attr">body</span>: <span class="string">&quot;In the bower.json file, I see 2 keys dependencies and resolutionsWhy is that so? I understand Bower has a flat dependency structure. So has it got anything to do with that ?&quot;</span>, <span class="attr">category</span>: <span class="string">&#x27;java&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&#x27;Highly Nested JSON Payload - hasMany error&#x27;</span>, <span class="attr">body</span>: <span class="string">&quot;Welcome to the Ember.js discussion forum. We&#x27;re running on the open source, Ember.js-powered Discourse forum software. They are also providing the hosting for us. Thanks guys! Please use this space for discussion abo⋯ read more&quot;</span>, <span class="attr">category</span>: <span class="string">&#x27;php&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">&#x27;Passing a jwt to my REST adapter new &#x27;</span>, <span class="attr">body</span>: <span class="string">&quot;This sets up a binding between the category query param in the URL, and the category property on controller:articles. In other words, once the articles route has been entered, any changes to the category query param in the URL will update the category property on controller:articles, and vice versa.&quot;</span>, <span class="attr">category</span>: <span class="string">&#x27;java&#x27;</span>&#125;</span><br><span class="line">        ];</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/index.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!-- 使用自定义的组件blog-post --&gt;</span></span><br><span class="line">    &#123;&#123;#blog-post title=item.title&#125;&#125;</span><br><span class="line">        &#123;&#123;item.body&#125;&#125;</span><br><span class="line">    &#123;&#123;/blog-post&#125;&#125;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，使用了自定义的组件来显示数据。最后页面显示如下：</p><p><img src="http://static.oschina.net/uploads/img/201510/09021213_Yt69.png"></p><p>看看生成的HTML代码：</p><p><img src="http://static.oschina.net/uploads/img/201510/09021213_TO7v.png"></p><p>自定义的组件被渲染到了模板<code>index.hbs</code>使用<code>blog-post</code>的地方。并且自定义组件的HTML标签没有变化。<br>到这里大概应该知道怎么去使用组件了，至于它是怎么就渲染到了使用组件的地方，以及它是怎么渲染上去的。别急~~后面的文章会为你一一解答。</p><p><strong>说明</strong>：默认情况下，自定义的组件会被渲染到<code>div</code>标签内，当然这种默认情况也是可以修改的，比较简单在此不过多介绍，请自行学习，网址：<a href="http://guides.emberjs.com/v2.0.0/components/customizing-a-components-element/">customizing-a-components-element</a>。</p><h3 id="2，自定义组件类"><a href="#2，自定义组件类" class="headerlink" title="2，自定义组件类"></a>2，自定义组件类</h3><p>用户自定义的组件类都需要继承<code>Ember.Component</code>类。</p><p>通常情况下我们会把经常使用的模板片段封装成组件，只需要定义一次就可以在项目任何一个模板中使用，而且不需要编写任何的javascript代码。比如上述第一点“自定义组件及使用”中描述的一样。</p><p>但是如果你想你的组件有特殊的行为，并且这些行为是默认组件类无法提供的（比如：改变包裹组件的标签、响应组件模板初始化某个状态等），那么此时你可以自定义组件类，但是要继承<code>Ember.Component</code>，如果你自定义的组件类没有继承这个类，你自定义的组件就很有可能会出现一些不可预知的问题。</p><p><a href="http://emberjs.com/">Ember</a>所能识别的自定义组件类的名称是有规范的。比如，你定义了一个名为<code>blog-post</code>的组件，那么你的组件类的名称应该是<code>app/components/blog-post.js</code>。如果组件名为<code>audio-player-controls</code>那么对应的组件类名为<code>app/components/audio-player-controls.js</code>。即：组件类名与组件同名，这个是<code>v2.0</code>的命名方法，请区别就版本的<a href="http://emberjs.com/">Ember</a>，旧版本的组件命名规则是驼峰式的命名规则。</p><p>举个简单的例子，在第一点“自定义组件及使用”中讲过，组件默认会被渲染到<code>div</code>标签内，你可以在组件类中修改这个默认标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/blog-post.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    tagName: <span class="string">&#x27;nav&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这段代码修改了包裹组件的标签名，页面刷新后HTML代码如下：</p><p><img src="http://static.oschina.net/uploads/img/201510/09021213_GSHQ.png"></p><p>可以看到组件的HTML代码被包含在<code>nav</code>标签内。</p><h2 id="3，动态渲染组件"><a href="#3，动态渲染组件" class="headerlink" title="3，动态渲染组件"></a>3，动态渲染组件</h2><p>组件的动态渲染与Java的多态有点相似。<code>{{component}}</code>助手会延迟到运行时才决定使用那个组件渲染页面。当程序需要根据数据不同渲染不同组件的时，这种动态渲染就显得特别有用。可以使你的逻辑和试图分离开。</p><p>那么要怎么使用呢？非常简单，只需要把组件名作为参数传递过去即可，比如：使用<code>{{component 'blog-post'}}</code>与<code>{{blog-post}}</code>结果是一致的。我们可以修改第一点“自定义组件及使用”实例中模板<code>index.hbs</code>的代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/index.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!-- 使用自定义组件的另一种方式（动态渲染组件方式） --&gt;</span></span><br><span class="line">    &#123;&#123;component &#x27;blog-post&#x27; title=item.title&#125;&#125;</span><br><span class="line">    &#123;&#123;item.body&#125;&#125;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><p>页面刷新之后，可以看到结果是一样的。</p><p>下面为读者演示如何根据数据不同渲染不同的组件。</p><p>按照惯例，先做好准备工作，使用Ember CLI命令创建2个不同的组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember g component foo-component</span><br><span class="line">ember g component bar-component</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/components/bar-component.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello from bar<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为何能用<code>post</code>获取数据，因为在使用组件的地方传递了参数。在模板<code>index.hbs</code>中可以看到。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/components/foo-component.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello from foo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改显示的数据，注意数据的最后增加一个属性<code>pn</code>，<code>pn</code>的值就是组件的名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> [</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;Bower: dependencies and resolutions new&#x27;</span>, <span class="attr">body</span>: <span class="string">&quot;In the bower.json file, I see 2 keys dependencies and resolutionsWhy is that so? I understand Bower has a flat dependency structure. So has it got anything to do with that ?&quot;</span>, <span class="attr">pn</span>: <span class="string">&#x27;bar-component&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&#x27;Highly Nested JSON Payload - hasMany error&#x27;</span>, <span class="attr">body</span>: <span class="string">&quot;Welcome to the Ember.js discussion forum. We&#x27;re running on the open source, Ember.js-powered Discourse forum software. They are also providing the hosting for us. Thanks guys! Please use this space for discussion abo⋯ read more&quot;</span>, <span class="attr">pn</span>: <span class="string">&#x27;foo-component&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">&#x27;Passing a jwt to my REST adapter new &#x27;</span>, <span class="attr">body</span>: <span class="string">&quot;This sets up a binding between the category query param in the URL, and the category property on controller:articles. In other words, once the articles route has been entered, any changes to the category query param in the URL will update the category property on controller:articles, and vice versa.&quot;</span>, <span class="attr">pn</span>: <span class="string">&#x27;bar-component&#x27;</span>&#125;</span><br><span class="line">        ];</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改调用组件的模板<code>index.hbs</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/index.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!-- 根据组件名渲染不同的组件，第一个参数是组件名，第二个参数为传递到组件上显示的数据 --&gt;</span></span><br><span class="line">    &#123;&#123;component item.pn post=item&#125;&#125;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><p>模板编译之后会得到形如<code>{{component foo-component post}}</code>的组件调用代码。</p><p>相信你应该了解了动态渲染组件是怎么回事了！自己动手试试吧~~</p><p>到此组件的定义与使用介绍完毕了，不知道你有没有学会呢？如果你有疑问请给我留言或者直接看官方教程学习。</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义包裹组件的HTML标签</title>
      <link href="/2020/01/18/ember-teach/components/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85%E8%A3%B9%E7%BB%84%E4%BB%B6%E7%9A%84HTML%E6%A0%87%E7%AD%BE/"/>
      <url>/2020/01/18/ember-teach/components/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85%E8%A3%B9%E7%BB%84%E4%BB%B6%E7%9A%84HTML%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<p>按照惯例，先做好准备工作，使用<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令生成演示所需的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ember g route customizing-component-element</span><br><span class="line">ember g component customizing-component-element</span><br><span class="line">ember g route home</span><br><span class="line">ember g route about</span><br></pre></td></tr></table></figure><p>默认情况下，组件会被包裹在<code>div</code>标签内。比如，组件渲染之后得到下面的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ember180&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ember-view&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>h1</code>标签就是组件的内容。以<code>ember</code>开头的<code>id</code>和<code>class</code>都是<a href="http://emberjs.com/">Ember</a>自动生成的。如果你需要修改渲染之后生成的HTML不是被包裹在<code>div</code>标签，或者修改<code>id</code>和<code>class</code>等属性值为自定义的值，你可以在组件类中设置。</p><h2 id="1，自定义包裹组件的HTML标签"><a href="#1，自定义包裹组件的HTML标签" class="headerlink" title="1，自定义包裹组件的HTML标签"></a>1，自定义包裹组件的HTML标签</h2><p>默认情况下，组件会被包裹在<code>div</code>标签内，如果你需要修改这个默认值你可以在组件类中指定这个包裹的HTML标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/customizing-component-element.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    <span class="comment">// 使用tabName属性指定渲染之后HTML标签</span></span><br><span class="line">    <span class="comment">// 注意属性的值必须是标准的HTML标签名</span></span><br><span class="line">    tagName: <span class="string">&#x27;nav&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下面自定义一个组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/components/customizing-component-element.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;#link-to &#x27;home&#x27;&#125;&#125;Home&#123;&#123;/link-to&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;#link-to &#x27;about&#x27;&#125;&#125;About&#123;&#123;/link-to&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是调用组件的模板代码。注意组件被包裹在那个HTML标签内，正确情况下应该是被包裹在<code>nav</code>标签中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/customizing-component-element.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;customizing-component-element&#125;&#125;</span><br></pre></td></tr></table></figure><p>页面加载之后查看页面的源代码。如下：</p><p><img src="http://static.oschina.net/uploads/img/201510/12021703_xHgu.png"></p><p>可以看到组件<code>customizing-component-element</code>的内容确实是被包裹在<code>nav</code>标签之中，如果在组件类中没有使用属性<code>tagName</code>指定包裹的HTML标签，默认是<code>div</code>，你可以把组件类中<code>tagName</code>属性删除之后再查看页面的HTML源码代码。</p><h2 id="2，自定义包裹组件的HTML元素的类名"><a href="#2，自定义包裹组件的HTML元素的类名" class="headerlink" title="2，自定义包裹组件的HTML元素的类名"></a>2，自定义包裹组件的HTML元素的类名</h2><p>默认情况下，<a href="http://emberjs.com/">Ember</a>会自动为包裹组件的HTML元素增加一个以<code>ember</code>开头的类名，如果你需要增加自定义的CSS类，可以在组件类中使用<code>className</code>数组属性指定，可以一次性指定多个CSS类。比如下面的代码例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/customizing-component-element.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    <span class="comment">// 使用tabName属性指定渲染之后HTML标签</span></span><br><span class="line">    <span class="comment">// 注意属性的值必须是标准的HTML标签名</span></span><br><span class="line">    tagName: <span class="string">&#x27;nav&#x27;</span>,</span><br><span class="line">    classNames: [<span class="string">&#x27;primary&#x27;</span>, <span class="string">&#x27;my-class-name&#x27;</span>]  <span class="comment">//指定包裹元素的CSS类</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>页面重新加载之后查看源代码，可以看到<code>nav</code>标签中多了两个CSS类，一个是<code>primary</code>，一个是<code>my-class-name</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;ember411&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ember-view primary my-class-name&quot;</span>&gt;</span></span><br><span class="line">⋯⋯</span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你想根据某个数据的值决定是否增加CSS类也是可以做到的，比如下面的代码，当<code>urgent</code>为<code>true</code>的时增加一个CSS类<code>urgent</code>，否则不增加这个类。要达到这个目的可以通过属性<code>classNameBindings</code>设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/customizing-component-element.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    <span class="comment">// 使用tabName属性指定渲染之后HTML标签</span></span><br><span class="line">    <span class="comment">// 注意属性的值必须是标准的HTML标签名</span></span><br><span class="line">    tagName: <span class="string">&#x27;nav&#x27;</span>,</span><br><span class="line">    classNames: [<span class="string">&#x27;primary&#x27;</span>, <span class="string">&#x27;my-class-name&#x27;</span>],  <span class="comment">//指定包裹元素的CSS类</span></span><br><span class="line">    classNameBindings: [<span class="string">&#x27;urgent&#x27;</span>],</span><br><span class="line">    urgent: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>页面重新加载之后查看源代码，可以看到<code>nav</code>标签中多了一个CSS类<code>urgent</code>，如果属性<code>urgent</code>的值为<code>false</code>，CSS类<code>urgent</code>将不会渲染到<code>nav</code>标签上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;ember411&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ember-view primary my-class-name urgent&quot;</span>&gt;</span></span><br><span class="line">⋯⋯</span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<code>classNameBindings</code>指定的属性值必须要跟用于判断数据的属性名一致，比如这个例子中<code>classNameBindings</code>指定的属性值是<code>urgent</code>，用户判断是否增加类的属性也是<code>urgent</code>。如果这个属性只是驼峰式命名的那么渲染之后CSS类名将是以中划线<code>-</code>分隔，比如<code>classNameBindings</code>指定一个名为<code>secondClassName</code>，渲染后的CSS类为<code>second-class-name</code>。比如下面的演示代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/customizing-component-element.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    <span class="comment">// 使用tabName属性指定渲染之后HTML标签</span></span><br><span class="line">    <span class="comment">// 注意属性的值必须是标准的HTML标签名</span></span><br><span class="line">    tagName: <span class="string">&#x27;nav&#x27;</span>,</span><br><span class="line">    classNames: [<span class="string">&#x27;primary&#x27;</span>, <span class="string">&#x27;my-class-name&#x27;</span>],  <span class="comment">//指定包裹元素的CSS类</span></span><br><span class="line">    classNameBindings: [<span class="string">&#x27;urgent&#x27;</span>, <span class="string">&#x27;secondClassName&#x27;</span>],</span><br><span class="line">    urgent: <span class="literal">true</span>,</span><br><span class="line">    secondClassName: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>页面重新加载之后查看源代码，可以看到<code>nav</code>标签中多了一个CSS类<code>second-class-name</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;ember411&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ember-view primary my-class-name urgent second-class-name&quot;</span>&gt;</span></span><br><span class="line">⋯⋯</span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你不想渲染之后的CSS类名被修改为中划线分隔形式，你可以值<code>classNameBindings</code>属性中指定渲染之后的CSS类名。比如下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/customizing-component-element.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    <span class="comment">// 使用tabName属性指定渲染之后HTML标签</span></span><br><span class="line">    <span class="comment">// 注意属性的值必须是标准的HTML标签名</span></span><br><span class="line">    tagName: <span class="string">&#x27;nav&#x27;</span>,</span><br><span class="line">    classNames: [<span class="string">&#x27;primary&#x27;</span>, <span class="string">&#x27;my-class-name&#x27;</span>],  <span class="comment">//指定包裹元素的CSS类</span></span><br><span class="line">    classNameBindings: [<span class="string">&#x27;urgent&#x27;</span>, <span class="string">&#x27;secondClassName:scn&#x27;</span>],  <span class="comment">//指定secondClassName渲染之后的CSS类名为scn</span></span><br><span class="line">    urgent: <span class="literal">true</span>,</span><br><span class="line">    secondClassName: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>页面重新加载之后查看源代码，可以看到<code>nav</code>标签中原来CSS类为<code>second-class-name</code>的变成了<code>scn</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;ember411&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ember-view primary my-class-name urgent scn&quot;</span>&gt;</span></span><br><span class="line">⋯⋯</span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有没有感觉<a href="http://emberjs.com/">Ember</a>既灵活又强大！！<a href="http://emberjs.com/">Ember</a>的设计理念是“约定优于配置”！所以很多的属性默认的设置都是我们平常开发中最常用的格式。</p><p>除了上述可以指定CSS类名之外，还可以在<code>classNameBindings</code>增加简单的逻辑，特别是在处理一些动态效果的时候上述特性是非常有用的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/customizing-component-element.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    <span class="comment">// 使用tabName属性指定渲染之后HTML标签</span></span><br><span class="line">    <span class="comment">// 注意属性的值必须是标准的HTML标签名</span></span><br><span class="line">    tagName: <span class="string">&#x27;nav&#x27;</span>,</span><br><span class="line">    classNames: [<span class="string">&#x27;primary&#x27;</span>, <span class="string">&#x27;my-class-name&#x27;</span>],  <span class="comment">//指定包裹元素的CSS类</span></span><br><span class="line">    classNameBindings: [<span class="string">&#x27;urgent&#x27;</span>, <span class="string">&#x27;secondClassName:scn&#x27;</span>, <span class="string">&#x27;isEnabled:enabled:disabled&#x27;</span>],</span><br><span class="line">    urgent: <span class="literal">true</span>,</span><br><span class="line">    secondClassName: <span class="literal">true</span>,</span><br><span class="line">    isEnabled: <span class="literal">true</span>  <span class="comment">//如果这个属性为true，类enabled将被渲染到nav标签上，如果属性值为false类disabled将被渲染到nav标签上，类似于三目运算</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>正如代码的注释所说的，<code>isEnabled:enabled:disabled</code>可以理解为一个三目运算，会根据<code>isEnabled</code>的值渲染不同的CSS类到<code>nav</code>上。</p><p>下面的HTML代码是<code>isEnabled</code>为<code>true</code>的情况，对于<code>isEnabled</code>为<code>false</code>的情况请读者自己试试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;ember411&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ember-view primary my-class-name urgent scn enabled&quot;</span>&gt;</span></span><br><span class="line">⋯⋯</span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果用于判断的属性值不是一个<code>Boolean</code>值而是一个字符串那么得到的结果与上面的结果是不一样的，<a href="http://emberjs.com/">Ember</a>会直接把这个字符串的值作为CSS类名渲染到包裹的标签上。比如下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/customizing-component-element.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    <span class="comment">// 使用tabName属性指定渲染之后HTML标签</span></span><br><span class="line">    <span class="comment">// 注意属性的值必须是标准的HTML标签名</span></span><br><span class="line">    tagName: <span class="string">&#x27;nav&#x27;</span>,</span><br><span class="line">    classNames: [<span class="string">&#x27;primary&#x27;</span>, <span class="string">&#x27;my-class-name&#x27;</span>],  <span class="comment">//指定包裹元素的CSS类</span></span><br><span class="line">    classNameBindings: [<span class="string">&#x27;urgent&#x27;</span>, <span class="string">&#x27;secondClassName:scn&#x27;</span>, <span class="string">&#x27;isEnabled:enabled:disabled&#x27;</span>, <span class="string">&#x27;stringValue&#x27;</span>],</span><br><span class="line">    urgent: <span class="literal">true</span>,</span><br><span class="line">    secondClassName: <span class="literal">true</span>,</span><br><span class="line">    isEnabled: <span class="literal">true</span>,  <span class="comment">//如果这个属性为true，类enabled将被渲染到nav标签上，如果属性值为false类disabled将被渲染到nav标签上，类似于三目运算</span></span><br><span class="line">    stringValue: <span class="string">&#x27;renderedClassName&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时页面的HTML源码就有点不一样了。<code>renderedClassName</code>作为CSS类名被渲染到了<code>nav</code>标签上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;ember411&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ember-view primary my-class-name urgent scn enabled renderedClassName&quot;</span>&gt;</span></span><br><span class="line">⋯⋯</span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于这点需要特别注意。<a href="http://emberjs.com/">Ember</a>对于<code>Boolean</code>值和其他值的判断结果是不一样的。</p><h2 id="3，自定义包裹组件的HTML元素的属性"><a href="#3，自定义包裹组件的HTML元素的属性" class="headerlink" title="3，自定义包裹组件的HTML元素的属性"></a>3，自定义包裹组件的HTML元素的属性</h2><p>在前面两点介绍了包裹组件的HTML元素的标签名、CSS类名，在HTML标签上出来CSS类另外一个最常用的就是属性，那么<a href="http://emberjs.com/">Ember</a>同样提供了自定义包裹HTML元素的属性的方法。使用<code>attributeBindings</code>属性指定，这个属性的属性方式与<code>classNameBindings</code>基本一致。<br>为了与前面的例子区别开新建一个组件<code>link-items</code>，使用命令<code>ember g component link-items</code>创建。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/components/link-items.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line">这是个组件</span><br></pre></td></tr></table></figure><p>在模板中调用组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/customizing-component-element.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;customizing-component-element&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;link-items&#125;&#125;</span><br></pre></td></tr></table></figure><p>下面设置组件类，指定包裹的HTML标签为<code>a</code>标签，并增加一个属性<code>href</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/link-items.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    tagName: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    attributeBindings: [<span class="string">&#x27;href&#x27;</span>],</span><br><span class="line">    href: <span class="string">&#x27;http://www.google.com.hk&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>页面重新加载之后得到如下结果：</p><p><img src="http://static.oschina.net/uploads/img/201510/12021703_cRJd.png"></p><p>比较简单，对于渲染之后的结果我就不过多解释了，请参考<code>classNameBindings</code>属性理解。</p><p>到此，有关于组件渲染之后包裹组件的HTML标签的相关设置介绍完毕。内容不多，<code>classNameBindings</code>和<code>attributeBindings</code>这两个属性的使用方式基本相同。如有疑问欢迎给我留言或者直接查看官方教程。<br><br><br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>控制器（controller）</title>
      <link href="/2020/01/18/ember-teach/controllers/%E6%8E%A7%E5%88%B6%E5%99%A8%EF%BC%88controller%EF%BC%89/"/>
      <url>/2020/01/18/ember-teach/controllers/%E6%8E%A7%E5%88%B6%E5%99%A8%EF%BC%88controller%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>从本篇开始进入第五章控制器，<code>controller</code>在E<code>mber2.0</code>开始越来越精简了，职责也更加单一——处理逻辑。</p><p>下面是准备工作。<br>重新创建一个<a href="http://emberjs.com/">Ember</a>项目，仍旧使用的是<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ember new chapter5_controllers</span><br><span class="line">cd chapter5_controllers</span><br><span class="line">ember server</span><br></pre></td></tr></table></figure><p>在浏览器执行项目，看到如下信息说明项目搭建成功。<br><strong>Welcome to Ember</strong>。</p><h2 id="1，控制器简介"><a href="#1，控制器简介" class="headerlink" title="1，控制器简介"></a>1，控制器简介</h2><p>控制器与组件非常相似，由此，在未来的新版本中很有可能组件将会完全取代控制器，很可能随着Ember版本的更新控制器将退出<a href="http://emberjs.com/">Ember</a>。目前的版本中组件还不能直接通过路由访问，需要通过模板调用才能使用组件，但是未来的版本会解决这个问题，到时候<code>controller</code>可能就真的从<a href="http://emberjs.com/">Ember</a>退出了！</p><p>正因如此，模块化的Ember应用很少用到<code>controller</code>。即便是使用了<code>controller</code>也是为了处理下面的两件事情：</p><ol><li><code>controller</code>主要是为了维持当前路由状态。一般来说，model的属性会保存到服务器，但是<code>controller</code>的属性却不会保存到服务器。</li><li>组件上的动作需要通过<code>controller</code>层转到<code>route</code>层。</li></ol><p>模板上下文的渲染是通过当前<code>controller</code>的路由处理的。<a href="http://emberjs.com/">Ember</a>所追随的理念是“约定优于配置”，这也就意味着如果你只需要一个<code>controller</code> 你就创建一个，而不是一切为了“便于工作”。</p><p>下面的例子是演示路由显示<code>blog post</code>。假设模板<code>blog-post</code>用于展示模型<code>blog-post</code>的数据，并在这个模型包含如下属性（隐含属性<code>id</code>，因为在<code>model</code>中不需要手动指定<code>id</code>属性）：</p><ul><li>title </li><li>intro</li><li>body</li><li>author</li></ul><p><code>model</code>定义如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/blog-post.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  title: DS.attr(<span class="string">&#x27;string&#x27;</span>),  <span class="comment">//  属性默认为string类型，可以不指定</span></span><br><span class="line">  intro: DS.attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">  body: DS.attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">  author: DS.attr(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>route</code>层增加测试数据，直接返回一个<code>model</code>对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/blog-post.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> blogPost = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">            title: <span class="string">&#x27;DEFINING A COMPONENT&#x27;</span>,  <span class="comment">//  属性默认为string类型，可以不指定</span></span><br><span class="line">            intro: <span class="string">&quot;Components must have at least one dash in their name. &quot;</span>,</span><br><span class="line">            body: <span class="string">&quot;Components must have at least one dash in their name. So blog-post is an acceptable name, and so is audio-player-controls, but post is not. This prevents clashes with current or future HTML element names, aligns Ember components with the W3C Custom Elements spec, and ensures Ember detects the components automatically.&quot;</span>,</span><br><span class="line">            author: <span class="string">&#x27;ubuntuvim&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 直接返回一个model，或者你可以返回promises，</span></span><br><span class="line">        <span class="keyword">return</span> blogPost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>显示信息的模板如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/blog-post.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;model.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;model.author&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;intro&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;model.intro&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;model.body&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你的代码没有编写错误那么也会得到如下结果：</p><p><img src="http://static.oschina.net/uploads/img/201510/15003412_jEnj.png" alt="结果"></p><p><strong>Welcome to Ember</strong>是主模板的信息，你可以在<code>application.hbs</code>中删除，但是记得不要删除<code>&#123;&#123;outlet&#125;&#125;</code>，否则什么信息也不显示。</p><p>这个例子中没有显示任何特定的属性或者指定的动作（<code>action</code>）。此时，控制器的model属性所扮演的角色仅仅是模型属性的<code>pass-through</code>（或代理）。<br>注意：控制器获取的<code>model</code>是从<code>route</code>得到的。</p><p>下面为这个例子增加一个功能：用户可以点击标题触发显示或者隐藏<code>post</code>的内容。通过一个属性<code>isExpanded</code>控制，下面分别修改模板和控制器的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/controllers/blog-post.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    isExpanded: <span class="literal">false</span>,  <span class="comment">//默认不显示body</span></span><br><span class="line">    actions: &#123;</span><br><span class="line">        toggleBody: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.toggleProperty(<span class="string">&#x27;isExpanded&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>controller</code>中增加一个属性<code>isExpanded</code>，如果你不在<code>controller</code>中定义这个属性也是可以的。对于这个<code>controller</code>代码的解释请看<a href="http://blog.ddlisting.com/2016/03/22/ember-js-ru-men-zhi-nan-zhi-shi-wu-action/">Ember.js 入门指南之十五 助手</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/blog-post.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;model.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;model.author&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;intro&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;model.intro&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;&#123;#if isExpanded&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">toggleBody</span>&#x27;&#125;&#125;&gt;</span>hide body<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;model.body&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">toggleBody</span>&#x27;&#125;&#125;&gt;</span>Show body<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">&#123;&#123;/if&#125;&#125;</span><br></pre></td></tr></table></figure><p>在模板中使用<code>if</code>助手判断<code>isExpanded</code>的值，如果为<code>true</code>则显示<code>body</code>，否则不显示。</p><p>页面加载之后结果如下，首先是不显示<code>body</code>内容，点击按钮“Show body”则显示内容，并且按钮变为“hide body”。然后在点击这个按钮则不显示<code>body</code>内容。</p><p><img src="http://static.oschina.net/uploads/img/201510/15003412_4mzn.png" alt="隐藏"></p><p><img src="http://static.oschina.net/uploads/img/201510/15003412_atzS.png" alt="展开"></p><p>到此<code>controller</code>的职责你应该大致了解了，其主要的作用是逻辑的判断、处理，比如这里例子中判断<code>body</code>内容的显示与否，其实你也可以把<code>controller</code>类中的处理代码放在<code>route</code>类中也可以实现这个效果，但是要作为<code>model</code>的属性返回（把<code>isExpanded</code>当做<code>model</code>的属性处理），请读者自己动手试试，但是把逻辑放到<code>route</code>又会使得<code>route</code>变得“不专一”了，<code>route</code>的主要职责是初始化数据的。我想这也是Ember还留着<code>controller</code>的原因之一吧！！</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Controller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理controller之间的依赖关系</title>
      <link href="/2020/01/18/ember-teach/controllers/%E7%AE%A1%E7%90%86controller%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/"/>
      <url>/2020/01/18/ember-teach/controllers/%E7%AE%A1%E7%90%86controller%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>在有路由嵌套的情况下，你可能需要在两个不同的<code>controller</code>之间通信。<br>按照惯例先做准备工作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ember g route post</span><br><span class="line">ember g route post&#x2F;comments</span><br><span class="line">ember g model post</span><br></pre></td></tr></table></figure><p>比如下面的路由设置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./config/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Router = Ember.Router.extend(&#123;</span><br><span class="line">  location: config.locationType</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;blog-post&#x27;</span>);</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;post&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/posts/:post_id&#x27;</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;comments&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><p>对于这个路由配置生成的路由表请看<a href="http://blog.ddlisting.com/2016/03/22/ember-js-ru-men-zhi-nan-zhi-shi-san-link-to/">Ember.js 入门指南之十三NaN 助手</a>。</p><p>如果用户访问<code>/posts/1/comments</code>。模型<code>post</code>就会加载到<code>postController</code>，并不会直接加载到<code>commentsController</code>。然后如果你想在一篇<code>post</code>中显示<code>comment</code>信息呢？</p><p>为了实现这个功能，可以把<code>postController</code>注入到<code>commentController</code>中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/controllers/comments.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    postController: Ember.inject.controller(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一旦<code>comments</code>路由被访问，<code>postController</code>就会获取控制器对应的<code>model</code>，并且这个<code>model</code>是只读的。为了能获取到模型<code>post</code>还需要增加一个引用<code>postController.model</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/controllers/comments.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    postController: Ember.inject.controller(<span class="string">&#x27;post&#x27;</span>),</span><br><span class="line">    post: Ember.computed.reads(<span class="string">&#x27;postController.model&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后可以直接在<code>comment</code>模板中显示模型<code>post</code>和<code>comment</code>的信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Comments for &#123;&#123;post.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;#each model as |comment|&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;comment.text&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有关更多别名的介绍请移步这里查看<a href="emberjs.com/api/#method_computed_alias">API文档</a>的介绍。如果你想了解更多关于注入的问题请看<a href="emberjs.com/api/#method_computed_alias">这里</a>的教程（新版官网已经没有这个地址的文档了）。</p><p><code>controller</code>这章的内容到此也全部介绍完毕了，只有寥寥的2篇教程，可见<code>controller</code>在<a href="http://emberjs.com/">Ember</a>未来版本会被组件替代已成必然。</p><p>那么下一章将为大伙介绍模型，模型对于<a href="http://emberjs.com/">Ember</a>来说是一块非常重要的内容，内容也比较多！我回用9篇文章来给你介绍模型，从定义到其使用等等内容。<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Controller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>model的关联关系处理</title>
      <link href="/2020/01/18/ember-teach/models/model%E7%9A%84%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%E5%A4%84%E7%90%86/"/>
      <url>/2020/01/18/ember-teach/models/model%E7%9A%84%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在前面<a href="http://blog.ddlisting.com/2016/04/08/ding-yi-mo-xing/">Ember.js 入门指南之三十八定义模型</a>中介绍过模型之前的关系。主要包括一对一、一对多、多对多关系。但是还没介绍两个有关联关系模型的更新、删除等操作。</p><p>为了测试新建两个模型类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember g model post</span><br><span class="line">ember g model comment</span><br></pre></td></tr></table></figure><h2 id="1，创建关系记录"><a href="#1，创建关系记录" class="headerlink" title="1，创建关系记录"></a>1，创建关系记录</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/post.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  comments: DS.hasMany(<span class="string">&#x27;comment&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  app/model/comment.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">    post: DS.belongsTo(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>设置关联，关系的维护放在多的一方<code>comment</code>上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> post = <span class="built_in">this</span>.store.peekRecord(<span class="string">&#x27;post&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> comment = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;comment&#x27;</span>, &#123;</span><br><span class="line">  post: post</span><br><span class="line">&#125;);</span><br><span class="line">comment.save();</span><br></pre></td></tr></table></figure><p>保存之后<code>post</code>会自动关联到<code>comment</code>上（保存<code>post</code>的<code>id</code>属性值到<code>post</code>属性上）。</p><p>当然啦，你可以在从<code>post</code>上设置关联关系。比如下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> post = <span class="built_in">this</span>.store.peekRecord(<span class="string">&#x27;post&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> comment = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;comment&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">//  设置属性值</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//  手动吧对象设置到post数组中。（post是多的一方，comments属性应该是保存关系的数组）</span></span><br><span class="line">post.get(<span class="string">&#x27;comments&#x27;</span>).pushObject(comment);</span><br><span class="line">comment.save();</span><br></pre></td></tr></table></figure><p>如果你学过Java里的hibernate框架我相信你很容易就能理解这段代码。你可以想象，<code>post</code>是一的一方，如果它要维护关系是不是要把与其关联的<code>comment</code>的<code>id</code>保存到<code>comments</code>属性（数组）上，因为一个<code>post</code>可以关联多个<code>comment</code>，所以<code>comments</code>属性应该是一个数组。</p><h2 id="2，更新已经存在的记录"><a href="#2，更新已经存在的记录" class="headerlink" title="2，更新已经存在的记录"></a>2，更新已经存在的记录</h2><p>更新关联关系与创建关联关系几乎是一样的。也是首先获取需要关联的模型在设置它们的关联关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> post = <span class="built_in">this</span>.store.peekRecord(<span class="string">&#x27;post&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">let</span> comment = <span class="built_in">this</span>.store.peekRecord(<span class="string">&#x27;comment&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">comment.set(<span class="string">&#x27;psot&#x27;</span>, post);  <span class="comment">//  重新设置comment与post的关系</span></span><br><span class="line">comment.save();  <span class="comment">//  保存关联的关系</span></span><br></pre></td></tr></table></figure><p>假设原来<code>comment</code>关联的<code>post</code>是<code>id</code>为<code>1</code>的数据，现在重新更新为<code>comment</code>关联<code>id</code>为<code>100</code>的<code>post</code>数据。</p><p>如果是从<code>post</code>方更新，那么你可以像下面的代码这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> post = <span class="built_in">this</span>.store.peekRecord(<span class="string">&#x27;post&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">let</span> comment <span class="built_in">this</span>.store.peekRecord(<span class="string">&#x27;comment&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">post.get(<span class="string">&#x27;comments&#x27;</span>).pushObject(comment);  <span class="comment">// 设置关联</span></span><br><span class="line">post.save();  <span class="comment">//  保存关联</span></span><br></pre></td></tr></table></figure><h2 id="3，删除关联关系"><a href="#3，删除关联关系" class="headerlink" title="3，删除关联关系"></a>3，删除关联关系</h2><p>既然有新增关系自然也会有删除关联关系。<br>如果要移除两个模型的关联关系，只需要把关联的属性值设置为<code>null</code>就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> comment = <span class="built_in">this</span>.store.peekRecord(<span class="string">&#x27;comment&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">comment.set(<span class="string">&#x27;post&#x27;</span>, <span class="literal">null</span>);  <span class="comment">//解除关联关系</span></span><br><span class="line">comment.save();</span><br></pre></td></tr></table></figure><p>当然你也可以从一的一方移除关联关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> post = <span class="built_in">this</span>.store.peekRecord(<span class="string">&#x27;post&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> comment = <span class="built_in">this</span>.store.peekRecord(<span class="string">&#x27;comment&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">post.get(<span class="string">&#x27;comments&#x27;</span>).removeObject(comment);  <span class="comment">// 从关联数组中移除comment</span></span><br><span class="line">post.save();</span><br></pre></td></tr></table></figure><p>从一的一方维护关系其实就是在维护关联的数组元素。</p><p>只要Store改变了Handlebars模板就会自动更新页面显示的数据，并且在适当的时期Ember Data会自动更新到服务器上。</p><p>有关于模型之间关系的维护就介绍到这里，它们之间关系的维护只有两种方式，一种是用一的一方维护，另一种是用多的一方维护，相比来说，从一的一方维护更简单。但是如果你需要一次性更新多个纪录的关联时使用第二种方式更加合适（都是针对数组操作）。</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>model简介</title>
      <link href="/2020/01/18/ember-teach/models/model%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/01/18/ember-teach/models/model%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="http://emberjs.com/">Ember</a>官网用了大篇幅来介绍<code>model</code>，相比之前的<code>controller</code>简直就是天壤之别啊！</p><p>从本篇开始学习<a href="http://emberjs.com/">Ember</a>的模型，这一章也是<a href="http://emberjs.com/">Ember</a>基础部分的最后一章内容，非常的重要（不管你信不信反正我是信了）。</p><p>在开始学习<code>model</code>之前先做好准备工作：<br>重新创建一个<a href="http://emberjs.com/">Ember</a>项目，仍旧使用的是<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ember new chapter6_models</span><br><span class="line">cd chapter6_models</span><br><span class="line">ember server</span><br></pre></td></tr></table></figure><p>在浏览器执行项目，看到如下信息说明项目搭建成功。<br><strong>Welcome to Ember</strong></p><p>本章演示所用到的代码都可以从<a href="https://github.com/ubuntuvim/my_emberjs_code/tree/master/chapter6_models">https://github.com/ubuntuvim/my_emberjs_code/tree/master/chapter6_models</a>获取。</p><p>在介绍<code>model</code>之前先在项目中引入<a href="https://www.firebase.com/">firebase</a>。相关的配置教材请移步这里（如果无法加载页面请先在<a href="https://www.firebase.com/">https://www.firebase.com/</a>注册用户）。firebase的官网提供了专门用于Ember的版本，还提供了非常简单的例子。从安装到整合都给出了非常详细代码教程。<br>下面是我的整合步骤（命令都是在项目目录下执行的）：</p><ul><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember install emberfire</span><br></pre></td></tr></table></figure><p>安装完成之后会自动创建<code>adapter（app/adapters/application.js）</code>，对于这个文件不需要做任何修改，官网提供的代码也许跟你的项目的代码不同，应该是官网的版本是旧版的。</p></li><li><p>配置<code>config/environment.js</code><br>修改第八行<code>firebase: &#39;https://YOUR-FIREBASE-NAME.firebaseio.com/&#39;</code>。这个地址是你注册用户时候得到的。你可以从<a href="https://www.firebase.com/account/#/">这里</a>查看你的地址。比如下图所示位置</p></li></ul><p><img src="http://static.oschina.net/uploads/img/201510/17021237_VucE.png" alt="截图"></p><ul><li>再在<code>config/enviroment.js</code>的<code>APP:&#123;&#125;</code>(大概第20行)后面新增如下代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">APP: &#123;</span><br><span class="line">      <span class="comment">// Here you can pass flags/options to your application instance</span></span><br><span class="line">      <span class="comment">// when it is created</span></span><br><span class="line">    &#125;,</span><br><span class="line">    contentSecurityPolicy: &#123;</span><br><span class="line">      <span class="string">&#x27;default-src&#x27;</span>: <span class="string">&quot;&#x27;none&#x27;&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;script-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27; *&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;font-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; *&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;connect-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; *&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;img-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; *&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;style-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; &#x27;unsafe-inline&#x27; *&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;frame-src&#x27;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>然后再注释掉第7行原有属性（安装<code>firebase</code>自动生成的，但是配置不够完整）：<code>contentSecurityPolicy</code>。</li></ul><p>或者你可以参考我的配置文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* jshint node: true */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">environment</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ENV = &#123;</span><br><span class="line">    modulePrefix: <span class="string">&#x27;chapter6-models&#x27;</span>,</span><br><span class="line">    environment: environment,</span><br><span class="line">    <span class="comment">// contentSecurityPolicy: &#123; &#x27;connect-src&#x27;: &quot;&#x27;self&#x27; https://auth.firebase.com wss://*.firebaseio.com&quot; &#125;,</span></span><br><span class="line">    firebase: <span class="string">&#x27;你的firebase连接&#x27;</span>,</span><br><span class="line">    baseURL: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    locationType: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">    EmberENV: &#123;</span><br><span class="line">      FEATURES: &#123;</span><br><span class="line">        <span class="comment">// Here you can enable experimental features on an ember canary build</span></span><br><span class="line">        <span class="comment">// e.g. &#x27;with-controller&#x27;: true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    APP: &#123;</span><br><span class="line">      <span class="comment">// Here you can pass flags/options to your application instance</span></span><br><span class="line">      <span class="comment">// when it is created</span></span><br><span class="line">    &#125;,</span><br><span class="line">    contentSecurityPolicy: &#123;</span><br><span class="line">      <span class="string">&#x27;default-src&#x27;</span>: <span class="string">&quot;&#x27;none&#x27;&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;script-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27; *&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;font-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; *&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;connect-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; *&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;img-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; *&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;style-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; &#x27;unsafe-inline&#x27; *&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;frame-src&#x27;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 其他代码省略⋯⋯</span></span><br><span class="line">  <span class="keyword">return</span> ENV;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果不做这个配置启动项目之后浏览器会提示一堆的错误。主要是一些访问权限问题。配置完之后需要重启项目才能生效！</p><h2 id="1，简介"><a href="#1，简介" class="headerlink" title="1，简介"></a>1，简介</h2><p><code>model</code>是一个用于向用户呈现底层数据的对象。不同的应用有不同的<code>model</code>，这取决于解决的问题需要什么样的<code>model</code>就定义什么样的<code>model</code>。<br><BR><br><code>model</code>通常是持久化的。这也就意味着用户关闭了浏览器窗口<code>model</code>数据不应该丢失。为了确保<code>model</code>数据不丢失，你需要存储<code>model</code>数据到你所指定的服务器或者是本地数据文件中。<br><BR><br>一种非常常见的情况是，<code>model</code>数据会以<code>JSON</code>的格式通过<code>HTTP</code>发送到服务器并保存在服务中。Ember还未开发者提供了一种更加简便的方式：使用<a href="w3c.github.io/IndexedDB/">IndexedDB</a>（使用在浏览器中的数据库）。这种方式是把<code>model</code>数据保存到本地。或者使用<a href="https://github.com/emberjs/data">Ember Data</a>，又或者使用<a href="https://www.firebase.com/">firebase</a>，把数据直接保存到远程服务器上，后续的文章我将引入<a href="https://www.firebase.com/">firebase</a>，把数据保存到远程服务器上。<br><BR><br>Ember使用适配器模式连接数据库，可以适配不同类型的后端数据库而不需要修改任何的网络代码。你可以从<a href="http://emberobserver.com/categories/ember-data-adapters">emberobserver</a>上看到几乎所有Ember支持的数据库。<br><BR><br>如果你想把你的Ember应用与你的远程服务器整合，几遍远程服务器<code>API</code>返回的数据不是规范的<code>JSON</code>数据也不要紧，<a href="https://github.com/emberjs/data">Ember Data</a>可以配置任何服务器返回的数据。<br><BR><br><a href="https://github.com/emberjs/data">Ember Data</a>还支持流媒体服务器，比如WebSocket。你可以打开一个socket连接远程服务器，获取最新的数据或者把变化的数据推送到远程服务器保存。<br><BR><br><a href="https://github.com/emberjs/data">Ember Data</a>为你提供了更加简便的方式操作数据，统一管理数据的加载，降低程序复杂度。<br><BR><br>对于<code>model</code>与<a href="https://github.com/emberjs/data">Ember Data</a>的介绍就到此为止吧，官网用了大量篇幅介绍Model，在此我就不一一写出来了！太长了，写出来也没人看的！！！如果有兴趣自己看吧！<a href="guides.emberjs.com/v2.0.0/models/#toc_the-store-and-a-single-source-of-truth">点击查看详细信息</a>。<br><BR><br>下面先看一个简单的例子，由这个例子延伸出有关于<code>model</code>的核心概念。这些代码是旧版写法，仅仅是为了说明问题，本文也不会真正执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/list-of-drafts.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">  willRender() &#123;</span><br><span class="line">    <span class="comment">// ECMAScript 6语法</span></span><br><span class="line">    $.getJSON(<span class="string">&#x27;/drafts&#x27;</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.set(<span class="string">&#x27;drafts&#x27;</span>, data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>定义了一个组件类。并在组件类中获取<code>json</code>格式数据。<br>下面是组件对应的模板文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/components/list-of-drafts.hbs  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  &#123;&#123;#each drafts key=&quot;id&quot; as |draft|&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;draft.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再定义另外一个组件类和模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/components/list-button.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">  willRender() &#123;</span><br><span class="line">    <span class="comment">// ECMAScript 6语法</span></span><br><span class="line">    $.getJSON(<span class="string">&#x27;/drafts&#x27;</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.set(<span class="string">&#x27;drafts&#x27;</span>, data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/components/ list-button.hbs  --&gt;</span></span><br><span class="line">&#123;&#123;#link-to ‘drafts’ tagName=’button’&#125;&#125;</span><br><span class="line">Drafts (&#123;&#123;drafts.length&#125;&#125;)</span><br><span class="line">&#123;&#123;/link-to&#125;&#125;</span><br></pre></td></tr></table></figure><p>组件<code>list-of-drafts</code>类和组件<code>list-button</code>类是一样的，但是他们的对应的模板却不一样。但是都是从远程服务器获取同样的数据。如果没有<code>Store</code>（<code>model</code>核心内容之一）那么每次这两个模板渲染都会是组件类调用一次远程数据。并且返回的数据是一样的。这无形中增加了不必要的请求，暂用了不必要的宽带，用户体验也不好。但是有了<code>Store</code>就不一样了，你可以把<code>Store</code>理解为仓库，每次执行组件类时先到<code>Store</code>中获取数据，如果没有再去远程获取。当在其中一个组件中改变某些数据，数据的更改也能理解反应到另一个获取此数据的组件上（与计算属性自动更新一样），而这个组件不需要再去服务请求才能获取最新更改过的数据。</p><p>下面的内容将为你一一介绍Ember Data最核心的几个东西：<code>models</code>、<code>records</code>、<code>adapters</code>、<code>store</code>。</p><h2 id="2，核心概念"><a href="#2，核心概念" class="headerlink" title="2，核心概念"></a>2，核心概念</h2><p>声明：下面简介内摘抄至<a href="http://www.emberjs.cn/guides/models/#toc_">http://www.emberjs.cn/guides/models/#toc_</a>。</p><h4 id="1，store"><a href="#1，store" class="headerlink" title="1，store"></a>1，store</h4><p><code>store</code>是应用存放记录的中心仓库。你可以认为<code>store</code>是应用的所有数据的缓存。应用的控制器和路由都可以访问这个共享的<code>store</code>；当它们需要显示或者修改一个记录时，首先就需要访问<code>store</code>。</p><p><code>DS.Store</code>的实例会被自动创建，并且该实例被应用中所有的对象所共享。</p><p><code>store</code>可以看做是一个缓存。在下面的<code>cache</code>会结合<code>store</code>介绍。</p><p>下面的例子结合firebase演示：<br>创建路由和<code>model</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember g route store-example</span><br><span class="line">ember g model article</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   app/models/article.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  title: DS.attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">  body: DS.attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">  timestamp: DS.attr(<span class="string">&#x27;number&#x27;</span>),</span><br><span class="line">  category: DS.attr(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个就是<code>model</code>，本章要讲的内容就是它！为何没有定义id属性呢？<code>Ember</code>会默认生成<code>id</code>属性。</p><p>我们在路由的<code>model</code>回调中获取远程的数据，并显示在模板上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/store-example.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">  model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 从store中获取id为JzySrmbivaSSFG6WwOk的数据，这个数据是我在我的firebase中初始化好的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.store.find(<span class="string">&#x27;article&#x27;</span>, <span class="string">&#x27;-JzySrmbivaSSFG6WwOk&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>find</code>方法的第一个参数是<code>model</code>类名，第二个参数对象的<code>id</code>属性值。记得id属性不需要在<code>model</code>类中手动定义，Ember会自动为你定义。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;model.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;model.body&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面加载之后可以看到获取到的数据。</p><p><img src="http://static.oschina.net/uploads/img/201510/17022136_51O7.png" alt="加载得到的数据"></p><p>下面是我的firebase上的部分数据截图。</p><p><img src="http://static.oschina.net/uploads/img/201510/17022136_7wt1.png" alt="firebase数据"></p><p>可以看到成功获取到<code>id</code>为<code>-JzySrmbivaSSFG6WwOk</code>的数据。更多关于数据的操作在后面会详细介绍。</p><h4 id="2，model"><a href="#2，model" class="headerlink" title="2，model"></a>2，model</h4><p>有关<code>model</code>的概念前面的简介已经介绍了，这里不再赘述。<br><code>model</code>定义：</p><p><code>model</code>是由若干个属性构成的。<code>attr</code>方法的参数指定属性的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  title: DS.attr(<span class="string">&#x27;string&#x27;</span>),  <span class="comment">//  字符串类型</span></span><br><span class="line">  flag: DS.attr(<span class="string">&#x27;boolean&#x27;</span>), <span class="comment">//  布尔类型</span></span><br><span class="line">  timestamp: DS.attr(<span class="string">&#x27;number&#x27;</span>),  <span class="comment">//  数字类型</span></span><br><span class="line">  birth: DS.attr(‘date’)  <span class="comment">//日期类型</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>模型也声明了它与其他对象的关系。例如，一个<code>Order</code>可以有许多<code>LineItems</code>，一个<code>LineItem</code>可以属于一个特定的<code>Order</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">App.Order = DS.Model.extend(&#123;</span><br><span class="line">  lineItems: DS.hasMany(<span class="string">&#x27;lineItem&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">App.LineItem = DS.Model.extend(&#123;</span><br><span class="line">  order: DS.belongsTo(<span class="string">&#x27;order&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个与数据的表之间的关系是一样的。</p><h4 id="3，record"><a href="#3，record" class="headerlink" title="3，record"></a>3，record</h4><p><code>record</code>是<code>model</code>的实例，包含了从服务器端加载而来的数据。应用本身也可以创建新的记录，以及将新记录保存到服务器端。</p><p>记录由以下两个属性来唯一标识：</p><ol><li>模型类型</li><li>一个全局唯一的ID</li></ol><p>比如前面的实例<code>article</code>就是通过<code>find</code>方获取。获取到的结果就是一个<code>record</code>。</p><h4 id="4，adapter"><a href="#4，adapter" class="headerlink" title="4，adapter"></a>4，adapter</h4><p>适配器是一个了解特定的服务器后端的对象，主要负责将对记录(<code>record</code>)的请求和变更转换为正确的向服务器端的请求调用。</p><p>例如，如果应用需要一个<code>ID</code>为<code>1</code>的<code>person</code>记录，那么Ember Data是如何加载这个对象的呢？是通过HTTP，还是Websocket？如果是通过HTTP，那么URL会是<code>/person/1</code>，还是<code>/resources/people/1</code>呢？</p><p>适配器负责处理所有类似的问题。无论何时，当应用需要从<code>store</code>中获取一个没有被缓存的记录时，应用就会访问适配器来获取这个记录。如果改变了一个记录并准备保存改变时，<code>store</code>会将记录传递给适配器，然后由适配器负责将数据发送给服务器端，并确认保存是否成功。</p><h4 id="5，cache"><a href="#5，cache" class="headerlink" title="5，cache"></a>5，cache</h4><p><code>store</code>会自动缓存记录。如果一个记录已经被加载了，那么再次访问它的时候，会返回同一个对象实例。这样大大减少了与服务器端的往返通信，使得应用可以更快的为用户渲染所需的UI。</p><p>例如，应用第一次从<code>store</code>中获取一个<code>ID</code>为<code>1</code>的<code>person</code>记录时，将会从服务器端获取对象的数据。</p><p>但是，当应用再次需要<code>ID</code>为<code>1</code>的<code>person</code>记录时，<code>store</code>会发现这个记录已经获取到了，并且缓存了该记录。那么<code>store</code>就不会再向服务器端发送请求去获取记录的数据，而是直接返回第一次时候获取到并构造出来的记录。这个特性使得不论请求这个记录多少次，都会返回同一个记录对象，这也被称为<code>Identity Map</code>（标识符映射）。</p><p>使用标识符映射非常重要，因为这样确保了在一个UI上对一个记录的修改会自动传播到UI其他使用到该记录的UI。同时这意味着你无须手动去保持对象的同步，只需要使用<code>ID</code>来获取应用已经获取到的记录就可以了。</p><h2 id="3，架构简介"><a href="#3，架构简介" class="headerlink" title="3，架构简介"></a>3，架构简介</h2><p>应用第一次从<code>store</code>获取一个记录时，<code>store</code>会发现本地缓存并不存在一份被请求的记录的副本，这时会向适配器发请求。适配器将从持久层去获取记录；通常情况下，持久层都是一个HTTP服务，通过该服务可以获取到记录的一个<code>JSON</code>表示。</p><p><img src="http://static.oschina.net/uploads/img/201510/17022136_qwjL.png" alt="架构图1"></p><p>如上图所示，适配器有时不能立即返回请求的记录。这时适配器必须向服务器发起一个异步的请求，当请求完成加载后，才能通过返回的数据创建的记录。</p><p>由于存在这样的异步性，<code>store</code>会从<code>find()</code>方法立即返回一个承诺（<code>promise</code>）。另外，所有请求需要<code>store</code>与适配器发生交互的话，都会返回承诺。<br>一旦发给服务器端的请求返回被请求记录的JSON数据时，适配器会履行承诺，并将<code>JSON</code>传递给<code>store</code>。<br><code>store</code>这时就获取到了<code>JSON</code>，并使用<code>JSON</code>数据完成记录的初始化，并使用新加载的记录来履行已经返回到应用的承诺。</p><p><img src="http://static.oschina.net/uploads/img/201510/17022136_iwjw.png" alt="架构图2"></p><p>下面将介绍一下当<code>store</code>已经缓存了请求的记录时会发生什么。</p><p><img src="http://static.oschina.net/uploads/img/201510/17022136_Xy17.png" alt="架构图3"></p><p>在这种情形下，<code>store</code>已经缓存了请求的记录，不过它也将返回一个承诺，不同的是，这个承诺将会立即使用缓存的记录来履行。此时，由于<code>store</code>已经有了一份拷贝，所以不需要向适配器去请求（没有与服务器发生交互）。</p><p><code>models</code>、<code>records</code>、<code>adapters</code>、<code>store</code>是你必须要理解的概念。这是Ember Data最核心的东西。</p><p>有关于上述的概念将会在后面的文章一一用代码演示。理解了本文<code>model</code>这一整章的内容都不是问题了！！！<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元数据</title>
      <link href="/2020/01/18/ember-teach/models/%E5%85%83%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/01/18/ember-teach/models/%E5%85%83%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>元数据是数据与一个特定的模式或类型，而不是一个纪录。</p></blockquote><p>一个很常见的例子是分页。通常会像下面的代码设置分页：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="built_in">this</span>.store.query(‘post’, &#123;</span><br><span class="line">  limit: <span class="number">10</span>,</span><br><span class="line">  offset: <span class="number">0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>设置了每页显示数据为10条，但是你不知道总条数，又怎么知道一共有多少页呢？这时候元数据就派上用场了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;post&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Progressive Enhancement is Dead&quot;</span>,</span><br><span class="line">    <span class="string">&quot;comments&quot;</span>: [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>],</span><br><span class="line">    <span class="string">&quot;links&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;user&quot;</span>: <span class="string">&quot;/people/tomdale&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;meta&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些数据是从后台返回的<a href="http://www.json.org/">JSON</a>格式数据，如果你想获取元数据可以使用<code>this.get(&#39;meta&#39;)</code>获取。甚至还可以从<code>query()</code>方法中获取。</p><p><code>let</code> 和 <code>=&gt;</code> 都是<a href="http://es6.ruanyifeng.com/">javascript ES6</a>的语法，如果你想了解有关javascript ES6请Google。</p><p>对于元数据在项目中的使用会在后面的例子中展现。在介绍完<a href="http://emberjs.com/">Ember</a>基础知识后我回做一个比较完整的小项目，我会在项目中尽可能的使用所讲过的知识点，敬请期待⋯⋯<br><em>小项目代码：<a href="https://github.com/ubuntuvim/todos_v2">todos</a></em></p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定义模型</title>
      <link href="/2020/01/18/ember-teach/models/%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/01/18/ember-teach/models/%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>模型也是一个类，它定义了向用户展示的属性和数据行为。模型的定义非常简单，只需要继承<a href="http://emberjs.com/api/data/classes/DS.Model.html">DS.Model</a>类即可，或者你也可以直接使用<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令创建。比如使用命令模型 <code>ember g model person</code>定义了一个模型类<code>person</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/person.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个是个空的模型，没有定义任何属性。有了模型类你就可以使用<code>find</code>方法查找数据了。</p><h2 id="1，定义属性"><a href="#1，定义属性" class="headerlink" title="1，定义属性"></a>1，定义属性</h2><p>上面定义的模型类<code>person</code>还没有任何属性，下面为这个类添加几个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/person.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">    firstName: DS.attr(),</span><br><span class="line">    lastName: DS.attr(),</span><br><span class="line">    birthday: DS.attr()  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述代码定义了3个属性，但是还未给属性指定类型，默认都是<code>string</code>类型。这些属性名与你连接的服务器上的数据<code>key</code>是一致的。甚至你还可以在模型中定义<a href="http://blog.ddlisting.com/2016/03/17/ember-js-ru-men-zhi-nan-ji-suan-shu-xing-compute-properties/">计算属性</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/person.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">    firstName: DS.attr(),</span><br><span class="line">    lastName: DS.attr(),</span><br><span class="line">    birthday: DS.attr(),</span><br><span class="line"></span><br><span class="line">    fullName: Ember.computed(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.get(<span class="string">&#x27;firstName&#x27;</span>)&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.get(<span class="string">&#x27;lastName&#x27;</span>)&#125;</span>`</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这段代码在模型类中定义了一个计算属性<code>fullName</code>。</p><h2 id="2，指定属性类型与默认值"><a href="#2，指定属性类型与默认值" class="headerlink" title="2，指定属性类型与默认值"></a>2，指定属性类型与默认值</h2><p>前面定义的模型类是没有指定属性类型的，默认情况下都是<code>string</code>类型，显然这是不够的，简单的模型属性类型包括：<code>string</code>，<code>number</code>，<code>boolean</code>，<code>date</code>。这几个类型我想不用我解释都应该知道了。</p><p>不仅可以指定属性类型，你还可以指定属性的默认值，在<a href="http://emberjs.com/api/data/classes/DS.html#method_attr">attr()</a>方法的第二个参数指定。比如下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/person.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">    username: DS.attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">    email: DS.attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">    verified: DS.attr(<span class="string">&#x27;boolean&#x27;</span>, &#123; <span class="attr">defaultValue</span>: <span class="literal">false</span> &#125;),  <span class="comment">//指定默认值是false</span></span><br><span class="line">    <span class="comment">//  使用函数返回值作为默认值</span></span><br><span class="line">    createAt: DS.attr(<span class="string">&#x27;string&#x27;</span>, &#123; defaultValue()&#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(); &#125; &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>正如代码注释所述的，设置默认值的方式包括直接指定或者是使用函数返回值指定。</p><h2 id="3，定义模型的关联关系"><a href="#3，定义模型的关联关系" class="headerlink" title="3，定义模型的关联关系"></a>3，定义模型的关联关系</h2><p><a href="http://emberjs.com/">Ember</a>的模型也是有类似于数据库的关联关系的。只是相对于复制的数据库<a href="http://emberjs.com/">Ember</a>的模型就显得简单很多，其中包括一对一，一对多，多对多关联关系。这种关系是与后台的数据库是相统一的。</p><h4 id="1，一对一"><a href="#1，一对一" class="headerlink" title="1，一对一"></a>1，一对一</h4><p>声明一对一关联使用<a href="http://emberjs.com/api/data/classes/DS.html#method_belongsTo">DS.belongsTo</a>设置。比如下面的两个模型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/user.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  profile: DS.belongsTo(‘profile’);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/profile.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> ‘ember-data’;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  user: DS.belongsTo(‘user’);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2，一对多"><a href="#2，一对多" class="headerlink" title="2，一对多"></a>2，一对多</h4><p>声明一对多关联使用<a href="http://emberjs.com/api/data/classes/DS.html#method_belongsTo">DS.belongsTo</a>（多的一方使用）和<a href="http://emberjs.com/api/data/classes/DS.html#method_hasMany">DS.hasMany</a>（少的一方使用）设置。比如下面的两个模型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/post.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> ‘ember-data’;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  comments: DS.hasMany(‘comment’);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个模型是一的一方。下面的模型是多的一方；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/comment.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> ‘ember-data’;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  post: DS.belongsTo(‘post’);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种设置的方式与Java 的hibernate非常相似。</p><h4 id="3，多对多"><a href="#3，多对多" class="headerlink" title="3，多对多"></a>3，多对多</h4><p>声明一对多关联使用<a href="http://emberjs.com/api/data/classes/DS.html#method_hasMany">DS.hasMany</a>设置。比如下面的两个模型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/post.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> ‘ember-data’;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  tags: DS.hasMany(‘tag’);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/model/tag.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> ‘ember-data’;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  post: DS.hasMany(‘post’);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>多对多的关系设置都是使用<a href="http://emberjs.com/api/data/classes/DS.html#method_hasMany">DS.hasMany</a>，但是并不需要“中间表”，这个与数据的多对多有点不同，如果是数据的多对多通常是通过中间表关联。</p><h2 id="4，显式反转"><a href="#4，显式反转" class="headerlink" title="4，显式反转"></a>4，显式反转</h2><p><a href="https://github.com/emberjs/data">Ember Data</a>会尽力去发现两个模型之间的关联关系，比如前面的一对多关系中，当<code>comment</code>发生变化的时候会自动更新到<code>post</code>，因为每一个<code>comment</code>只对应一个<code>post</code>，可以有<code>comment</code>确定到某个一个<code>post</code>。</p><p>然而，有时候同一个模型中会有多个与此关联模型。这时你可以在反向端用<a href="http://emberjs.com/api/data/classes/DS.html#method_hasMany">DS.hasMany</a>的<code>inverse</code>选项指定其关联的模型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/model/comment.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  onePost: DS.belongsTo(‘post’),</span><br><span class="line">  twoPost: DS.belongsTo(‘post’),</span><br><span class="line">  redPost: DS.belongsTo(‘post’),</span><br><span class="line">  bluePost: DS.belongsTo(‘post’)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在一个模型中同时与3个<code>post</code>关联了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/post.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> ‘ember-data’;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  comments: hasMany(‘comment’, &#123; <span class="attr">inverse</span>: ‘redPost’ &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当<code>comment</code>发生变化时自动更新到<code>redPost</code>这个模型。</p><h2 id="5，自反关系"><a href="#5，自反关系" class="headerlink" title="5，自反关系"></a>5，自反关系</h2><h4 id="1，一对多"><a href="#1，一对多" class="headerlink" title="1，一对多"></a>1，一对多</h4><p>当你想定义一个自反关系的模型时（模型本身的一对一关系），你必须要显式使用<code>inverse</code>指定关联的模型。如果没有逆向关系则把<code>inverse</code>值设置为<code>null</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/folder.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> ‘ember-data’;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  children: DS.hasMany(‘folder’, &#123; <span class="attr">reverse</span>: ‘parent’ &#125;);</span><br><span class="line">  parent: DS.hasMany(‘folder’, &#123; <span class="attr">reverse</span>: ‘children’ &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一个文件夹通常有父文件夹或者子文件夹。此时父文件夹和子文件夹与本身都是同一个类型的模型。此时你需要显式使用<code>inverse</code>属性指定，比如这段代码所示，“children⋯⋯”这行代码意思是这个模型有一个属性<code>children</code>，并且这个属性也是一个<code>folder</code>，模型本身作为父文件夹。同理“parent⋯⋯”这行代码的意思是这个模型有个属性<code>parent</code>，并且这个属性也是一个<code>folder</code>，模型本身是这个属性的子文件夹。比如下图结构：</p><p><img src="http://static.oschina.net/uploads/img/201510/18163815_YOLs.png" alt="结构图"></p><p>这个有点像数据结构中的链表。你可以把<code>children</code>和<code>parent</code>想象成是一个指针。</p><p>如果仅有关联关系没有逆向关系直接把<code>inverse</code>设置为<code>null</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/folder.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> ‘ember-data’;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  parent: DS.belongsTo(‘folder’, &#123; <span class="attr">inverse</span>: <span class="literal">null</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2，一对一"><a href="#2，一对一" class="headerlink" title="2，一对一"></a>2，一对一</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/user.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> ‘ember-data’;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  bestFriend: DS.belongsTo(‘folder’, &#123; <span class="attr">inverse</span>: ‘bestFriend’ &#125;);</span><br><span class="line">&#125;);v</span><br></pre></td></tr></table></figure><p>这个关系与数据库设置设计中双向一对一很类似。</p><h2 id="6，嵌套数据"><a href="#6，嵌套数据" class="headerlink" title="6，嵌套数据"></a>6，嵌套数据</h2><p>有些模型可能会包含深层嵌套的数据对象，如果也是使用上述的关联关系定义那么将是个噩梦！对于这种情况最好是把数据定义成简单对象，虽然增加点冗余数据但是降低了层次。另外一种是把嵌套的数据定义成模型的属性（也是增加冗余但是降低了嵌套层次）。<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新建、更新、删除记录</title>
      <link href="/2020/01/18/ember-teach/models/%E6%96%B0%E5%BB%BA%E3%80%81%E6%9B%B4%E6%96%B0%E3%80%81%E5%88%A0%E9%99%A4%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/01/18/ember-teach/models/%E6%96%B0%E5%BB%BA%E3%80%81%E6%9B%B4%E6%96%B0%E3%80%81%E5%88%A0%E9%99%A4%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>前一篇介绍了查询方法，本篇介绍新建、更新、删除记录的方法。<br>本篇的示例代码创建在上一篇的基础上。对于整合<a href="http://www.firebase.com/">firebase</a>、创建<code>route</code>和<code>template</code>请参看上一篇，增加一个controller：<code>ember g controller articles</code>。</p><h2 id="1，新建记录"><a href="#1，新建记录" class="headerlink" title="1，新建记录"></a>1，新建记录</h2><p>创建新的记录使用<code>createRecord()</code>方法。比如下面的代码新建了一个<code>aritcle</code>记录。修改模板，在模板上增加几个<code>input</code>输入框用于输入<code>article</code>信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/articles.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 col-xs-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--设置路由，路由的层级与router.js里定义的要一致 --&gt;</span></span><br><span class="line">                     &#123;&#123;#link-to &#x27;articles.article&#x27; item.id&#125;&#125;</span><br><span class="line">                        &#123;&#123;item.title&#125;&#125; -- <span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123;item.category&#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    &#123;&#123;/link-to&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;&#123;/each&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                title：&#123;&#123;input value=title&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                body： &#123;&#123;textarea value=body cols=&quot;80&quot; rows=&quot;3&quot;&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                category: &#123;&#123;input value=category&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> &#123;&#123; <span class="attr">action</span> &quot;<span class="attr">saveItem</span>&quot;&#125;&#125;&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;red&#x27;</span>&gt;</span>&#123;&#123;tipInfo&#125;&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-xs-8&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;outlet&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面的字段分别对应这模型<code>article</code>的属性。点击“保存”后提交到<code>controller</code>处理。下面是获取数据保存数据的<code>controller</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   app/controllers/articles.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line"></span><br><span class="line">    actions: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  表单提交，保存数据到Store。Store会自动更新到firebase</span></span><br><span class="line">        saveItem: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> title = <span class="built_in">this</span>.get(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;undefined&#x27;</span> === <span class="keyword">typeof</span>(title) || <span class="string">&#x27;&#x27;</span> === title.trim()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.set(<span class="string">&#x27;tipInfo&#x27;</span>, <span class="string">&quot;title不能为空&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> body = <span class="built_in">this</span>.get(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;undefined&#x27;</span> === <span class="keyword">typeof</span>(body) || <span class="string">&#x27;&#x27;</span> === body.trim()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.set(<span class="string">&#x27;tipInfo&#x27;</span>, <span class="string">&quot;body不能为空&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> category = <span class="built_in">this</span>.get(<span class="string">&#x27;category&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;undefined&#x27;</span> === <span class="keyword">typeof</span>(category) || <span class="string">&#x27;&#x27;</span> === category.trim()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.set(<span class="string">&#x27;tipInfo&#x27;</span>, <span class="string">&quot;category不能为空&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  创建数据记录</span></span><br><span class="line">            <span class="keyword">var</span> article = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;article&#x27;</span>, &#123;</span><br><span class="line">                title: title,</span><br><span class="line">                body: body,</span><br><span class="line">                category: category,</span><br><span class="line">                timestamp: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">            &#125;);</span><br><span class="line">            article.save();  <span class="comment">//保存数据的到Store</span></span><br><span class="line">            <span class="comment">//  清空页面的input输入框</span></span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;title&#x27;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;body&#x27;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;category&#x27;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>主要看<code>createRecord</code>方法，第一个参数是模型名称。第二个参数是个哈希，在哈希总设置模型属性值。最后调用<code>article.save()</code>方法把数据保存到<code>Store</code>，再由<code>Store</code>保存到firebase。运行效果如下图：</p><p><img src="http://static.oschina.net/uploads/img/201510/21020549_6yDj.png" alt="结果截图"></p><p>输入信息，点击“保存”后数据立刻会显示在列表”no form – java”之后。然后你可以点击标题查询详细信息，body的信息会在页面后侧显示。</p><p>通过这里实例我想你应该懂得去使用<code>createRecord()</code>方法了！但是如果有两个模型是有关联关系保存的方法又是怎么样的呢？下面再新增一个模型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember g model users</span><br></pre></td></tr></table></figure><p>然后在模型中增加关联。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   app/models/article.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">    title: DS.attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">    body: DS.attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">    timestamp: DS.attr(<span class="string">&#x27;number&#x27;</span>),</span><br><span class="line">    category: DS.attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">    author: DS.belongsTo(<span class="string">&#x27;user&#x27;</span>)  <span class="comment">//关联user</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  app/models/user.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">      username: DS.attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">      timestamp: DS.attr(<span class="string">&#x27;number&#x27;</span>),</span><br><span class="line">      articles: DS.hasMany(<span class="string">&#x27;article&#x27;</span>)  <span class="comment">//关联article</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改模板<code>articles.hbs</code>在界面上增加录入作者信息字段。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">⋯⋯省略其他代码</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    title：&#123;&#123;input value=title&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    body： &#123;&#123;textarea value=body cols=&quot;80&quot; rows=&quot;3&quot;&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    category: &#123;&#123;input value=category&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    author: &#123;&#123;input value=username&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> &#123;&#123; <span class="attr">action</span> &quot;<span class="attr">saveItem</span>&quot;&#125;&#125;&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;red&#x27;</span>&gt;</span>&#123;&#123;tipInfo&#125;&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">⋯⋯省略其他代码</span><br></pre></td></tr></table></figure><p>下面看看怎么在<code>controller</code>中设置这两个模型的关联关系。一共有两种方式设置，一种是直接在<code>createRecord()</code>方法中设置，另一种是在方法外设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   app/controllers/articles.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line"></span><br><span class="line">    actions: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  表单提交，保存数据到Store。Store会自动更新到firebase</span></span><br><span class="line">        saveItem: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//  获取信息和校验代码省略⋯⋯</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建user</span></span><br><span class="line">            <span class="keyword">var</span> user = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">                username: username,</span><br><span class="line">                timestamp: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//  必须要执行这句代码，否则user数据不能保存到Store，</span></span><br><span class="line">            <span class="comment">//  否则article通过user的id查找不到user</span></span><br><span class="line">            user.save();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  创建article</span></span><br><span class="line">            <span class="keyword">var</span> article = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;article&#x27;</span>, &#123;</span><br><span class="line">                title: title,</span><br><span class="line">                body: body,</span><br><span class="line">                category: category,</span><br><span class="line">                timestamp: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">                author: user   <span class="comment">//设置关联</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            article.save();  <span class="comment">//保存数据的到Store</span></span><br><span class="line">            <span class="comment">//  清空页面的input输入框</span></span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;title&#x27;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;body&#x27;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;category&#x27;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;username&#x27;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/img/201510/21020549_Trle.png" alt="界面截图"></p><p>输入上如所示信息，点击“保存”可以在firebase的后台看到如下的数据关联关系。</p><p><img src="http://static.oschina.net/uploads/img/201510/21020549_wrzD.png" alt="firebase数据截图"></p><p>注意点：与这两个数据的关联是通过数据的<code>id</code>维护的。<br>那么如果我要通过<code>article</code>获取<code>user</code>的信息要怎么获取呢？</p><p>直接以面向对象的方式获取既可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置路由，路由的层级与router.js里定义的要一致 --&gt;</span></span><br><span class="line">         &#123;&#123;#link-to &#x27;articles.article&#x27; item.id&#125;&#125;</span><br><span class="line">            &#123;&#123;item.title&#125;&#125; -- <span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123;item.category&#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span> -- <span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123;item.author.username&#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">        &#123;&#123;/link-to&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><p>注意看助手<code>&#123;&#123; item.author.username &#125;&#125;</code>。很像EL表达式吧！！<br>前面提到过有两个方式设置两个模型的关联关系。下面的代码是第二种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  其他代码省略⋯⋯</span></span><br><span class="line"><span class="comment">//  创建article</span></span><br><span class="line"><span class="keyword">var</span> article = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;article&#x27;</span>, &#123;</span><br><span class="line">    title: title,</span><br><span class="line">    body: body,</span><br><span class="line">    category: category,</span><br><span class="line">    timestamp: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">    <span class="comment">// ,</span></span><br><span class="line">    <span class="comment">// author: user   //设置关联</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种设置关联关系方法，在外部手动调用set方法设置</span></span><br><span class="line">article.set(<span class="string">&#x27;author&#x27;</span>, user);</span><br><span class="line"><span class="comment">//  其他代码省略⋯⋯</span></span><br></pre></td></tr></table></figure><p>运行，重新录入信息，得到的结果是一致的。甚至你可以直接在<code>createRecord</code>方法里调用方法来设置两个模型的关系。比如下面的代码段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> store = <span class="built_in">this</span>.store;  <span class="comment">// 由于作用域问题，在createRecord方法内部不能使用this.store</span></span><br><span class="line"><span class="keyword">var</span> article = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;article&#x27;</span>, &#123;</span><br><span class="line">    title: title,</span><br><span class="line">    <span class="comment">// ⋯⋯</span></span><br><span class="line">    <span class="comment">// ,</span></span><br><span class="line">    <span class="comment">// author: store.findRecord(&#x27;user&#x27;, 1)   //设置关联</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种设置关联关系方法，在外部手动调用set方法设置</span></span><br><span class="line">article.set(<span class="string">&#x27;author&#x27;</span>, store.findRecord(<span class="string">&#x27;user&#x27;</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>这种方式可以直接动态根据user的id属性值获取到记录，再设置关联关系。新增介绍完了，接着介绍记录的更新。</p><p>##2，更新记录</p><p>更新相对于新增来说非常相似。请看下面的代码段：<br>首先在模板上增加更新的设置代码，修改子模板<code>articles/article.hbs</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/articles/article.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;model.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;model.body&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">更新测试<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">title: &#123;&#123;input value=model.title&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">body：<span class="tag">&lt;<span class="name">br</span>&gt;</span> &#123;&#123;textarea value=model.body cols=&quot;80&quot; rows=&quot;3&quot;&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">updateArticleById</span>&#x27; <span class="attr">model.id</span>&#125;&#125;&gt;</span>更新文章信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>增加一个<code>controller</code>，用户处理子模板提交的修改信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember g controller articles&#x2F;article</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/controllers/articles/article.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="comment">// 根据文章id更新</span></span><br><span class="line">        updateArticleById: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> title = <span class="built_in">this</span>.get(<span class="string">&#x27;model.title&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> body = <span class="built_in">this</span>.get(<span class="string">&#x27;model.body&#x27;</span>);</span><br><span class="line">            <span class="built_in">this</span>.store.findRecord(<span class="string">&#x27;article&#x27;</span>, params).then(<span class="function"><span class="keyword">function</span>(<span class="params">art</span>) </span>&#123;</span><br><span class="line">                art.set(<span class="string">&#x27;title&#x27;</span>, title);</span><br><span class="line">                art.set(<span class="string">&#x27;body&#x27;</span>, body);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//  保存更新的值到Store</span></span><br><span class="line">                art.save();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在左侧选择需要更新的数据，然后在右侧输入框中修改需要更新的数据，在修改过程中可以看到被修改的信息会立即反应到界面上，这个是因为Ember自动更新Store中的数据（还记得很久前讲过的观察者（observer）吗？）。</p><p><img src="http://static.oschina.net/uploads/img/201510/21020549_Xggt.png" alt="结果截图"></p><p>如果你没有点击“更新文章信息”提交，你修改的信息不会更新到firebase。页面刷新后还是原来样子，如果你点击了“更新文章信息”数据将会把更新的信息提交到firebase。</p><p>由于<code>save</code>、<code>findRecord</code>方法返回值是一个<code>promises</code>对象，所以你还可以针对出错情况进行处理。比如下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">//  ⋯⋯</span></span><br><span class="line">&#125;);</span><br><span class="line">user.save().then(<span class="function"><span class="keyword">function</span>(<span class="params">fulfill</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  保存成功</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  保存失败</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.store.findRecord(<span class="string">&#x27;article&#x27;</span>, params).then(<span class="function"><span class="keyword">function</span>(<span class="params">art</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  ⋯⋯</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  出错处理代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>具体代码我就不演示了，请读者自己编写测试吧！！</p><p>##3，删除记录</p><p>既然有了新增那么通常就会有删除。记录的删除与修改非常类似，也是首先查询出要删除的数据，然后执行删除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   app/controllers/articles.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line"></span><br><span class="line">    actions: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  表单提交，保存数据到Store。Store会自动更新到firebase</span></span><br><span class="line">        saveItem: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 省略</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//  根据id属性值删除数据</span></span><br><span class="line">        delById : <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  任意获取一个作为判断表单输入值</span></span><br><span class="line">            <span class="keyword">if</span> (params &amp;&amp; confirm(<span class="string">&quot;你确定要删除这条数据吗？?&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//  执行删除</span></span><br><span class="line">                <span class="built_in">this</span>.store.findRecord(<span class="string">&#x27;article&#x27;</span>, params).then(<span class="function"><span class="keyword">function</span>(<span class="params">art</span>) </span>&#123;</span><br><span class="line">                    art.destroyRecord();</span><br><span class="line">                    alert(<span class="string">&#x27;删除成功！&#x27;</span>);</span><br><span class="line">                &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">                    alert(<span class="string">&#x27;删除失败！&#x27;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改显示数据的模板，增加删除按钮，并传递数据的<code>id</code>值到<code>controller</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/articles.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 col-xs-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--设置路由，路由的层级与router.js里定义的要一致 --&gt;</span></span><br><span class="line">                     &#123;&#123;#link-to &#x27;articles.article&#x27; item.id&#125;&#125;</span><br><span class="line">                        &#123;&#123;item.title&#125;&#125; -- <span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123;item.category&#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span> -- <span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123;item.author.username&#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    &#123;&#123;/link-to&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">delById</span>&#x27; <span class="attr">item.id</span>&#125;&#125;&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;&#123;/each&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        // ⋯⋯省略其他代码</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/img/201510/21020550_LCXS.png" alt="截图"></p><p>结果如上图，点击第二条数据删除按钮。弹出提示窗口，点击“确定”之后成功删除数据，并弹出“删除成功！”，到firebase后台查看数据，确实已经删除成功。<br>然而与此关联的user却没有删除，正常情况下也应该是不删除关联的user数据的。<br>最终结果只剩下一条数据：</p><p><img src="http://static.oschina.net/uploads/img/201510/21020550_zI51.png" alt="截图"></p><p>到此，有关新增、更新、删除的方法介绍完毕。已经给出了详细的演示实例，我相信，如果你也亲自在自己的项目中实践过，那么掌握这几个方法是很容易的！<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询记录</title>
      <link href="/2020/01/18/ember-teach/models/%E6%9F%A5%E8%AF%A2%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/01/18/ember-teach/models/%E6%9F%A5%E8%AF%A2%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>store提供了统一的获取数据的接口。包括创建新记录、修改记录、删除记录等，更多有关<a href="http://devdocs.io/ember/data/classes/ds.store">Store API</a>请点击网址看详细信息。</p><p>为了演示这些方法的使用我们结合firebase，关于firebase与Ember的整合前面的文章已经介绍，就不过多介绍了。<br>做好准备工作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember g route articles</span><br><span class="line">ember g route articles&#x2F;article</span><br></pre></td></tr></table></figure><h2 id="1，查询方法findAll，findRecord，peekAll，peekRecord"><a href="#1，查询方法findAll，findRecord，peekAll，peekRecord" class="headerlink" title="1，查询方法findAll，findRecord，peekAll，peekRecord"></a>1，查询方法findAll，findRecord，peekAll，peekRecord</h2><p>首先配置<code>route</code>，修改子路由增加一个动态段<code>article_id</code>，有关动态的介绍请看<a href="https://guides.emberjs.com/v2.5.0/routing/defining-your-routes/#toc_dynamic-segments">Dynamic Segments</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/router.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  其他代码略写，</span></span><br><span class="line"></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;store-example&#x27;</span>);</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;articles&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;article&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/:article_id&#x27;</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下面是路由代码，这段代码直接调用Store的find方法，返回所有数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/articles.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  返回firebase数据库中的所有article</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.store.findAll(<span class="string">&#x27;article&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为了界面看起来舒服点我引入了<a href="http://www.bootcss.com/">bootstrap</a>框架。引入的方式：<code>bower install bootstrap</code>安装插件。然后修改<code>ember-cli-build.js</code>，在<code>return</code>之前引入bootstrap：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.import(<span class="string">&quot;bower_components/bootstrap/dist/js/bootstrap.js&quot;</span>);</span><br><span class="line">app.import(<span class="string">&quot;bower_components/bootstrap/dist/css/bootstrap.css&quot;</span>);</span><br></pre></td></tr></table></figure><p>重启项目使其生效。</p><p>下面是显示数据的模板<code>articles.hbs</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/articles.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 col-xs-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--设置路由，路由的层级与router.js里定义的要一致，model的id属性作为参数 --&gt;</span></span><br><span class="line">                     &#123;&#123;#link-to &#x27;articles.article&#x27; item.id&#125;&#125;</span><br><span class="line">                        &#123;&#123;item.title&#125;&#125;</span><br><span class="line">                    &#123;&#123;/link-to&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;&#123;/each&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-xs-8&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;outlet&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器运行：<a href="http://localhost:4200/articles/">http://localhost:4200/articles/</a>。稍等就可以看到显示的数据了，等待时间与你的网速有关。毕竟<a href="http://www.firebase.com/">firebase</a>不是在国内的！！！如果程序代码没有写错那么你会看到如下图的结果：</p><p><img src="http://static.oschina.net/uploads/img/201510/20012029_00Si.png" alt="articles数据列表"></p><p>但是右侧是空白的，下面点击任何一条数据，可以看到右侧什么都不显示！<br>下面在子模板中增加显示数据的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/articles/article.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;model.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;model.body&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在点击左侧的数据，右侧可以显示对应的数据了！但是这个怎么就显示出来了呢？？其实<a href="http://emberjs.com/">Ember</a>自动根据动态段过滤了，当然你也可以显示使用<code>findRecord</code>方法过滤。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/articles/article.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;params = &#x27;</span> + params.article_id);</span><br><span class="line">        <span class="comment">// &#x27;chendequanroob@gmail.com&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.store.findRecord(<span class="string">&#x27;article&#x27;</span>, params.article_id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时得到的结果与不调用<code>findRecord</code>方法是一致的。为了验证是不是执行了这个方法，我们把动态段<code>params.article_id</code>的值改成一个不存在的值’ ubuntuvim’，可以确保的是在我的firebase数据中不存在<code>id</code>为这个值的数据。此时控制台会出现下面的错误信息，从错误信息可以看出来是因为记录不存在的原因。</p><p><img src="http://static.oschina.net/uploads/img/201510/20012029_G4Il.png" alt="数据不存在错误"></p><p>在上述的例子中，我们使用了<code>findAll()</code>方法和<code>findRecord()</code>方法，还有两个方法与这两个方法是类似的，分别是<code>peekRecord()</code>和<code>peekAll()</code>方法。这两个方法的不同之处是不会发送请求，他们只会在本地缓存中获取数据。</p><p>下面分别修改<code>articles.js</code>和<code>article.js</code>这两个路由。使用<code>peekRecord()</code>和<code>peekAll()</code>方法测试效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/articles.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//  返回firebase数据库中的所有article</span></span><br><span class="line">        <span class="comment">// return this.store.findAll(&#x27;article&#x27;);</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.store.peekAll(<span class="string">&#x27;article&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由于没有发送请求，我也没有把数据存储到本地，所以这个调用什么数据都没有。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/articles/article.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// return this.store.findRecord(&#x27;article&#x27;, params.article_id);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.store.peekRecord(<span class="string">&#x27;article&#x27;</span>, params.article_id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由于在父路由中调用<code>findAll</code>获取到数据并已经存储到<code>Store</code>中，所以可以用<code>peekRecord()</code>方法获取到数据。    但是在模型简介这篇文章介绍过<code>Store</code>的特性，当界面获取数据的时候首先会在<code>Store</code>中查询数据是否存在，如果不存在在再发送请求获取，所以感觉<code>peekRecord()</code>和<code>findRecord()</code>方法区别不是很大！</p><h2 id="2，查询多记录方法query"><a href="#2，查询多记录方法query" class="headerlink" title="2，查询多记录方法query()"></a>2，查询多记录方法query()</h2><p>项目中经常会遇到根据某个值查询出一组匹配的数据。此时返回的数据就不是只有一条了，那么Ember有是怎么去实现的呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/articles.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//  返回firebase数据库中的所有article</span></span><br><span class="line">        <span class="comment">// return this.store.findAll(&#x27;article&#x27;);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// return this.store.peekAll(&#x27;article&#x27;);</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//  使用query方法查询category为Java的数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.store.query(<span class="string">&#x27;article&#x27;</span>, &#123; <span class="attr">filter</span>: &#123; <span class="attr">category</span>: <span class="string">&#x27;java&#x27;</span> &#125; &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//  对匹配的数据做处理</span></span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>查询<code>category</code>为<code>Java</code>的数据。如果你只想精确查询到某一条数据可以使用<code>queryRecord()</code>方法。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.store.queryRecord(<span class="string">&#x27;article&#x27;</span>, &#123; <span class="attr">filter</span>: &#123; <span class="attr">id</span>: <span class="string">&#x27; -JzyT-VLEWdF6zY3CefO&#x27;</span> &#125; &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  对匹配的数据做处理</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>到此，常用的方法介绍完毕，希望通过介绍上述几个方法起到抛砖引玉的效果，有关于<a href="http://devdocs.io/ember/data/classes/ds.store">DS.Store</a>类的还有很多很多的方法，使用方式都是类似的，更多方法请自己看API文档学习。</p><p>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义序列化器</title>
      <link href="/2020/01/18/ember-teach/models/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/"/>
      <url>/2020/01/18/ember-teach/models/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>在<a href="http://emberjs.com/">Ember</a>应用中，序列化器会格式化与后台交互的数据，包括发送和接收的数据。默认情况下会使用<a href="http://jsonapi.org/">JSON API</a>序列化数据。如果你的后端使用不同的格式，Ember Data允许你自定义序列化器或者定义一个完全不同的序列化器。</p><p>Ember Data内置了三个序列化器。<a href="http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html">JSONAPISerializer</a>是默认的序列化器，用与处理后端的JSON API。<a href="http://emberjs.com/api/data/classes/DS.JSONSerializer.html">JSONSerializer</a>是一个简单的序列化器，用与处理单个JSON对象或者是处理记录数组。<a href="http://emberjs.com/api/data/classes/DS.RESTSerializer.html">RESTSerializer</a>是一个复杂的序列化器，支持侧面加载，在Ember Data2.0之前是默认的序列化器。</p><h2 id="JSONAPISerializer规范"><a href="#JSONAPISerializer规范" class="headerlink" title="JSONAPISerializer规范"></a>JSONAPISerializer规范</h2><p>当你向服务器请求数据时，JSONSerializer会把服务器返回的数据当做是符合下列规范的JSON数据。</p><p><strong>注意</strong>：特别是项目使用的是自定义适配器的时候，后台返回的数据格式必须符合<a href="http://www.jsonapi.org/">JSOP API</a>规范，否则无法实现数据的CRUD操作，Ember就无法解析数据，关于自定义适配器这点的知识请看上一篇<a href="http://blog.ddlisting.com/2016/04/17/zi-ding-yi-gua-pei-qi/">Ember.js 入门指南之四十四自定义适配器</a>，在文章中有详细的介绍自定义适配器和自定义序列化器是息息相关的。</p><h4 id="1，JSON-API文档"><a href="#1，JSON-API文档" class="headerlink" title="1，JSON API文档"></a>1，JSON API文档</h4><p>JSONSerializer期待后台返回的是一个符合JSON API规范和约定的JSON文档。比如下面的JSON数据，这些数据的格式是这样的：</p><ol><li>type指定model的名称</li><li>属性名称使用中划线分隔</li></ol><p>比如请求<code>/people/123</code>，响应的数据如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;people&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attributes&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;first-name&quot;</span>: <span class="string">&quot;Jeff&quot;</span>,</span><br><span class="line">      <span class="string">&quot;last-name&quot;</span>: <span class="string">&quot;Atwood&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果响应的数据有多条，那么<code>data</code>将是以数组形式返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;people&quot;</span>,</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">      <span class="string">&quot;attributes&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;first-name&quot;</span>: <span class="string">&quot;Jeff&quot;</span>,</span><br><span class="line">        <span class="string">&quot;last-name&quot;</span>: <span class="string">&quot;Atwood&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;people&quot;</span>,</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;124&quot;</span>,</span><br><span class="line">      <span class="string">&quot;attributes&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;first-name&quot;</span>: <span class="string">&quot;chen&quot;</span>,</span><br><span class="line">        <span class="string">&quot;last-name&quot;</span>: <span class="string">&quot;ubuntuvim&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2，拷贝数据"><a href="#2，拷贝数据" class="headerlink" title="2，拷贝数据"></a>2，拷贝数据</h4><p>数据有时候并不是请求的主体，如果数据有链接。链接的关系会放在<code>included</code>下面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;articles&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attributes&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;title&quot;</span>: <span class="string">&quot;JSON API paints my bikeshed!&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;links&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;self&quot;</span>: <span class="string">&quot;http://example.com/articles/1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;relationships&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;comments&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">          &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;comments&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;5&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;comments&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;12&quot;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="string">&quot;included&quot;</span>: [&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;comments&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attributes&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;body&quot;</span>: <span class="string">&quot;First!&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;links&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;self&quot;</span>: <span class="string">&quot;http://example.com/comments/5&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;comments&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;12&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attributes&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;body&quot;</span>: <span class="string">&quot;I like XML better&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;links&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;self&quot;</span>: <span class="string">&quot;http://example.com/comments/12&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从JSON数据看出，<code>id</code>为<code>5</code>的<code>comment</code>链接是<code>&quot;self&quot;: http://example.com/comments/5</code>。<code>id</code>为<code>12</code>的<code>comment</code>链接是<code>&quot;self&quot;: http://example.com/comments/12</code>。并且这些链接是单独放置<code>included</code>内。</p><h4 id="3，自定义序列化器"><a href="#3，自定义序列化器" class="headerlink" title="3，自定义序列化器"></a>3，自定义序列化器</h4><p>Ember Data默认的序列化器是JSONAPISerializer，但是你也可以自定义序列化器覆盖默认的序列化器。</p><p>要自定义序列化器首先要定义一个名为<code>application</code>序列化器作为入口。</p><p>直接使用命令生成：<code>ember g serializer application</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/serializers/application.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONSerializer.extend(&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>甚至你还可以针对某个模型定义序列化器。比如下面的代码为<code>post</code>定义了一个专门的序列化器，在前一篇自定义适配器中介绍过如何为一个模型自定义适配器，这个两个是相关的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/serializers/post.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> ‘ember-data’;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONSerializer.extend(&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你想改变发送到后端的JSON数据格式，你只需重写<code>serialize</code>回调，在回调中设置数据格式。</p><p>比如前端发送的数据格式是如下结构， </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;attributes&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;My Product&quot;</span>,</span><br><span class="line">      <span class="string">&quot;amount&quot;</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="string">&quot;currency&quot;</span>: <span class="string">&quot;SEK&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;product&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是服务器接受的数据结构是下面这种结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;attributes&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;My Product&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cost&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;amount&quot;</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">&quot;currency&quot;</span>: <span class="string">&quot;SEK&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;product&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时你可以重写<code>serialize</code>回调。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/serializers/application.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONSerializer.extend(&#123;</span><br><span class="line">  serialize: <span class="function"><span class="keyword">function</span>(<span class="params">snapshot, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> json = <span class="built_in">this</span>._super(...arguments);  <span class="comment">// ??</span></span><br><span class="line">    json.data.attributes.cost = &#123;</span><br><span class="line">      amount: json.data.attributes.amount,</span><br><span class="line">      currency: json.data.attributes.currency</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> json.data.attributes.amount;</span><br><span class="line">    <span class="keyword">delete</span> json.data.attributes.currency;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>那么如果是反过来呢。<br>如果后端返回的数据格式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;attributes&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;My Product&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cost&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;amount&quot;</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">&quot;currency&quot;</span>: <span class="string">&quot;SEK&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;product&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是前端需要的格式是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;attributes&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;My Product&quot;</span>,</span><br><span class="line">      <span class="string">&quot;amount&quot;</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="string">&quot;currency&quot;</span>: <span class="string">&quot;SEK&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;product&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时你可以重写回调方法<code>normalizeResponse</code>或<code>normalize</code>，在方法里设置数据格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/serializers/application.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONSerializer.extend(&#123;</span><br><span class="line"></span><br><span class="line">  normalizeResponse: <span class="function"><span class="keyword">function</span>(<span class="params">store, primaryModelClass, payload, id, requestType</span>) </span>&#123;</span><br><span class="line">    payload.data.attributes.amount = payload.data.attributes.cost.amount;</span><br><span class="line">    payload.data.attributes.currency = payload.data.attributes.cost.currency;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> payload.data.attributes.cost;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._super(...arguments);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>####4，数据ID属性</p><p>每一条数据都有一个唯一值作为<code>ID</code>，默认情况下Ember会为每个模型加上一个名为<code>id</code>的属性。如果你想改为其他名称，你可以在序列化器中指定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/serializers/application.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONSerializer.extend(&#123;</span><br><span class="line">  primatyKey: <span class="string">&#x27;__id&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>把数据主键名修改为<code>__id</code>。</p><h4 id="5，属性名"><a href="#5，属性名" class="headerlink" title="5，属性名"></a>5，属性名</h4><p>Ember Data约定的属性名是驼峰式的命名方式，但是序列化器却期望的是中划线分隔的命名方式，不过Ember会自动转换，不需要开发者手动指定。然而，如果你想修改这种默认的方式也是可以的，只需在序列化器中使用属性<code>keyForAttributes</code>指定你喜欢的分隔方式即可。比如下面的代码把序列号的属性名称改为以下划线分隔：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/serializers/application.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONSerializer.extend(&#123;</span><br><span class="line">  keyForAttributes: <span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Ember.String.underscore(attr);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="6，指定属性名的别名"><a href="#6，指定属性名的别名" class="headerlink" title="6，指定属性名的别名"></a>6，指定属性名的别名</h4><p>如果你想模型数据被序列化、反序列化时指定模型属性的别名，直接在序列化器中使用<code>attrs</code>属性指定即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/person.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  lastName: DS.attr(‘string’)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>指定序列化、反序列化属性别名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/serializers/application.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONSerializer.extend(&#123;</span><br><span class="line">  attrs: &#123;</span><br><span class="line">    lastName: ‘lastNameOfPerson’</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>指定模型属性别名为<code>lastNameOfPerson</code>。</p><h4 id="7，模型之间的关联关系"><a href="#7，模型之间的关联关系" class="headerlink" title="7，模型之间的关联关系"></a>7，模型之间的关联关系</h4><p>一个模型通过<code>ID</code>引用另一个模型。比如有两个模型存在一对多关系：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/post.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  comments: DS.hasMany(‘comment’, &#123; <span class="attr">async</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>序列化后JSON数据格式如下，其中关联关系通过一个存放<code>ID</code>属性值的数组实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;posts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;relationships&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;comments&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">          &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;comments&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;5&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;comments&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;12&quot;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，有两个<code>comment</code>关联到一个<code>post</code>上。<br>如果是<code>belongsTo</code>关系的，JSON结构与<code>hadMany</code>关系相差不大。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;comment&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;relationships&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;original-post&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;post&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;5&quot;</span> &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>id</code>为<code>1</code>的<code>comment</code>关联了<code>ID</code>为<code>5</code>的<code>post</code>。</p><h4 id="8，自定义转换规则"><a href="#8，自定义转换规则" class="headerlink" title="8，自定义转换规则"></a>8，自定义转换规则</h4><p>在某些情况下，Ember内置的属性类型（<code>string</code>、<code>number</code>、<code>boolean</code>、<code>date</code>）还是不够用的。比如，服务器返回的是非标准的数据格式时。</p><p>Ember Data可以注册新的JSON转换器去格式化数据，可用直接使用命令创建：<code>ember g transform coordinate-point</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/transforms/coordinate-point.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Transform.extend(&#123;</span><br><span class="line">  deserialize: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [v.get(<span class="string">&#x27;x&#x27;</span>), v.get(<span class="string">&#x27;y&#x27;</span>)];</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  serialize: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Ember.create(&#123; <span class="attr">x</span>: v[<span class="number">0</span>], <span class="attr">y</span>: v[<span class="number">1</span>]&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>定义一个复合属性类型，这个类型由两个属性构成，形成一个坐标。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/models/curor.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  position: DS.attr(‘coordinate-point’)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>自定义的属性类型使用方式与普通类型一致，直接作为<code>attr</code>方法的参数。最后当我们接受到服务返回的数据形如下面的代码所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  cursor: &#123;</span><br><span class="line">    position: [<span class="number">4</span>, <span class="number">9</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载模型实例时仍然作为一个普通对象加载。仍然可以使用<code>.</code>操作获取属性值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cursor = <span class="built_in">this</span>.store.findRecord(‘cursor’, <span class="number">1</span>);</span><br><span class="line">cursor.get(‘position.x’);  <span class="comment">//  =&gt; 4</span></span><br><span class="line">cursor.get(‘position.y’);  <span class="comment">//  =&gt; 9</span></span><br></pre></td></tr></table></figure><h4 id="9，JSONSerializer"><a href="#9，JSONSerializer" class="headerlink" title="9，JSONSerializer"></a>9，JSONSerializer</h4><p>并不是所有的API都遵循JSONAPISerializer约定通过数据命名空间和拷贝关系记录。比如系统遗留问题，原先的API返回的只是简单的JSON格式并不是JSONAPISerializer约定的格式，此时你可以自定义序列化器去适配旧接口。并且可以同时兼容使用RESTAdapter去序列号这些简单的JSON数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/serializer/application.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONSerializer.extend(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="10，EMBEDDEDRECORDMIXIN"><a href="#10，EMBEDDEDRECORDMIXIN" class="headerlink" title="10，EMBEDDEDRECORDMIXIN"></a>10，EMBEDDEDRECORDMIXIN</h4><p>尽管Ember Data鼓励你拷贝模型关联关系，但有时候在处理遗留API时，你会发现你需要处理的JSON中嵌入了其他模型的关联关系。不过<code>EmbeddedRecordsMixin</code>可以帮你解决这个问题。</p><p>比如<code>post</code>中包含了一个<code>author</code>记录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Rails is omakase&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tag&quot;</span>: <span class="string">&quot;rails&quot;</span>,</span><br><span class="line">    <span class="string">&quot;authors&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Steve&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以定义里的模型关联关系如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/serializers/post.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONSerialier.extend(DS.EmbeddedRecordsMixin, &#123;</span><br><span class="line">  attrs: &#123;</span><br><span class="line">author: &#123;</span><br><span class="line">  serialize: ‘records’,</span><br><span class="line">  deserialize: ‘records’</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你发生对象本身需要序列化与反序列化嵌入的关系，你可以使用属性<code>embedded</code>设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/serializers/post.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONSerialier.extend(DS.EmbeddedRecordsMixin, &#123;</span><br><span class="line">  attrs: &#123;</span><br><span class="line">author: &#123; <span class="attr">embedded</span>: ‘always’ &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>序列化与反序列化设置有3个关键字：</p><ol><li><code>records</code>  用于标记全部的记录都是序列化与反序列化的</li><li><code>ids</code>  用于标记仅仅序列化与反序列化记录的id</li><li><code>false</code>  用于标记记录不需要序列化与反序列化</li></ol><p>例如，你可能会发现你想读一个嵌入式记录提取时一个JSON有效载荷只包括关系的身份在序列化记录。这可能是使用<code>serialize: ids</code>。你也可以选择通过设置序列化的关系 <code>serialize: false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONSerializer.extend(DS.EmbeddedRecordsMixin, &#123;</span><br><span class="line">  attrs: &#123;</span><br><span class="line">    author: &#123;</span><br><span class="line">      serialize: <span class="literal">false</span>,</span><br><span class="line">      deserialize: <span class="string">&#x27;records&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    comments: &#123;</span><br><span class="line">      deserialize: <span class="string">&#x27;records&#x27;</span>,</span><br><span class="line">      serialize: <span class="string">&#x27;ids&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="11，EMBEDDEDRECORDSMIXIN-默认设置"><a href="#11，EMBEDDEDRECORDSMIXIN-默认设置" class="headerlink" title="11，EMBEDDEDRECORDSMIXIN 默认设置"></a>11，EMBEDDEDRECORDSMIXIN 默认设置</h4><p>如果你没有重写<code>attrs</code>去指定模型的关联关系，那么<code>EmbeddedRecordsMixin</code>会有如下的默认行为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">belongsTo：&#123;serialize: ‘id’, deserialize: ‘id’ &#125;</span><br><span class="line">hasMany: &#123; serialize: false, deserialize: ‘ids’ &#125;</span><br></pre></td></tr></table></figure><h4 id="12，创作序列化器"><a href="#12，创作序列化器" class="headerlink" title="12，创作序列化器"></a>12，创作序列化器</h4><p>如果项目需要自定义序列化器，Ember推荐扩展JSONAIPSerializer或者JSONSerializer来实现你的需求。但是，如果你想完全创建一个全新的与JSONAIPSerializer、JSONSerializer都不一样的序列化器你可以扩展<code>DS.Serializer</code>类，但是你必须要实现下面三个方法：</p><ol><li>normalizeResponse</li><li>serialize</li><li>normalize</li></ol><p>知道规范化JSON数据对Ember Data来说是非常重要的，如果模型属性名不符合Ember Data规范这些属性值将不会自动更新。如果返回的数据没有在模型中指定那么这些数据将会被忽略。比如下面的模型定义，<code>this.store.push()</code>方法接受的格式为第二段代码所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   app/models/post.js</span></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  title: DS.attr(‘string’),</span><br><span class="line">  tag: DS.attr(‘string’),</span><br><span class="line">  comments: hasMany(‘comment’, &#123; <span class="attr">async</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  relatedPosts: hasMany(‘post’)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    id: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    type: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    attributes: &#123;</span><br><span class="line">      title: <span class="string">&quot;Rails is omakase&quot;</span>,</span><br><span class="line">      tag: <span class="string">&quot;rails&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    relationships: &#123;</span><br><span class="line">      comments: &#123;</span><br><span class="line">        data: [&#123; <span class="attr">id</span>: <span class="string">&quot;1&quot;</span>, <span class="attr">type</span>: <span class="string">&#x27;comment&#x27;</span> &#125;,</span><br><span class="line">               &#123; <span class="attr">id</span>: <span class="string">&quot;2&quot;</span>, <span class="attr">type</span>: <span class="string">&#x27;comment&#x27;</span> &#125;],</span><br><span class="line">      &#125;,</span><br><span class="line">      relatedPosts: &#123;</span><br><span class="line">        data: &#123;</span><br><span class="line">          related: <span class="string">&quot;/api/v1/posts/1/related-posts/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个序列化记录必须按照这个格式要正确地转换成Ember Data记录。<br><br><br>本篇的内容难度很大，属于高级主题的内容！如果暂时理解不来不要紧，你可以先使用<a href="http://www.firebase.com/">firebase</a>构建项目，等你熟悉了整个Ember流程以及数据是如何交互之后再回过头看这篇和上一篇<a href="http://blog.ddlisting.com/2016/04/17/zi-ding-yi-gua-pei-qi/">Ember.js 入门指南之四十四自定义适配器</a>，这样就不至于难以理解了！！<br><br><br>到本篇为止，有关Ember的基础知识全部介绍完毕！！！从2015-08-26开始到现在刚好2个月，原计划是用3个月时间完成的，提前了一个月，归其原因是后面的内容难度大，理解偏差大！文章质量也不好，感觉时间比较仓促，说以节省了很多时间！（_本篇是重新整理发表的，原始版博文发布的时候Ember还是2.0版本，现在已经是2.5了！！_）<br><br><br>介绍来打算介绍APPLICATION CONCERNS和TESTING这两章！也有可能把旧版的Ember todomvc案例改成Ember2.0版本的，正好可以拿来练练手速！！！<br><br><br>很庆幸的是目标：把旧版的Ember todomvc案例改成Ember2.0版本的，也完成了！！！并且扩展了很多功能，有关代码情况<a href="https://github.com/ubuntuvim/todos_v2">todos v2</a>，欢迎读者fork学习！如果觉得有用就给我一个<code>star</code>吧！！谢谢！！！</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义适配器</title>
      <link href="/2020/01/18/ember-teach/models/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%82%E9%85%8D%E5%99%A8/"/>
      <url>/2020/01/18/ember-teach/models/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%82%E9%85%8D%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>在<a href="http://emberjs.com/">Ember</a>应用中适配器决定了数据保存到后台的方式，比如URL格式和请求头部。Ember Data默认的适配器是内置的<a href="http://jsonapi.org/">REST API回调</a>。</p><p>实际使用中经常会扩展默认的适配器。Ember的立场是应该通过扩展适配器来添加不同的功能，而非添加标识。这样可以使得代码更加容易测试、更加容易理解，同时也降低了可能需要扩展的适配器的代码。</p><p>如果你的后端使用的是Ember约定的规则那么可用使用适配器<code>adapters/application.js</code>。适配器<code>application</code>优先级比默认的适配器高，但是比指定的模型适配器优先级低。模型适配器定义规则是：<code>adapter-modelName.js</code>。比如下面的代码定义了一个模型适配器<code>adapter-post</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/adapters/adapter-post.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONAPIAdapter.extend(&#123;</span><br><span class="line">  namespace: <span class="string">&#x27;api/v1&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时适配器的优先级次序为：<code>JSONAPIAdapter</code> &gt; <code>application </code>&gt; 默认内置适配器；</p><p>Ember内置的是配有如下几种：</p><ol><li><a href="http://emberjs.com/api/data/classes/DS.Adapter.html">DS.Adapter</a> 这个适配器是最基础的适配器，它不包含任何功能。如果需要创建一个与Ember适配器有根本性区别的适配器可以使从这个适配器入手。</li><li><a href="http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html">DS.JSONAPIAdapter</a> 这个适配器是默认适配器，并且是遵循JSON API规范，用于与HTTP服务器之间通过XHR交互JSON数据。</li><li><a href="http://emberjs.com/api/data/classes/DS.RESTAdapter.html">DS.RESTAdapter</a> 这个适配器与第二个适配器功能一样，并且在Ember Data2.0之前是作为默认的适配器。</li></ol><h2 id="1，自定义JSONAPIAdapter适配器"><a href="#1，自定义JSONAPIAdapter适配器" class="headerlink" title="1，自定义JSONAPIAdapter适配器"></a>1，自定义JSONAPIAdapter适配器</h2><p><code>JSONAPIAdapter</code>适配器通常用于扩展非标准的后台接口。</p><h4 id="1，URL规范"><a href="#1，URL规范" class="headerlink" title="1，URL规范"></a>1，URL规范</h4><p><code>JSONAPIAdapter</code>适配器非常智能，它能够自动确定URL链接是那个模型。比如，如果你需要通过<code>id</code>获取<code>post</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.store.find(<span class="string">&#x27;post&#x27;</span>, <span class="number">1</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  处理post</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>JSONAPIAdapter</code>会自动发送<code>get</code>请求到<code>/post/1</code>。</p><p>下表是Action、请求、URL三者的映射关系（由于本站markdown解析器不支持表格所以直接使用截图替代了）。</p><table><thead><tr><th>Action</th><th>HTTP</th><th>URL</th></tr></thead><tbody><tr><td>find</td><td>get</td><td>/posts/1</td></tr><tr><td>find all</td><td>get</td><td>/posts</td></tr><tr><td>update</td><td>patch</td><td>/posts/1</td></tr><tr><td>create</td><td>post</td><td>/posts</td></tr><tr><td>delete</td><td>delete</td><td>/posts/1</td></tr></tbody></table><p>比如在<code>action</code>中执行<code>find()</code>方法，会发送<code>get</code>请求，<code>JSONAPIAdapter</code>会自动解析成形如<code>/posts/1</code>的URL。</p><h4 id="2，多元化定制"><a href="#2，多元化定制" class="headerlink" title="2，多元化定制"></a>2，多元化定制</h4><p>为了适配复数名字的模型属性名称，可以是使用<a href="https://github.com/stefanpenner/ember-inflector">Ember Inflector</a>绑定别名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> inflector = Ember.Inflector.inflector;</span><br><span class="line">inflector.irregular(<span class="string">&#x27;formula&#x27;</span>, <span class="string">&#x27;formulae&#x27;</span>);</span><br><span class="line">inflector.uncountable(<span class="string">&#x27;advice&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这样绑定之后目的是告诉<code>JSONAPIAdapter</code>。你可以使用<code>/formulae/1</code>代替<code>/formulas/1</code>。但是目前我还没搞清楚这个设置是什么意思？又有什么用？如果读者知道请指教。</p><h4 id="3，断点路径定制"><a href="#3，断点路径定制" class="headerlink" title="3，断点路径定制"></a>3，断点路径定制</h4><p>使用属性<code>namespace</code>可以设置URL的前缀。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app/adapters/application.js</span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONAPIAdapter.extend(&#123;</span><br><span class="line">  namespace: <span class="string">&#x27;api/1&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>请求<code>person</code>会自动转发到<code>/api/1/people/1</code>。</p><h4 id="4，自定义主机"><a href="#4，自定义主机" class="headerlink" title="4，自定义主机"></a>4，自定义主机</h4><p>默认情况下适配器会转到当前域名下。如果你想让URL转到新的域名可以使用属性host设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app/adapters/application.js</span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONAPIAdapter.extend(&#123;</span><br><span class="line">  host: <span class="string">&#x27;http://api.example.com&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果你的项目是使用自己的后台数据库这个设置特别重要！！！属性<code>host</code>所指的就是你服务器接口的地址。</p><p>请求<code>person</code>会自动转发到<code>http://api.example.com/people/1</code>。</p><h4 id="5，自定义路径"><a href="#5，自定义路径" class="headerlink" title="5，自定义路径"></a>5，自定义路径</h4><p>默认情况下Ember会尝试去根据复数的模型类名、中划线分隔的模型类名生成URL。如果需要改变这个默认的规则可以使用属性<code>pathForType</code>设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/adapters/application.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> ‘ember’;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONAPIAdapter.extend(&#123;</span><br><span class="line">  pathForType: <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Ember.String.underscore(type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改默认生成路径规则为下滑线分隔。比如请求<code>person</code>会转向<code>/person/1</code>。请求<code>user-profile</code>会转向<code>/user_profile/1</code>（默认情况转向<code>user-profile/1</code>）。</p><h4 id="6，自定义请求头"><a href="#6，自定义请求头" class="headerlink" title="6，自定义请求头"></a>6，自定义请求头</h4><p>有些请求需要设置请求头信息，比如提供<code>API</code>的<code>key</code>。可以以键值对的方式设置头部信息，Ember Data会为每个请求都加上这个头信息设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app/adapters/application.js</span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONAPIAdapter.extend(&#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line"><span class="string">&#x27;API_KEY&#x27;</span>: <span class="string">&#x27;secret key&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ANOTHER_HEADER&#x27;</span>: <span class="string">&#x27;some header value&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更强大地方是你可以在<code>header</code>中使用计算属性，动态设置请求头信息。下面的代码是将一个<code>session</code>对象设置到适配器中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app/adapters/application.js</span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> ‘ember’;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONAPIAdapter.extend(&#123;</span><br><span class="line">  session: Ember.inject.service(‘session’);</span><br><span class="line">  headers: Ember.computed(‘session.authToken’, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">‘API_KEY’: <span class="built_in">this</span>.get(‘session.authToken’),</span><br><span class="line">‘ANOTHER_HEADER’: ‘some header value’  </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对于<code>session</code>应该非常不陌生，特别是在控制用户登录方面使用非常广泛，另外又一个非常好用的插件，专门用于控制用户登录的，这个插件是<a href="https://github.com/simplabs/ember-simple-auth">Ember Simple Auth</a>，另外有一篇博文是介绍如何使用这个插件实现用户登录的，请看<a href="http://blog.ddlisting.com/2015/11/20/ember-application-authority-control/">使用ember-simple-auth实现Ember.js应用的权限控制</a>的介绍。</p><p>你还可以使用<code>volatile()</code>方法设置计算属性为非缓存属性，这样每次发送请求都会重新计算<code>header</code>里的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/adapters/application.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> ‘ember’;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONAPIAdapter.extend(&#123;</span><br><span class="line">  <span class="comment">//  ⋯⋯</span></span><br><span class="line">  &#125;).volatile();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更多有关于适配器的信息浏览下面的网址：</p><ul><li><a href="http://emberobserver.com/categories/data">Ember Observer</a></li><li><a href="https://github.com/search?q=ember+data+adapter&ref=cmdform">GitHub</a></li><li><a href="http://bower.io/search/?q=ember-data-">Bower</a></li></ul><p>对于适配器主要掌握<code>JSONAPIAdapter</code>足矣，如果你需要个性化定制URL或者请求的域名可以在适配中配置。不过大部分情况下都是使用默认设置。</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置记录到Store</title>
      <link href="/2020/01/18/ember-teach/models/%E8%AE%BE%E7%BD%AE%E8%AE%B0%E5%BD%95%E5%88%B0Store/"/>
      <url>/2020/01/18/ember-teach/models/%E8%AE%BE%E7%BD%AE%E8%AE%B0%E5%BD%95%E5%88%B0Store/</url>
      
        <content type="html"><![CDATA[<p><a href="http://emberjs.com/">Ember</a>的<a href="http://emberjs.com/api/data/classes/DS.Store.html">Store</a>就像一个缓存池，用户提交的数据以及从服务器获取的数据会首先保存到Store。如果用户再次请求相同的数据会直接从Store中获取，而不是发送HTTP请求去服务器获取。</p><p>当数据发生变化，数据首先更新到Store中，Store会理解更新到其他页面。所以当你改变Store中的数据时，会立即反应出来，比如上一篇更新记录小结，当你修改<code>article</code>的数据时会立即反应到页面上。</p><h2 id="1，push-方法"><a href="#1，push-方法" class="headerlink" title="1，push()方法"></a>1，push()方法</h2><p>你可以调用<code>push()</code>方法一次性把多条数据保存到Store中。比如下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/application.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.store.push(&#123;</span><br><span class="line">            data: [</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="number">1</span>,</span><br><span class="line">                    type: <span class="string">&#x27;album&#x27;</span>,</span><br><span class="line">                    attributes: &#123;   <span class="comment">//  设置model属性值</span></span><br><span class="line">                        title: <span class="string">&#x27;Fewer Moving Parts&#x27;</span>,</span><br><span class="line">                        artist: <span class="string">&#x27;David Bazan&#x27;</span></span><br><span class="line">                        songCount: <span class="number">10</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    relationships: &#123;&#125;  <span class="comment">//  设置两个model的关联关系</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="number">2</span>,</span><br><span class="line">                    type: <span class="string">&#x27;album&#x27;</span>,</span><br><span class="line">                    attributes: &#123;   <span class="comment">//  设置model属性值</span></span><br><span class="line">                        title: <span class="string">&#x27;Calgary b/w I Can\&#x27;t Make You Love Me/Nick Of Time&#x27;</span>,</span><br><span class="line">                        artist: <span class="string">&#x27;Bon Iver&#x27;</span>,</span><br><span class="line">                        songCount: <span class="number">2</span></span><br><span class="line">                    &#125;,    </span><br><span class="line">                    relationships: &#123;&#125;  <span class="comment">//  设置两个model的关联关系</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<code>type</code>属性值必须是模型的属性名字。<code>attributes</code>哈希里的属性值与模型里的属性对应。</p><p>本篇不是很重要，就简单提一提，如有兴趣请看<a href="https://guides.emberjs.com/v2.5.0/models/pushing-records-into-the-store/">Pushing Records Into The Store</a>的详细介绍。</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loading、error子状态</title>
      <link href="/2020/01/18/ember-teach/routing/loading%E3%80%81error%E5%AD%90%E7%8A%B6%E6%80%81/"/>
      <url>/2020/01/18/ember-teach/routing/loading%E3%80%81error%E5%AD%90%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>在前面的<a href="http://blog.ddlisting.com/2016/03/25/ember-js-ru-men-zhi-nan-zhi-er-shi-lu-you-ding-yi/">Ember.js 入门指南之二十路由定义</a>提过<code>loading</code>、<code>error</code>子路由，它们是<a href="http://emberjs.com/">Ember</a>默认创建的，并在<code>beforeModel</code>、<code>model</code>、<code>afterModel</code>这三个回调执行完毕之前会先渲染当前路由的<code>loading</code>和<code>error</code>模板。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.route(<span class="string">&#x27;post&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/:post_id&#x27;</span>&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对于上述的路由设置<a href="http://emberjs.com/">Ember</a>会生成如下的路由列表：</p><p><img src="http://static.oschina.net/uploads/space/2015/0928/010633_x4BH_565401.png" alt="路由映射图"></p><p>每个路由都会自动生成一个<code>loading</code>、<code>error</code>路由，下面我将一一演示这两个路由的作用。<br>图片前面<code>loading</code>、<code>error</code>路由对应的<code>application</code>路由。<code>posts_loading</code>和<code>posts_error</code>对应的是<code>posts</code>路由。</p><h3 id="1，loading子状态"><a href="#1，loading子状态" class="headerlink" title="1，loading子状态"></a>1，loading子状态</h3><p><a href="http://emberjs.com/">Ember</a>建议数据放在<code>beforeModel</code>、<code>model</code>、<code>afterModel</code>回调中获取并传递到模板显示。但是只要是加载数据就需要时间，对于<a href="http://emberjs.com/">Ember</a>应用来说，在<code>model</code>等回调中加载完数据才会渲染模板，如果加载数据比较慢那么用户看到的页面就是一个空白的页面，用户体验很差！</p><p><a href="http://emberjs.com/">Ember</a>提供的解决办法是：在<code>beforeModel</code>、<code>model</code>、<code>afterModel</code>回调还没返回前先进入一个叫<code>loading</code>的子状态，然后渲染一个叫<code>routeName-loading</code>的模板（如果是<code>application</code>路由则对应的直接是<code>loading</code>、<code>error</code>不需要前缀）。</p><p>为了演示这效果在<code>app/templates</code>下创建一个<code>posts-loading</code>模板。如果程序正常，在渲染模板<code>posts</code>之前会先渲染这个模板。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/posts-loading.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;assets/images/loading/loading.gif&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改路由<code>posts.js</code>，让<code>model</code>回调执行时间更长一些。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//  模拟一个延时操作，</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>;i++) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Ember.$.getJSON(<span class="string">&#x27;https://api.github.com/repos/emberjs/ember.js/pulls&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行<a href="http://localhost:4200/posts">http://localhost:4200/posts</a>，首先会看到执行的<code>loading</code>模板的内容，然后才看到真正要显示的数据。有一个加载过程，如下面2幅图片所示。</p><p><img src="/content/images/2016/03/65.png" alt="图1"></p><p><img src="/content/images/2016/03/67.png" alt="图2"></p><h3 id="2，loading事件"><a href="#2，loading事件" class="headerlink" title="2，loading事件"></a>2，loading事件</h3><p>在<code>beforeModel</code>、<code>model</code>、<code>afterModel</code>回调没有立即返回之前，会先执行一个名为loading的事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//  模拟一个延时操作，</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>;i++) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Ember.$.getJSON(<span class="string">&#x27;https://api.github.com/repos/emberjs/ember.js/pulls&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        loading: <span class="function"><span class="keyword">function</span>(<span class="params">transition, originRoute</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;Sorry this is taking so long to load!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>页面刷新后会弹出一个提示框，先不点击“确定”。打开浏览器的“开发者 -&gt; 开发者工具”，切换到Network标签下。找到“pulls”这个请求，点击它。</p><p><img src="http://static.oschina.net/uploads/space/2015/0928/012646_7ovz_565401.png" alt="result"></p><p>从图中可以看到此时<code>model</code>回调并没有返回。此时响应的内容是空的，说明<code>loading</code>事件实在<code>model</code>回调返回之前执行了。</p><p>然后点击弹出框的“确定”，此时可以看到Response有数据了。说明<code>model</code>回调已经执行完毕。<br>注意：如果当前的路由没有显示定义<code>loading</code>事件，这个时间会冒泡到父路由，如果父路由也没有显示定义<code>loading</code>事件，那么会继续向上冒泡，一直到最顶端的路由<code>application</code>。</p><h3 id="3，error子状态"><a href="#3，error子状态" class="headerlink" title="3，error子状态"></a>3，error子状态</h3><p>与<code>loading</code>子状态类似，<code>error</code>子状态会在<code>beforeModel</code>、<code>model</code>、<code>afterModel</code>回调执行过程中出现错误的时候触发。</p><p>命名方式与<code>loading</code>子状态也是类似的。现在定义一个名为<code>posts-error.hbs</code>的模板。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/posts-error.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span></span><br><span class="line">posts回调解析出错。。。。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<code>model</code>回调中手动添加一个错误代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//  模拟一个延时操作，</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>;i++) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="built_in">parseInt</span>(value);</span><br><span class="line">        <span class="keyword">return</span> Ember.$.getJSON(<span class="string">&#x27;https://api.github.com/repos/emberjs/ember.js/pulls&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意<code>var e = parseInt(value);</code>这句代码，由于<code>value</code>没有定义所以应该会报错。那么此时页面会显示什么呢？？</p><p><img src="/http://static.oschina.net/uploads/space/2015/0928/012833_n2HG_565401.png" alt="result"></p><p>如果你的演示程序没有其他问题那么你也会得到上图的结果。但是如果没有定义这个模板，那么界面上将是什么都不显示。</p><p>如果你想在<code>xxx-error.hbs</code>模板上看到是什么错误信息，你可以在模板上打印<code>model</code>的值。如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/posts-error.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span></span><br><span class="line">posts回调解析出错。。。。</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123;model&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时页面会显示出你的代码是什么错误。</p><p><img src="/content/images/2016/03/71.png" alt="result"></p><p>不过相比于浏览器控制台打印的错误信息简单很多！！！</p><h3 id="4，error事件"><a href="#4，error事件" class="headerlink" title="4，error事件"></a>4，error事件</h3><p><code>error</code>事件与第一点讲的loading事件也是相似的。使用方式与<code>loading</code>一样。个人觉得这个事件非常有用，我们可以在这个事件中根据<code>error</code>状态码的不同执行不同的逻辑，比如跳转到不同的路由上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Ember.$.getJSON(<span class="string">&#x27;https://api.github.com/repos/emberjs/ember.js/pulls____&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    actions: &#123;</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">error, transition</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;error = &#x27;</span> + error.status);</span><br><span class="line">            <span class="comment">//  打印error对象里的所有属性和方法名</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> error)&#123;         </span><br><span class="line">               <span class="built_in">console</span>.log(name); </span><br><span class="line">               <span class="comment">// console.log(&#x27;属性值或者方法体==》&#x27; + error[name]);</span></span><br><span class="line">            &#125;    </span><br><span class="line">            alert(names); </span><br><span class="line">            <span class="keyword">if</span> (error &amp;&amp; error.status === <span class="number">400</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.transitionTo(<span class="string">&quot;about&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.status === <span class="number">404</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.transitionTo(<span class="string">&quot;form&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;else......&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意<code>getJSON</code>方法里的URL，我在URL后面随机加了一些字符，目的是让这个URL不存在。此时请求应该会找不到这个地址<code>error</code>的响应码应该是404。然后直接跳转到<code>form</code>这个路由上。<br>运行<a href="http://localhost:4200/posts">http://localhost:4200/posts</a>之后，浏览器控制台打印信息如下：</p><p><img src="http://static.oschina.net/uploads/space/2015/0928/012833_n2HG_565401.png" alt="result"></p><p>页面也会跳转到<code>form</code>。</p><p><img src="/content/images/2016/03/73.png" alt="result"></p><p>到此路由加载数据过程中涉及的两个状态<code>loading</code>和<code>error</code>的内容全部介绍完，这两个状态在优化用户体验方面是非常有用的，希望想学习<a href="http://emberjs.com/">Ember</a>的同学好好掌握！！！=^=</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指定与路由关联的模型</title>
      <link href="/2020/01/18/ember-teach/routing/%E6%8C%87%E5%AE%9A%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%85%B3%E8%81%94%E7%9A%84%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/01/18/ember-teach/routing/%E6%8C%87%E5%AE%9A%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%85%B3%E8%81%94%E7%9A%84%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>路由其中一个很重要的职责就是加载适合的<code>model</code>，初始化数据，然后在模板上显示数据。</p><h3 id="1，普通model关联"><a href="#1，普通model关联" class="headerlink" title="1，普通model关联"></a>1，普通model关联</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/router.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  ⋯⋯</span></span><br><span class="line"></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;posts&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><p>对于<code>posts</code>这个路由如果要加载名为<code>post</code>的<code>model</code>要怎么做呢？代码实现很简单，其实在前面的代码也已经写过了。你只需要重写<code>model</code>回调，在回调中返回获取到的<code>model</code>即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// return Ember.$.getJSON(&#x27;https://api.github.com/repos/emberjs/ember.js/pulls&#x27;);</span></span><br><span class="line">        <span class="comment">// 加载post（是一个model）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.store.query(<span class="string">&#x27;post&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>model</code>回调可以返回一个<a href="http://emberjs.com/api/data/">Ember Data</a>记录，或者返回任何的<a href="http://liubin.org/promises-book/">promise</a>对象（<a href="http://emberjs.com/api/data/">Ember Data</a>也是<code>promise</code>对象），又或者是返回一个简单的javascript对象、数组都可以。但是需要等待数据加载完成才会渲染模板，所以如果你是使用<code>Ember.$.getJSON(&#39;https://api.github.com/repos/emberjs/ember.js/pulls&#39;);</code>获取远程数据页面上会有一段时间是空白的，其实就是在加载数据，不过这样的用户体验并不好，不过你也不需要担心这个问题，Ember已经提供了解决办法。还记得上一篇的截图的路由表吗？是不是每个路由都有一个<code>xxx_loading</code>路由，这个路由就是在数据加载的时候执行的，有关<code>xxx_loading</code>更多详细的信息在后面的博文介绍。</p><h3 id="2，动态model"><a href="#2，动态model" class="headerlink" title="2，动态model"></a>2，动态model</h3><p>一个<code>route</code>有时候只加载同一个<code>model</code>，比如路由<code>/photos</code>就通常是加载模型<code>photo</code>。如果用户离开或者是重新进入这个路由模型也不会改变。<br>然而，有些情况下路由所加载的<code>model</code>是变化的。比如在一个图片展示的APP中，路由<code>/photos</code>会加载一个<code>photo</code>模型集合并渲染到模板<code>photos</code>上。当用户点击其中一幅图片的时候路由只加载被点击的<code>model</code>数据，当用户点击另外一张图片的时候加载的又是另外一个<code>model</code>并且渲染到模板上，而且这两次加载的<code>model</code>数据是不一样的。</p><p>在这种情形下，访问的URL就包含了很重要的信息，包括路由和模型。</p><p>在Ember应用中可以通过定义动态段实现加载不同的模型。有关动态段的知识在前面的<a href="http://blog.ddlisting.com/2016/03/22/ember-js-ru-men-zhi-nan-zhi-shi-san-link-to/">Ember.js 入门指南之十三{{link-to}} 助手</a>和<a href="http://blog.ddlisting.com/2016/03/25/ember-js-ru-men-zhi-nan-zhi-er-shi-lu-you-ding-yi/">Ember.js 入门指南之二十路由定义</a>已经做过介绍。</p><p>一旦在路由中定义了动态段Ember就会从URL中提取动态段的值作为<code>model</code>回调的第一个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/router.js</span></span><br><span class="line"><span class="comment">// ⋯⋯</span></span><br><span class="line"></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.route(<span class="string">&#x27;post&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/:post_id&#x27;</span>&#125;);</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><p>这段代码定义了一个动态段<code>:post_id</code>，记得动态段是以<code>:</code>”开头。然后在<code>model</code>回调中使用动态段获取数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.store.findRecord(<span class="string">&#x27;post&#x27;</span>, params.post_id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到在<code>model</code>回调中也是使用在路由中定义的动态段，并把这个动态段作为参数传递给Ember的方法<code>findRecord</code>，Ember会把URL对应位置上的数据解析到这个动态段上。</p><p><strong>注意</strong>：在<code>model</code>中的动态段只在通过URL访问的时候才会被解析。如果你是通过其他方式（比如使用<code>link-to</code>进入路由）转入路由的，那么路由中<code>model</code>回调方法里的动态不会被解析，所请求的数据会直接从上下文中获取（你可以把上下文想象成ember的缓存）。下面的代码将为你演示这个说法：</p><h4 id="1，首先创建一个model：ember-g-model-post"><a href="#1，首先创建一个model：ember-g-model-post" class="headerlink" title="1，首先创建一个model：ember g model post"></a>1，首先创建一个model：ember g model post</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">    title: DS.attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">    body: DS.attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">    timestamp: DS.attr(<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>定义了3个属性，<code>id</code>属性不需要显示定义，ember会默认加上。</p><h4 id="2，在posts下增加一个子路由"><a href="#2，在posts下增加一个子路由" class="headerlink" title="2，在posts下增加一个子路由"></a>2，在posts下增加一个子路由</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.route(<span class="string">&#x27;post&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/:post_id&#x27;</span>&#125;);</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后用<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令（<code>ember g route posts/post</code>）在创建路由<code>post</code>，同时也会自动创建出子模板<code>post.hbs</code>。创建完成之后会得到如下两个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.app&#x2F;routes&#x2F;posts&#x2F;post.js</span><br><span class="line">2.app&#x2F;templates&#x2F;posts&#x2F;post.hbs</span><br></pre></td></tr></table></figure><p>修改路由<code>posts.js</code>，在<code>model</code>回调中返回设定的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>:<span class="string">&quot;-JzySrmbivaSSFG6WwOk&quot;</span>,</span><br><span class="line">                <span class="string">&quot;body&quot;</span> : <span class="string">&quot;testsssss&quot;</span>,</span><br><span class="line">                <span class="string">&quot;timestamp&quot;</span> : <span class="number">1443083287846</span>,</span><br><span class="line">                <span class="string">&quot;title&quot;</span> : <span class="string">&quot;test&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>:<span class="string">&quot;-JzyT-VLEWdF6zY3CefO&quot;</span>,</span><br><span class="line">                <span class="string">&quot;body&quot;</span> : <span class="string">&quot;33333333&quot;</span>,</span><br><span class="line">                <span class="string">&quot;timestamp&quot;</span> : <span class="number">1443083323541</span>,</span><br><span class="line">                <span class="string">&quot;title&quot;</span> : <span class="string">&quot;test33333&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>:<span class="string">&quot;-JzyUqbJcT0ct14OizMo&quot;</span> ,</span><br><span class="line">                <span class="string">&quot;body&quot;</span> : <span class="string">&quot;body.....&quot;</span>,</span><br><span class="line">                <span class="string">&quot;timestamp&quot;</span> : <span class="number">1443083808036</span>,</span><br><span class="line">                <span class="string">&quot;title&quot;</span> : <span class="string">&quot;title1231232132&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改<code>posts.hbs</code>，遍历显示所有的数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;&#123;#link-to &#x27;posts.post&#x27; item&#125;&#125;&#123;&#123;item.title&#125;&#125;&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;&#123;outlet&#125;&#125;</span><br></pre></td></tr></table></figure><p>修改子路由<code>post.js</code>，使得子路由根据动态段返回匹配的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/routes/posts/post.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;params = &#x27;</span> + params.post_id);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.store.findRecord(<span class="string">&#x27;post&#x27;</span>, params.post_id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意打印信息语句<code>console.log()</code>;，然后接着修改子模板<code>post.hbs</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/posts/post.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;model.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;model.body&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>到此，全部所需的测试数据和代码已经编写完毕。下面执行<a href="http://localhost:4200/posts">http://localhost:4200/posts</a>，可以看到界面上显示了所有在路由posts的model回调中设置的测试数据。查看页面的HTML代码：</p><p><img src="/content/images/2016/03/60.png" alt="html"></p><p>可以看到每个连接的动态段都被解析成了数据的id属性值。<br>注意：随便点击任意一个，注意看浏览器控制台打印的信息。<br>我点击了以第一个连接，浏览器的URL变为</p><p><img src="/content/images/2016/03/61.png" alt="html"></p><p>看浏览器的控制台是不是并没有打印出<code>params = -JzySrmbivaSSFG6WwOk</code>，在点击其他的连接结果也是一样的，浏览器控制台没有打印出任何信息。</p><p>下面我我们直接在浏览器地址栏上输入：<a href="http://localhost:4200/posts/-JzyUqbJcT0ct14OizMo">http://localhost:4200/posts/-JzyUqbJcT0ct14OizMo</a>然后按enter执行，注意看浏览器控制台打印的信息！！！此时打印了<code>params = -JzyUqbJcT0ct14OizMo</code>，你可以用同样的方式执行另外两个链接的地址。同样也会打印出<code>params = xxx</code>（<code>xxx</code>为数据的<code>id</code>值）。</p><p>我想这个例子应该能很好的解释了Ember提示用户需要的注意的问题。<br>只有直接用过浏览器访问才会执行包含了动态段的<code>model</code>回调，否则不会执行包含有动态段的回调；如果没有包含动态段的<code>model</code>回调不管是通过URL访问还是通过<code>link-to</code>访问都会执行。你可以在路由<code>posts</code>的<code>model</code>回调中添加一句打印日志的代码，然后通过点击首页上的<code>about</code>和<code>posts</code>切换路由，你可以看到控制台打印出了你在<code>model</code>回调中添加的日志信息。</p><h3 id="3，多模型"><a href="#3，多模型" class="headerlink" title="3，多模型"></a>3，多模型</h3><p>对于在一个<code>mode</code>l回调中同时返回多个模型的情况也是时常存在的。对于这种情况你需要在<code>model</code>回调中修改返回值为<code>Ember.RSVP.hash</code>对象类型。比如下面的代码就是同时返回了两个模型的数据：一个是<code>song</code>，一个是<code>album</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/favorites.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Ember.REVP.hash(&#123;</span><br><span class="line">            songs: <span class="built_in">this</span>.store.find(<span class="string">&#x27;song&#x27;</span>),</span><br><span class="line">            albums: <span class="built_in">this</span>.store.find(<span class="string">&#x27;slbum&#x27;</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在模板<code>favorites.hbs</code>中就可以使用<code>{{#each}}</code>把两个数据集遍历出来。遍历的方式与普通的遍历方式一样。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/favorites.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Song list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;&#123;#each model.songs as |item|&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Album list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;&#123;#each model.albums as |item|&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>到此所有路由的<code>model</code>回调的情况介绍完毕，<code>model</code>回调其实就是把模型绑定到路由上。实现数据的初始化，然后把数据渲染到模板上显示。这也是Ember推荐这么做的——就是把操作数据相关的处理放在<code>route</code>而不是放在<code>controller</code>。<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步路由</title>
      <link href="/2020/01/18/ember-teach/routing/%E5%BC%82%E6%AD%A5%E8%B7%AF%E7%94%B1/"/>
      <url>/2020/01/18/ember-teach/routing/%E5%BC%82%E6%AD%A5%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<p>本文将为你介绍路由的高级特性，这些高级特性可以用于处理项目复杂的异步逻辑。</p><blockquote><p>关于单词promises，直译是承诺，但是个人觉得还是使用原文吧。读起来顺畅点。</p></blockquote><h3 id="1，promises（承诺）"><a href="#1，promises（承诺）" class="headerlink" title="1，promises（承诺）"></a>1，promises（承诺）</h3><p><a href="http://emberjs.com/">Ember</a>的路由处理异步逻辑的方式是使用<a href="http://liubin.org/promises-book/">Promise</a>。简而言之，<a href="http://liubin.org/promises-book/">Promise</a>就是一个表示最终结果的对象。这个对象可能是<code>fulfill</code>（成功获取最终结果）也可能是<code>reject</code>（获取结果失败）。为了获取这个最终值，或者是处理<a href="http://liubin.org/promises-book/">Promise</a>失败的情况都可以使用<code>then</code>方法，这个方法接受两个可选的回调方法，一个是<a href="http://liubin.org/promises-book/">Promise</a>获取结果成功时执行，一个是<a href="http://liubin.org/promises-book/">Promise</a>获取结果失败时执行。如果promises获取结果成功那么获取到的结果将作为成功时执行的回调方法的参数。相反的，如果<a href="http://liubin.org/promises-book/">Promise</a>获取结果失败，那么最终结果（失败的原因）将作为<a href="http://liubin.org/promises-book/">Promise</a>失败时执行的回调方法的参数。比如下面的代码段，当<a href="http://liubin.org/promises-book/">Promise</a>获取结果成功时执行<code>fulfill</code>回调，否则执行<code>reject</code>回调方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/promises.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    beforeModel: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;execute model()&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> promise = <span class="built_in">this</span>.fetchTheAnswer();</span><br><span class="line">        promise.then(<span class="built_in">this</span>.fulfill, <span class="built_in">this</span>.reject);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  promises获取结果成功时执行</span></span><br><span class="line">    fulfill: <span class="function"><span class="keyword">function</span>(<span class="params">answer</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;The answer is &quot;</span> + answer);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  promises获取结果失败时执行</span></span><br><span class="line">    reject: <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Couldn&#x27;t get the answer! Reason: &quot;</span> + reason);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    fetchTheAnswer: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">fulfill, reject</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> fulfill(<span class="string">&#x27;success&#x27;</span>);  <span class="comment">//如果返回的是fulfill则表示promises执行成功</span></span><br><span class="line">            <span class="comment">//return reject(&#x27;failure&#x27;);  //如果返回的是reject则表示promises执行失败</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述这段代码就是promises的一个简单例子，promises的<code>then</code>方法会根据promises的获取到的最终结果执行不同的回调，如果promises获取结果成功则执行<code>fulfill</code>回调，否则执行<code>reject</code>回调。</p><p>promises的强大之处不仅仅如此，promises还可以以链的形式执行多个<code>then</code>方法，每个then方法都会根据promises的结果执行<code>fulfill</code>或者<code>reject</code>回调。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/promises.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    beforeModel() &#123;</span><br><span class="line">        <span class="comment">// 注意Jquery的Ajax方法返回的也是promises</span></span><br><span class="line">        <span class="keyword">var</span> promiese = Ember.$.getJSON(<span class="string">&#x27;https://api.github.com/repos/emberjs/ember.js/pulls&#x27;</span>);</span><br><span class="line">        promiese.then(<span class="built_in">this</span>.fetchPhotoOfUsers)</span><br><span class="line">                .then(<span class="built_in">this</span>.applyInstagramFilters)</span><br><span class="line">                .then(<span class="built_in">this</span>.uploadThrendyPhotAlbum)</span><br><span class="line">                .then(<span class="built_in">this</span>.displaySuccessMessage, <span class="built_in">this</span>.handleErrors);</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    fetchPhotoOfUsers: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;fetchPhotoOfUsers&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    applyInstagramFilters: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;applyInstagramFilters&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    uploadThrendyPhotAlbum: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;uploadThrendyPhotAlbum&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    displaySuccessMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;displaySuccessMessage&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleErrors: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;handleErrors&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种情况下会打印什么结果呢？？</p><p>在前的文章已经使用过<code>Ember.$.getJSON(&#39;https://api.github.com/repos/emberjs/ember.js/pulls&#39;);</code>获取数据，是可以成功获取数据的。所以promises获取结果成功，应该执行的是获取成功对应的回调方法。浏览器控制台打印结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetchPhotoOfUsers</span><br><span class="line">applyInstagramFilters</span><br><span class="line">uploadThrendyPhotAlbum</span><br><span class="line">displaySuccessMessage</span><br></pre></td></tr></table></figure><p>但是如果我把<code>Ember.$.getJSON(&#39;https://api.github.com/repos/emberjs/ember.js/pulls&#39;);</code>改成一个不存在的URL，比如改成<code>Ember.$.getJSON(&#39;https://www.my-example.com&#39;);</code>执行代码之后控制台会提示出<code>404</code>错误，并且打印’handleErrors’。说明promises获取结果失败，执行了then里的reject回调。为了验证每个回调的<code>reject</code>方法再修改修改代码，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/promises.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    beforeModel() &#123;</span><br><span class="line">        <span class="comment">// 注意Jquery的Ajax方法返回的也是promises</span></span><br><span class="line">        <span class="keyword">var</span> promiese = Ember.$.getJSON(<span class="string">&#x27; https://www.my-example.com &#x27;</span>);</span><br><span class="line">        promiese.then(<span class="built_in">this</span>.fetchPhotoOfUsers, <span class="built_in">this</span>.fetchPhotoOfUsersError)</span><br><span class="line">                .then(<span class="built_in">this</span>.applyInstagramFilters, <span class="built_in">this</span>.applyInstagramFiltersError)</span><br><span class="line">                .then(<span class="built_in">this</span>.uploadThrendyPhotAlbum, <span class="built_in">this</span>.uploadThrendyPhotAlbumError)</span><br><span class="line">                .then(<span class="built_in">this</span>.displaySuccessMessage, <span class="built_in">this</span>.handleErrors);</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    fetchPhotoOfUsers: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;fetchPhotoOfUsers&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    fetchPhotoOfUsersError: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;fetchPhotoOfUsersError&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    applyInstagramFilters: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;applyInstagramFilters&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    applyInstagramFiltersError: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;applyInstagramFiltersError&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    uploadThrendyPhotAlbum: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;uploadThrendyPhotAlbum&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    uploadThrendyPhotAlbumError: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;uploadThrendyPhotAlbumError&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    displaySuccessMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;displaySuccessMessage&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleErrors: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;handleErrors&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/content/images/2016/03/77.png" alt="result"></p><p>由于promises获取结果失败故执行其对应的失败处理回调。这种调用方式有点类似于<code>try⋯⋯catch⋯⋯</code>，但是本文的重点不是讲解promises，更多有关promises的教材请读者自行Google或者百度吧，在这里介绍一个js库<a href="https://github.com/tildeio/rsvp.js">RSVP.js</a>，它可以让你更加简单的组织你的promises代码。<br>在附上几个promises的参考网站：</p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li><li><a href="http://liubin.github.io/promises-book/">http://liubin.github.io/promises-book/</a></li><li><a href="http://www.zhangxinxu.com/wordpress/2014/02/es6-javascript-promise-%E6%84%9F%E6%80%A7%E8%AE%A4%E7%9F%A5/">http://www.zhangxinxu.com/wordpress/2014/02/es6-javascript-promise-%E6%84%9F%E6%80%A7%E8%AE%A4%E7%9F%A5/</a></li></ol><p>极力推荐看第二个网站的教材，这个网站可以直接运行js代码。还有源码和PDF。非常棒！！！</p><p>###2，promises中止路由</p><p>当发生路由切换的时候，在<code>model</code>回调（或者是<code>beforeMode</code>、<code>afterModel</code>）中获取的数据集会在切换完成的时候传递到路由对应的<code>controller</code>上。如果model回调返回的是一个普通的对象（非promises对象）或者是数组，路由的切换会立即执行，但是如果model回调返回的是一个promises对象，路由的切换将会被中止直到promises执行完成（返回<code>fulfill</code>或者是<code>reject</code>）才切换。</p><p><strong>路由器任务任何一个包含了then方法的对象都是一个promises。</strong></p><p>如果promises获取结果成功则会从被中止的地方继续往下执行或者是执行路由链的下一个路由，如果promises返回的依然是一个promises，那么路由依然再次被中止，等待promises的返回结果，如果是<code>fulfill</code>则从被中止的地方开始往下执行，以此类推，一直到获取到<code>model</code>回调所需的结果。</p><p>传递到每个路由的<code>setupController</code>回调的值都是promises返回<code>fulfill</code>时的值。如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/tardy.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Ember.RSVP.Promise(<span class="function"><span class="keyword">function</span>(<span class="params">resolver</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;start......&#x27;</span>);</span><br><span class="line">            Ember.run.later(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                resolver(&#123; <span class="attr">msg</span>: <span class="string">&#x27;Hold your horses!!&#x27;</span>&#125;);</span><br><span class="line">            &#125;, <span class="number">3000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    setupController(controller, model) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;msg = &#x27;</span> + model.msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一进入路由<code>tardy</code>，<code>model</code>回调就会被执行并且返回一个延迟3秒才执行的promises，在这期间路由会中止。当promises返回<code>fulfill</code>路由会继续执行，并将<code>model</code>返回的对象传递到<code>setupController</code>方法中。</p><p>虽然这种中止的行为会影响响应速度但是这是非常必要的，特别是你需要保证<code>model</code>回调得到的数据是完整的数据的时候。</p><h3 id="3，promises获取结果失败"><a href="#3，promises获取结果失败" class="headerlink" title="3，promises获取结果失败"></a>3，promises获取结果失败</h3><p>文章前面主要讲的是promises获取结果成功的情况，但是如果是获取结果失败的情况又是怎么处理呢？？</p><p>默认情况下，如果<code>model</code>回调返回的是一个promises对象并且此promises返回的是<code>reject</code>，此时路由切换将被终止，也不会渲染对应的模板，并且会在浏览器控制台打印出错误日志信息，例子<code>promises-ret-reject.js</code>会演示。</p><p>你可以自定义处理出错信息的逻辑，只要在<code>route</code>的<code>actions</code>哈希对象中配置即可。当promises获取结果失败的默认情况下会执行一个名为<code>error</code>的处理事件，否则会执行你自定义的处理事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/promises-ret-reject.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//  为了测试效果直接返回reject</span></span><br><span class="line">        <span class="keyword">return</span> Ember.RSVP.reject(<span class="string">&#x27;FAIL&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;reason = &#x27;</span> + reason);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  如果你想让这个事件冒泡到顶级路由application只需要返回true</span></span><br><span class="line">            <span class="comment">//  return true;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果没有不允许事件冒泡打印结果仅仅是<code>reason = FAIL</code>。并且页面上什么都不显示（不渲染模板）。</p><p>如果去掉最后一行代码的注释，让事件冒泡到顶级路由<code>application</code>中的默认方法处理，那么结果又是什么呢？</p><p><img src="/content/images/2016/03/78.png" alt="result"></p><p>结果是先打印了处理结果，然后再打印出提示错误的日志信息。并且页面上什么都不显示（不渲染模板）。</p><h3 id="4，恢复promises的reject状态"><a href="#4，恢复promises的reject状态" class="headerlink" title="4，恢复promises的reject状态"></a>4，恢复promises的reject状态</h3><p>在前面第3点介绍了promises获取结果失败时会终止路由转换，但是如果<code>model</code>返回是一个promises链呢？程序能到就这样死了！！！显然是不行的，做法是把model回调中返回的<code>reject</code>转换为<code>fulfill</code>。这样就可以继续执行或者切换到下一个路由了！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/funky.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> promises = Ember.RSVP.reject(<span class="string">&#x27;FAIL&#x27;</span>);</span><br><span class="line">        <span class="comment">//  由于已经知道promises返回的是reject，所以fulfill回调直接写为null</span></span><br><span class="line">        <span class="keyword">return</span> promises.then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">&#x27;恢复reject状态：其实就是在reject回调中继续执行fulfill状态下的代码。&#x27;</span> &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为了验证<code>model</code>回调的结果，直接在模板上显示<code>msg</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/funky.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line">funky模板</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123;model.msg&#125;&#125;</span><br></pre></td></tr></table></figure><p>执行URL：<a href="http://localhost:4200/funky">http://localhost:4200/funky</a>，得到如下结果：</p><p><img src="/content/images/2016/03/79.png" alt="result"></p><p><em>说明model回调进入到reject回调中，并正确返回了预期结果。</em></p><p>到本文为止有关路由这以整章的内容也全部介绍完毕了！！难点在<a href="http://blog.ddlisting.com/2016/03/29/ember-js-ru-men-zhi-nan-zhi-er-shi-liu-cha-xun-can-shu/">Ember.js 入门指南之二十六查询参数</a>这一篇。能力有限没有把这篇的内容讲明白，暂时搁下待日后完善！</p><p>总的来说路由主要职责是获取数据，根据逻辑处理数据。有点MVC架构的dao层，专门做数据的CRUD操作。当然另外一个重要职责就是路由的切换，以及切换的时候参数的设置问题。</p><p>结束完这一章下一章接着介绍组件（Component）。</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询参数</title>
      <link href="/2020/01/18/ember-teach/routing/%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0/"/>
      <url>/2020/01/18/ember-teach/routing/%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>查询参数是在URL的问号（？）右边部分，通常是键值对形式出现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;example.com&#x2F;articles?sort&#x3D;ASC&amp;page&#x3D;2</span><br></pre></td></tr></table></figure><p>比如这个URL的查询参数有两个，一个是<code>sort</code>，一个是<code>page</code>，它们的值分别是<code>ASC</code>和<code>2</code>。</p><h3 id="1，指定查询参数"><a href="#1，指定查询参数" class="headerlink" title="1，指定查询参数"></a>1，指定查询参数</h3><p>查询参数通常是声明为<code>controller</code>类中。比如在当前活动路由<code>articles</code>下，你需要根据文章的类型<code>category</code>过滤，此时你必须要在<code>controller</code>内声明过滤参数<code>category</code>。</p><p>使用<a href="http://ember-cli.com/user/guide">Ember CLI</a>新建一个<code>controller</code>、<code>route</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember g controller article；</span><br><span class="line">ember g route articles;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/controllers/articles.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    queryParams: [<span class="string">&#x27;category&#x27;</span>],</span><br><span class="line">    category: <span class="literal">null</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>绑定一个查询参数到URL，并且参数的值为<code>null</code>。当你进入路由<code>articles</code>时，如果参数<code>category</code>的值发生变化会自动更新到<code>controller</code>中的<code>category</code>；反之亦然。你可以设置一个默认值，比如把<code>category</code>设置为<code>Java</code>。可以在模板上获取这个值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/articles.hbs  --&gt;</span></span><br><span class="line">&#123;&#123;outlet&#125;&#125;</span><br><span class="line">category = &#123;&#123;category&#125;&#125;</span><br></pre></td></tr></table></figure><p>执行<a href="http://localhost:4200/articles">http://localhost:4200/articles</a>，页面会显示出   <code>category = Java</code>。如果执行<a href="http://localhost:4200/articles?category=PHP">http://localhost:4200/articles?category=PHP</a>，那么页面会显示<code>category = PHP</code>。</p><p>下面代码演示了怎么使用查询参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/controllers/articles.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    queryParams: [<span class="string">&#x27;category&#x27;</span>],</span><br><span class="line">    category: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  定义一个返回数组的计算属性，可以直接在模板上遍历</span></span><br><span class="line">    filteredArticles: Ember.computed(<span class="string">&#x27;category&#x27;</span>, <span class="string">&#x27;model&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> category = <span class="built_in">this</span>.get(<span class="string">&#x27;category&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> articles = <span class="built_in">this</span>.get(<span class="string">&#x27;model&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (category) &#123;</span><br><span class="line">            <span class="keyword">return</span> articles.filterBy(<span class="string">&#x27;category&#x27;</span>, category);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> articles;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建一个计算属性，这个计算属性是一个数组类型。由于是计算属性，并且这个计算属性关联了另外两个属性<code>category</code>和<code>model</code>，只要这两个属性其中之一发生改变都会导致<code>filteredArticles</code>发生改变，所以返回的数组元素也会跟着改变。</p><p>在<code>route</code>初始化测试数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/article.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    model(params) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;Bower: dependencies and resolutions new&#x27;</span>, <span class="attr">body</span>: <span class="string">&quot;In the bower.json file, I see 2 keys dependencies and resolutionsWhy is that so? I understand Bower has a flat dependency structure. So has it got anything to do with that ?&quot;</span>, <span class="attr">category</span>: <span class="string">&#x27;java&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&#x27;Highly Nested JSON Payload - hasMany error&#x27;</span>, <span class="attr">body</span>: <span class="string">&quot;Welcome to the Ember.js discussion forum. We&#x27;re running on the open source, Ember.js-powered Discourse forum software. They are also providing the hosting for us. Thanks guys! Please use this space for discussion abo⋯ read more&quot;</span>, <span class="attr">category</span>: <span class="string">&#x27;php&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">&#x27;Passing a jwt to my REST adapter new &#x27;</span>, <span class="attr">body</span>: <span class="string">&quot;This sets up a binding between the category query param in the URL, and the category property on controller:articles. In other words, once the articles route has been entered, any changes to the category query param in the URL will update the category property on controller:articles, and vice versa.&quot;</span>, <span class="attr">category</span>: <span class="string">&#x27;java&#x27;</span> &#125;</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下面看看怎么在模板显示数据，并且根据<code>category</code>显示不同数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/articles.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 col-xs-4&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 输入的值会动态更新到controller  --&gt;</span></span><br><span class="line">    输入分类：&#123;&#123;input value=category placeholder =&#x27;查询的分类&#x27;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 关键点：这里使用的是filteredArticles而不是从route获取的model --&gt;</span></span><br><span class="line">    &#123;&#123;#each filteredArticles as |item|&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;&#123;#link-to &#x27;articles.article&#x27; item&#125;&#125; &#123;&#123;item.title&#125;&#125;--&#123;&#123;item.category&#125;&#125; &#123;&#123;/link-to&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span>   </span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-xs-8&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;outlet&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>精彩的时刻到了！！先执行<a href="http://localhost:4200/articles">http://localhost:4200/articles</a>，此时显示的是所有类型的数据。如下图：</p><p><img src="/content/images/2016/03/75.png" alt="result"></p><p>接着你就可以做点好玩的事了，直接在输入框输入分类名。由于计算属性的特性会自动更新数组<code>filteredArticles</code>。所以我们可以看到随着你输入字符的变化显示的数据也在变化！这个例子也说明了<a href="http://emberjs.com/">Ember</a>计算属性自动更新变化的强大！！用着确实爽啊！！<br>官网教程没有说怎么在模板中使用，讲得也不是很明白，就给了一句</p><blockquote><p>Now we just need to define a computed property of our category-filtered array that the articles template will render:”<br>也有可能是我看不懂，反正摸索好一阵子才知道要这么用！！</p></blockquote><h3 id="2，使用link-to指定查询参数"><a href="#2，使用link-to指定查询参数" class="headerlink" title="2，使用link-to指定查询参数"></a>2，使用link-to指定查询参数</h3><p><code>link-to</code>助手使用<code>query-params</code>子表达式直接指定查询参数，需要注意的是这个表达式需要放在括号内使用，切记别少了这个括号。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  app/templates/articles.hbs  --&gt;</span></span><br><span class="line">⋯⋯</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;#link-to &#x27;articles&#x27; (query-params category=&#x27;java&#x27;)&#125;&#125; java &#123;&#123;/link-to&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123;#link-to &#x27;articles&#x27; (query-params category=&#x27;php&#x27;)&#125;&#125; php &#123;&#123;/link-to&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123;#link-to &#x27;articles&#x27; (query-params category=&#x27;&#x27;)&#125;&#125; all &#123;&#123;/link-to&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">⋯⋯</span><br></pre></td></tr></table></figure><p>在显示数据的ul标签后面新增上述两个<code>link-to</code>助手。它们的作用分别是指定分类类型为java、php、全部。但用户点击三个连接直接显示与连接指定类型匹配的数据（并且查询的输入框也变为链接指定的类型值）。比如我点击了第一个链接，输入显示如下图：</p><p><img src="/content/images/2016/03/76.png" alt="result"></p><h3 id="3，路由转换"><a href="#3，路由转换" class="headerlink" title="3，路由转换"></a>3，路由转换</h3><p><code>route</code>对象的<code>transitionTo</code>方法和<code>controller</code>对象的<code>transitionToRoute</code>方法都可以接受<code>final</code>类型的参数。并且这个参数是一个包括一个<code>key</code>为<code>queryParams</code>的对象。</p><p>修改前面已经创建好的路由<code>posts.js</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    beforeModel: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  转到路由articles上，并且传递查询参数category，参数值为Java</span></span><br><span class="line">        <span class="built_in">this</span>.transitionTo(<span class="string">&#x27;articles&#x27;</span>, &#123; <span class="attr">queryParams</span>: &#123; <span class="attr">category</span>: <span class="string">&#x27;java&#x27;</span> &#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行<a href="http://localhost:4200/posts">http://localhost:4200/posts</a>后，可以看到路由直接跳转到<a href="http://localhost:4200/articles?category=java">http://localhost:4200/articles?category=java</a>，实现了路由切换的同时也指定了查询的参数。界面显示的数据我就不截图了，程序不出错，显示的都是<code>category</code>为<code>java</code>的数据。</p><p>另外还有三种切换路由的方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  可以传递一个object过去</span></span><br><span class="line"><span class="built_in">this</span>.transitionTo(<span class="string">&#x27;articles&#x27;</span>, object, &#123; <span class="attr">queryParams</span>: &#123; <span class="attr">category</span>: <span class="string">&#x27;java&#x27;</span> &#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种方式不会改变路由，只是起到设置参数的作用，如果你在</span></span><br><span class="line"><span class="comment">//路由articles中使用这个方法，你的路由仍然是articles，只是查询参数变了。</span></span><br><span class="line"><span class="built_in">this</span>.transitionTo(&#123; <span class="attr">queryParams</span>: &#123; <span class="attr">direction</span>: <span class="string">&#x27;asc&#x27;</span> &#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  直接指定跳转的URL和查询参数</span></span><br><span class="line"><span class="built_in">this</span>.transitionTo(<span class="string">&#x27;/posts/1?sort=date&amp;showDetails=true&#x27;</span>);</span><br></pre></td></tr></table></figure><p>上面的三种方式请读者自己编写例子试试吧。光看不练假把式⋯⋯</p><h3 id="4，选择进入一个完整的路由"><a href="#4，选择进入一个完整的路由" class="headerlink" title="4，选择进入一个完整的路由"></a>4，选择进入一个完整的路由</h3><p><code>transitionTo</code>和<code>link-to</code>提供的参数仅会改变查询参数的值，而不会改变路由的层次结构，这种路由的切换被认为是不完整的，这也就意味着比如<code>model</code>和<code>setupController</code>回调方法就不会被执行，只是使得<code>controller</code>里的属性值为新的查询参数值以及更新URL。</p><p>但是有些情况是查询参数改变需要从服务器重新加载数据，这种情况就需要一个完整的路由切换了。为了能在查询参数改变的时候切换到一个完整的路由你需要在<code>controller</code>对应的路由中配置一个名为<code>queryParams</code>哈希对象。并且需要设置一个名为<code>refreshModel</code>的查询参数，这个参数的值为<code>true</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">queryParams: &#123;</span><br><span class="line">    category: &#123;</span><br><span class="line">        refreshModel: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">model: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.store.query(<span class="string">&#x27;article&#x27;</span>, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于这段代码演示实例请查看官方提供的代码！</p><h3 id="5，使用replaceState更新URL"><a href="#5，使用replaceState更新URL" class="headerlink" title="5，使用replaceState更新URL"></a>5，使用replaceState更新URL</h3><p>默认情况下，<a href="http://emberjs.com/">Ember</a>使用<code>pushState</code>更新URL来响应<code>controller</code>类中查询参数属性的变化，但是如果你想使用<code>replaceState</code>来替换<code>pushState</code>你可以在<code>route</code>类中的<code>queryParams</code>哈希对象中设置<code>replace</code>为<code>true</code>。设置为<code>true</code>表示启用这个设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">queryParams: &#123;</span><br><span class="line">category: &#123;</span><br><span class="line">    replaceState:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6，将控制器的属性映射到不同的查询参数键值"><a href="#6，将控制器的属性映射到不同的查询参数键值" class="headerlink" title="6，将控制器的属性映射到不同的查询参数键值"></a>6，将控制器的属性映射到不同的查询参数键值</h3><p>默认情况下，在<code>controller</code>类中指定的查询属性<code>foo</code>会绑定到名为<code>foo</code>的查询参数上。比如：<code>?foo=123</code>。你也可以把查询属性映射到不同的查询参数上，语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/controllers/articles.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    queryParams: &#123;</span><br><span class="line">        category: <span class="string">&#x27;articles_category&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    category: <span class="literal">null</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这段代码就是把查询属性<code>category</code>映射到查询参数<code>articles_category</code>上。<br>对于有多个查询参数的情况你需要使用数组指定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/controllers/articles.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    queryParams: [<span class="string">&#x27;page&#x27;</span>, <span class="string">&#x27;filter&#x27;</span>, &#123; <span class="attr">category</span>: <span class="string">&#x27;articles_category&#x27;</span> &#125;],</span><br><span class="line">    category: <span class="literal">null</span>,</span><br><span class="line">    page: <span class="number">1</span>,</span><br><span class="line">    filter: <span class="string">&#x27;recent&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述代码定义了三个查询参数，如果需要把属性映射到不同名的参数需要手动指定，比如<code>category</code>。</p><h3 id="7，默认值与反序列化"><a href="#7，默认值与反序列化" class="headerlink" title="7，默认值与反序列化"></a>7，默认值与反序列化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    queryParams: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">    page: <span class="number">1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这段代码中设置了查询参数<code>page</code>的默认值为<code>1</code>。</p><p>这样的设置会有两种默认的行为：</p><p>1.查询的时候查询属性值会根据默认值的类型自动转换，所以当用户输入<a href="http://localhost:4200/articles?page=1">http://localhost:4200/articles?page=1</a>的时候<code>page</code>的值<code>1</code>会被识别成数字<code>1</code>而不是字符<code>&#39;1&#39;</code>，应为设置的默认值<code>1</code>是数字类型。<br>2.当查询的值正好是默认值的时候，该值不会被序列化到URL中。比如查询值正好是<code>?page=1</code>这种情况URL可能是<code>/articles</code>，但是如果查询值是<code>?page=2</code>，URL肯定是<code>/articles?page=2</code>。</p><h3 id="8，粘性的查询参数值"><a href="#8，粘性的查询参数值" class="headerlink" title="8，粘性的查询参数值"></a>8，粘性的查询参数值</h3><p>默认情况下，在<a href="http://emberjs.com/">Ember</a>中查询参数是“粘性的”，也就是说如果你改变了查询参数或者是离开页面又回退回来，新的查询值会默认在URL上，而不会自动清除（几乎所见的URL都差不多是这种情况）。这是个很有用的默认设置，特别是当你点击后退回到原页面的时候显示的数据没有改变。  </p><p>此外，粘性的查询参数值会被加载的<code>route</code>存储或者回复。比如，包括了动态段<code>/:post_id</code>的路由<code>posts</code>，以及路由对应的<code>controller</code>包含了查询属性<code>filter</code>。如果你导航到<code>/badgers</code>并且根据<code>reookies</code>过滤，然后再导航到<code>/bears</code>并根据<code>best</code>过滤，然后再导航到<code>/potatose</code>并根据<code>lamest</code>过滤。如下面的链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;#link-to &#x27;posts&#x27; &#x27;badgers&#x27;&#125;&#125;Badgers&#123;&#123;/link-to&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123;#link-to &#x27;posts&#x27; &#x27;bears&#x27;&#125;&#125;Bears&#123;&#123;/link-to&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123;#link-to &#x27;posts&#x27; &#x27;potatoes&#x27;&#125;&#125;Potatoes&#123;&#123;/link-to&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板编译之后得到如下HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/badgers?filter=rookies&quot;</span>&gt;</span>Badgers<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/bears?filter=best&quot;</span>&gt;</span>Bears<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/potatoes?filter=lamest&quot;</span>&gt;</span>Potatoes<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到一旦你改变了查询参数，查询参数就会被存储或者是关联到<code>route</code>所加载的<code>model</code>上。如果你想重置查询参数你有如下两种方式处理：</p><p>1.在<code>link-to</code>或者<code>transitionTo</code>上显式指定查询参数的值；<br>2.使用<code>Route.resetController</code>回调设置查询参数的值并回退到切换之前的路由或者是改变<code>model</code>的路由。</p><p>下面的代码片段演示了一个查询参数在<code>controller</code>中重置为<code>1</code>，同时作用于切换前<code>ActiclesRoute</code>的<code>model</code>。结果就是当返回到当前路由时查询值已经被重置为<code>1</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/article.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    resetController(controller, isExiting, transition) &#123;</span><br><span class="line">        <span class="comment">//  只有model发生变化的时候isExiting才为false</span></span><br><span class="line">        <span class="keyword">if</span> (isExiting) &#123;</span><br><span class="line">            <span class="comment">//  重置查询属性的值</span></span><br><span class="line">            controller.set(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>某些情况下，你不想是用查询参数值限定路由模式，而是让查询参数值改变的时候路由也跟着改变并且会重新加载数据。这时候你可用在对应的<code>controller</code>类中设置<code>queryParams</code>哈希对象，在这对象中配置一个参数<code>scope</code>为<code>controller</code>。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">queryParams: [&#123;</span><br><span class="line">    showMagnifyingGlass: &#123;</span><br><span class="line">        scope: <span class="string">&#x27;controller&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>粘性的查询参数值这个只是点理解起来好难的说，看下一遍下来都不知道这个有何用！！！现在还是学习阶段还没真正在项目中使用这个特性，所以我也不知道怎么解释更容易理解，建议直接看官网教程吧！！</p><p><strong>说明</strong>：本文是基于官方2.0参考文档缩写，相对于其他版本内容会有出入。</p><p>以上的内容就是有关查询参数的全部了，主要是理解了查询参数的设置使用起来也就没什么问题。有点遗憾的是没能写出第4点的演示实例！能力有限只能遇到或者明白其使用的时候再补上了！！</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板渲染</title>
      <link href="/2020/01/18/ember-teach/routing/%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93/"/>
      <url>/2020/01/18/ember-teach/routing/%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<p>路由的另一个重要职责是渲染同名字的模板。</p><p>比如下面的路由设置，<code>posts</code>路由渲染模板<code>posts.hbs</code>，路由<code>new</code>渲染模板<code>posts/new.hbs</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.route(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.route(<span class="string">&#x27;new&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>每一个模板都会渲染到父模板的<code>{{outlet}}</code>上。比如上面的路由设置模板<code>posts.hbs</code>会渲染到模板<code>application.hbs</code>的<code>{{outlet}}</code>上。<code>application.hbs</code>是所有自定义模板的父模板。模板posts/new.hbs会渲染到模板<code>posts.hbs</code>的<code>{{outlet}}</code>上。</p><p>如果你想渲染到另外一个模板上也是允许的，但是要在路由中重写<code>renderTemplate</code>回调方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    <span class="comment">//  渲染到favorites模板上</span></span><br><span class="line">    renderTemplate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.render(<span class="string">&#x27;favorites&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>模板的渲染这个知识点比较简单，内容也很少，在前面的<a href="http://blog.ddlisting.com/2016/03/22/ember-js-ru-men-zhi-nan-zhi-shi-si-fan-wai-pian-lu-you-mo-ban-de-zhi-xing-xuan-ran-shun-xu/">Ember.js 入门指南之十四番外篇，路由、模板的执行、渲染顺序</a>已经介绍过相关的内容。</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终止与重试路由跳转</title>
      <link href="/2020/01/18/ember-teach/routing/%E7%BB%88%E6%AD%A2%E4%B8%8E%E9%87%8D%E8%AF%95%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/"/>
      <url>/2020/01/18/ember-teach/routing/%E7%BB%88%E6%AD%A2%E4%B8%8E%E9%87%8D%E8%AF%95%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<p>在路由的转换过程中，Ember路由器会通过回调（<code>beforeModel</code>、<code>model</code>、<code>afterModel</code>、<code>redirect</code>）解析一个<code>transition</code>对象到转换的下一路由中。任何一个回调都可以通过传递过来的<code>transition</code>参数获取<code>transition</code>对象，然后使用这个对象调用<code>transition.abort()</code>方法立即终止路由的转换，如果你的程序保存了这个对象（<code>transition</code>对象）之后你还可以在需要的地方取出来并调用<code>transition.retry()</code>方法激活路由转换这个动作，最终实现路由的转换。</p><h3 id="1，通过调用willTransition方法阻止路由转换"><a href="#1，通过调用willTransition方法阻止路由转换" class="headerlink" title="1，通过调用willTransition方法阻止路由转换"></a>1，通过调用willTransition方法阻止路由转换</h3><p>当用户通过<code>{{link-to}}</code>助手、<code>transition</code>方法或者直接执行URL来转换路由，当前路由会自动执行<code>willTransition</code>方法。每个活动的路由都可以决定是否执行转换路由。</p><p>想象一下，在当前路由所渲染的页面是一个比较复杂的表单，并且用户已经填写了很多信息，但是用户很可能无意中点击了返回或者关闭页面，这就导致了用户填写的信息直接丢失了，这样的用户体验并不好。此时我们可以通过使用<code>willTransition</code>方法阻止用户的行为并提示用户是否确认离开本页面。</p><p>为了验证这个特性我们需要创建好测试所需的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ember g controller form</span><br><span class="line">ember g route form</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">首先在&#96;controller&#96;增加测试数据。</span><br><span class="line">&#96;&#96;&#96;js</span><br><span class="line">&#x2F;&#x2F;  app&#x2F;controllers&#x2F;form.js</span><br><span class="line"></span><br><span class="line">import Ember from &#39;ember&#39;;</span><br><span class="line"></span><br><span class="line">export default Ember.Controller.extend(&#123;</span><br><span class="line">    firstName: &#39;chen&#39;,</span><br><span class="line">    lastName: &#39;ubuntuvim&#39;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>再创建一个模拟用户填写信息的模板。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span>&gt;</span>FirstName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    &#123;&#123;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;exampleInputEmail1&quot; placeholder=&quot;FirstName&quot; value=firstName&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputPassword1&quot;</span>&gt;</span>LashName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    &#123;&#123;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;exampleInputPassword1&quot; placeholder=&quot;LashName&quot; value=lastName&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123;#link-to &#x27;about&#x27;&#125;&#125;<span class="tag">&lt;<span class="name">b</span>&gt;</span>转到about<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br></pre></td></tr></table></figure><p>关键部分来了，我们在路由里添加<code>willTransition</code>方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/form.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    actions: &#123;</span><br><span class="line">        willTransition: <span class="function"><span class="keyword">function</span>(<span class="params">transition</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//  如果是使用this.get(&#x27;key&#x27;)获取不了页面输入值，因为不是通过action提交表单的</span></span><br><span class="line">            <span class="keyword">var</span> v = <span class="built_in">this</span>.controller.get(<span class="string">&#x27;firstName&#x27;</span>);</span><br><span class="line">            <span class="comment">//  任意获取一个作为判断表单输入值</span></span><br><span class="line">            <span class="keyword">if</span> (v &amp;&amp; !confirm(<span class="string">&quot;你确定要离开这个页面吗？?&quot;</span>)) &#123;</span><br><span class="line">                transition.abort();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行：<a href="http://localhost:4200/form">http://localhost:4200/form</a>，先点击<code>submit</code>提交表单，可以看到表单顺利提交没有任何问题，然后再点击<code>转到about</code>，你可以看到会弹出如下提示框。</p><p><img src="/content/images/2016/03/62.png" alt="run result"></p><p>接着，点击“取消”页面没有跳转，如果是点击“确定”页面会跳转到<code>about</code>页面。<br>再接着，把<code>FirstName</code>这个输入框的内容清空然后点击“转到about”页面直接跳转到了<code>about</code>页面。</p><p>很多博客网站都是有这个功能的！！</p><h3 id="2，在beforeModel、model、afterModel回调中阻止路由转换"><a href="#2，在beforeModel、model、afterModel回调中阻止路由转换" class="headerlink" title="2，在beforeModel、model、afterModel回调中阻止路由转换"></a>2，在beforeModel、model、afterModel回调中阻止路由转换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeModel(transition) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>() &gt; <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;January 1, 1980&#x27;</span>)) &#123;</span><br><span class="line">      alert(<span class="string">&#x27;Sorry, you need a time machine to enter this route.&#x27;</span>);</span><br><span class="line">      transition.abort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码演示的就是在<code>beforeModel</code>回调中使用<code>abort</code>方法阻止路由的转换。代码比较简单我就不做例子演示了！</p><h3 id="3，存储transition对象、路由转换重试"><a href="#3，存储transition对象、路由转换重试" class="headerlink" title="3，存储transition对象、路由转换重试"></a>3，存储transition对象、路由转换重试</h3><p>对于使用<code>abort</code>方法终止的路由可以调用<code>retry</code>方法重新激活。一个很典型的例子就是登陆。如果登陆成功就转到首页，否则跳转回登陆页面。<br>文件准备工作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ember g controller auth</span><br><span class="line">ember g route auth</span><br><span class="line">ember g controller login</span><br><span class="line">ember g route login</span><br></pre></td></tr></table></figure><p>下面是演示用到的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/controllers/login.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    actions: &#123;</span><br><span class="line">        login: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">//  获取跳转过来之前路由中设置的transition对象</span></span><br><span class="line">            <span class="keyword">var</span> transitionObj = <span class="built_in">this</span>.get(<span class="string">&#x27;transitionObj&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;transitionObj = &#x27;</span> + transitionObj);</span><br><span class="line">            <span class="keyword">if</span> (transitionObj) &#123;</span><br><span class="line">                <span class="built_in">this</span>.set(<span class="string">&quot;transitionObj&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                transitionObj.retry();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//  转回首页</span></span><br><span class="line">                <span class="built_in">this</span>.transitionToRoute(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/controllers/auth.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    userIsLogin: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/auth.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    beforeModel(transition) &#123;</span><br><span class="line">        <span class="comment">// 在名为auth的controller设置了userIsLogin为false，默认是未登录</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.controllerFor(<span class="string">&quot;auth&quot;</span>).get(<span class="string">&#x27;userIsLogin&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">var</span> loginController = <span class="built_in">this</span>.controllerFor(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">            <span class="comment">// 保存transition对象</span></span><br><span class="line">            loginController.set(<span class="string">&quot;transitionObj&quot;</span>, transition);</span><br><span class="line">            <span class="built_in">this</span>.transitionTo(<span class="string">&quot;login&quot;</span>);  <span class="comment">// 跳转到路由login</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //app/templates/login.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line">这个是登陆页面</span><br></pre></td></tr></table></figure><ol><li>先执行<a href="http://localhost:4200/auth">http://localhost:4200/auth</a>，然后界面会自动跳转到<code>login</code>页面，结果显示如下：</li></ol><p><img src="/content/images/2016/03/63.png" alt="result"></p><p>可以看到URL确实是转到<code>login</code>了。</p><ol start="2"><li>执行<a href="http://localhost:4200/login">http://localhost:4200/login</a>，你会发现页面直接跳转到首页，浏览器控制台打印的<code>transitionObj</code>是<code>undefined</code>。由于没有经<code>auth</code>这个路由的跳转所以获取不到<code>transition</code>对象。自然就跳转回<code>index</code>这个路由。</li></ol><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由定义</title>
      <link href="/2020/01/18/ember-teach/routing/%E8%B7%AF%E7%94%B1%E5%AE%9A%E4%B9%89/"/>
      <url>/2020/01/18/ember-teach/routing/%E8%B7%AF%E7%94%B1%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>当你的应用启动的时候，路由器就会匹配当前的URL到你定义的路由上。然后按照定义的路由层次逐个加载数据、设置应用程序状态、渲染路由对应的模板。</p><h3 id="1，基本路由"><a href="#1，基本路由" class="headerlink" title="1，基本路由"></a>1，基本路由</h3><p>在<code>app/router.js</code>的<code>map</code>方法里定义的路由会映射到当前的URL。当<code>map</code>方法被调用的时候方法体内的<code>route</code>方法就会创建路由。</p><p>下面使用<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令创建两个路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember generate route about</span><br><span class="line">ember generate route favorites</span><br></pre></td></tr></table></figure><p>命令执行完之后你可在你的项目目录<code>app/routes</code>下面看到已经创建好的两个路由文件已经<code>app/templates</code>下面路由对应的模板文件。<br>此时在<code>app/router.js</code>的<code>map</code>方法中已经存在了刚刚创建的路由配置。这个是<a href="http://ember-cli.com/user-guide">Ember CLI</a>自动为你创建了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./config/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Router = Ember.Router.extend(&#123;</span><br><span class="line">  location: config.locationType</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;about&#x27;</span>);</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;favorites&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><p>现在分别修改<code>app/templates</code>下面的两个模板文件如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/about.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line">这个是about模板！<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123;outlet&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/favorites.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line">这个是favorites模板！<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123;outlet&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后访问<a href="http://localhost:4200/about">http://localhost:4200/about</a>或者<a href="http://localhost:4200/favorites">http://localhost:4200/favorites</a>，如果你的程序没有问题你也会得到如下显示结果：</p><p><img src="/content/images/2016/03/55.png" alt="run result"></p><p>如果你觉得<code>favorites</code>这个路由名字太长是否可以修改成其他名字呢？答案是肯定的，你只要修改<code>router.js</code>中<code>map</code>方法的配置即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;about&#x27;</span>);</span><br><span class="line">  <span class="comment">// 注意：访问的URL可以写favs但是项目中如果是使用route的地方仍然是使用favorites</span></span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;favorites&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/favs&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时访问：<a href="http://localhost:4200/favs">http://localhost:4200/favs</a>，界面显示的结果与之前是一样的。</p><p><strong>说明</strong>：默认情况下访问的URL与路由名字是一致的，比如<code>this.route(&#39;about&#39;)</code>与<code>this.route('about', { path: ‘/about’ })</code>是同一个路由，如果URL与路由不同名则需要使用<code>{path: '/xxx'}</code>设置映射的URL。</p><p>在handlebars模板中可以使用<code>{{link-to}}</code>助手在不同的路由间切换，使用时需要在<code>link-to</code>助手内指定路由名称。比如下面的代码使用<code>link-to</code>助手实现在<code>about</code>和<code>favs</code>两个路由间切换。<br>为了页面能美观一点引入<a href="http://www.bootcss.com/">bootstrap</a>，使用<a href="https://www.npmjs.com/">npm</a>命令安装：<code>bower install bootstrap</code>，如果安装成功你可以在bower_components目录下看到<a href="http://www.bootcss.com/">bootstrap</a>相关的文件。安装成功之后引入到项目中，修改<code>chapter3_routes/ember-cli-build.js</code>。在<code>return</code>语句前加入如下两行代码(作用就是引入<a href="http://www.bootcss.com/">bootstrap</a>框架)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.import(<span class="string">&quot;bower_components/bootstrap/dist/css/bootstrap.css&quot;</span>);</span><br><span class="line">app.import(<span class="string">&quot;bower_components/bootstrap/dist/js/bootstrap.js&quot;</span>);</span><br></pre></td></tr></table></figure><p>修改<code>application.hbs</code>，增加一个导航菜单。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- //app/templates/application.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-inverse navbar-fixed-top&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--  &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;Blog&lt;/a&gt; --&gt;</span></span><br><span class="line">                &#123;&#123;#link-to &#x27;index&#x27; class=&quot;navbar-brand&quot;&#125;&#125;Home&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;#link-to &#x27;about&#x27;&#125;&#125;about&#123;&#123;/link-to&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;#link-to &#x27;favorites&#x27;&#125;&#125;favorites&#123;&#123;/link-to&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 70px;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 项目中其他所有的模板都是application的子模板，所以其他模板都会渲染到这里的 outlet上 --&gt;</span></span><br><span class="line">&#123;&#123;outlet&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果看到页面没有<a href="http://www.bootcss.com/">bootstrap</a>效果请重新启动项目。如果运行项目后再浏览器控制台出现如下错误。</p><p><img src="/content/images/2016/03/56.png" alt="run result"></p><p>如果出现上图错误需要在<code>config/environment.js</code>中加上一些安全策略设置代码，有关设置的解释请看下面网址的文章介绍。</p><ol><li><a href="https://blog.justinbull.ca/ember-cli-and-content-security-policy-csp/">ember-cli-and-content-security-policy-cs</a></li><li><a href="https://www.w3.org/TR/2015/CR-CSP2-20150721/">https://www.w3.org/TR/2015/CR-CSP2-20150721/</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">, <span class="attr">contentSecurityPolicy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;default-src&#x27;</span>: <span class="string">&quot;&#x27;none&#x27;&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;script-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27; use.typekit.net connect.facebook.net maps.googleapis.com maps.gstatic.com&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;font-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; data: use.typekit.net&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;connect-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27;&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;img-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; www.facebook.com p.typekit.net&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;style-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; &#x27;unsafe-inline&#x27; use.typekit.net&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;frame-src&#x27;</span>: <span class="string">&quot;s-static.ak.facebook.com static.ak.facebook.com www.facebook.com&quot;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/content/images/2016/03/57.png" alt="配置截图"></p><p>上图是我的演示项目配置。然后点击<code>about</code>会得到如下界面</p><p><img src="/content/images/2016/03/58.png" alt="result"></p><p>可以看到浏览器地址栏的URL变为<code>about</code>了，并且页面显示的内容也是<code>about</code>模板的内容。同理你点击<code>favorites</code>地址栏就变为<a href="http://localhost:4200/favs">http://localhost:4200/favs</a>并且显示的内容是<code>favorites</code>的（为什么URL是<code>favs</code>而不是<code>favorites</code>呢，因为前面已经修改了<code>route</code>和URL的映射关系，路由<code>favorites</code>对应的URL是<code>favs</code>）。<br>上述演示的就是路由的切换！！！</p><p>可以看到浏览器地址栏的URL变为about了，并且页面显示的内容也是about模板的内容。同理你点击“favorites”地址栏就变为<a href="http://localhost:4200/favs%E5%B9%B6%E4%B8%94%E6%98%BE%E7%A4%BA%E7%9A%84%E5%86%85%E5%AE%B9%E6%98%AFfavorites%E7%9A%84%EF%BC%88%E4%B8%BA%E4%BB%80%E4%B9%88URL%E6%98%AFfavs%E8%80%8C%E4%B8%8D%E6%98%AFfavorites%E5%91%A2%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%89%8D%E9%9D%A2%E5%B7%B2%E7%BB%8F%E4%BF%AE%E6%94%B9%E4%BA%86route%E5%92%8CURL%E7%9A%84%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB%EF%BC%8C%E8%B7%AF%E7%94%B1favorites%E5%AF%B9%E5%BA%94%E7%9A%84URL%E6%98%AFfavs%EF%BC%89%E3%80%82">http://localhost:4200/favs并且显示的内容是favorites的（为什么URL是favs而不是favorites呢，因为前面已经修改了route和URL的映射关系，路由favorites对应的URL是favs）。</a><br>上述演示的就是路由的切换！！！</p><h3 id="2，路由嵌套"><a href="#2，路由嵌套" class="headerlink" title="2，路由嵌套"></a>2，路由嵌套</h3><p>还记得在前面的<a href="http://blog.ddlisting.com/2016/03/22/ember-js-ru-men-zhi-nan-zhi-shi-san-link-to/">Ember.js 入门指南之十三{{link-to}} 助手</a>这篇文章的内容吗？在这篇文章中比较详细的介绍了路由的嵌套与怎么使用嵌套的路由。不妨回过头去看看。在这里打算就不讲了⋯⋯如果有不明白的请看官网的教程。</p><h3 id="3，application路由"><a href="#3，application路由" class="headerlink" title="3，application路由"></a>3，application路由</h3><p><code>application</code>路由是默认的路由，是程序的入口，所有其他自定义的路由都先进过<code>application</code>才到自定义的路由。并且<code>application</code>路由对应的<code>application.hbs</code>模板是所有自定义模板的父模板，所有自定义的模板都会渲染到application.hbs模板的<code>{{outlet}}</code>上。有关于路由的执行顺序以及模板的渲染顺序在前面的<a href="http://blog.ddlisting.com/2016/03/22/ember-js-ru-men-zhi-nan-zhi-shi-san-link-to/">Ember.js 入门指南之十三{{link-to}} 助手</a>也讲过了，在此也不打算在做过多的介绍了。你可以回头看之前的文章或者到官网查看。</p><h3 id="4，index路由"><a href="#4，index路由" class="headerlink" title="4，index路由"></a>4，index路由</h3><p>对于所有的嵌套的路由，包括最顶层的路由Ember会自动生成一个访问URL为<code>/</code>对应路由名称为<code>index</code>的路由。</p><p>比如下面的两种路由设置是等价的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/router.js</span></span><br><span class="line"><span class="comment">// ⋯⋯</span></span><br><span class="line"></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;about&#x27;</span>);</span><br><span class="line">    <span class="comment">// 注意：访问的URL可以写favs但是项目中如果是使用route的地方仍然是使用favorites</span></span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;favorites&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/favs&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/router.js</span></span><br><span class="line"><span class="comment">// ⋯⋯</span></span><br><span class="line"></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;);</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;about&#x27;</span>);</span><br><span class="line">    <span class="comment">// 注意：访问的URL可以写favs但是项目中如果是使用route的地方仍然是使用favorites</span></span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;favorites&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/favs&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><p><code>index</code>路由会渲染到<code>application.hbs</code>模板的<code>{{outlet}}</code>上。这个是Ember默认设置。当用户访问<code>/about</code>时Ember会把<code>index</code>模板替换为<code>about</code>模板。</p><p>对于路由嵌套的情况也是如此。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/router.js</span></span><br><span class="line"><span class="comment">//  ⋯⋯</span></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.route(<span class="string">&#x27;new&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/router.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  ⋯⋯</span></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;);</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.route(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;);</span><br><span class="line">      <span class="built_in">this</span>.route(<span class="string">&#x27;new&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><p>两种设置方式都会得到如下图的路由表。打开浏览器的“开发者工具”点开“Ember”选项卡，在点开“/#Routes”你就可以看到如下路由表（显示是顺序有可能跟你的不一样）。</p><p><img src="/content/images/2016/03/59.png" alt="路由渲染结果"></p><p>注：<code>loading</code>和<code>error</code>这两个路由是ember自动生成的，他们的用法会在后面的文章介绍。</p><p>当用户访问<code>/posts</code>时实际进入的路由是<code>posts.index</code>对应的模板是<code>posts/index.hbs</code>，但是实际中我并没有创建这个模板，因为Ember默认把这个模板渲染到<code>posts.hbs</code>的<code>{{outlet}}</code>上。由于这个模板不存在也就相当于什么都没做。当然你也可以创建这个模板。<br><br>使用命令：<code>ember generate template posts/index</code>然后在这个模板中添加以下显示的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/posts/index.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这里是/posts/index.hbs。。。<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再此访问<a href="http://localhost:4200/posts">http://localhost:4200/posts</a>，是不是可以看到增加的内容了。</p><p>你可以这么理解对于每一个有子路由的路由都有一个名为<code>index</code>的子路由并且这个路由对应的模板为<code>index.hbs</code>，如果把有子路由的路由当做一个模块看待那么<code>index.hbs</code>就是这个模块的首页。特别是做过一些信息系统的朋友应该是很熟悉的，基本上没个子模块都会有一个首页，这个首页现实的内容就是一进入这个模块时就显示的内容。既然是子模板当然也不会例外它也会渲染到父模板的<code>{{outlet}}</code>上。比如上面的例子当用户访问<a href="http://localhost:4200/posts">http://localhost:4200/posts</a>实际进入的是<a href="http://localhost:4200/posts/">http://localhost:4200/posts/</a>（后面多了一个<code>/</code>，这个<code>/</code>对应的模板就是<code>index</code>），当用户访问的是<a href="http://localhost:4200/posts/new">http://localhost:4200/posts/new</a>，那么进入的就是<code>posts/new.hbs</code>这个模板（也是渲染到<code>posts.hbs</code>的<code>{{outlet}}</code>上）。</p><h3 id="4，动态段"><a href="#4，动态段" class="headerlink" title="4，动态段"></a>4，动态段</h3><p>关于动态段在前面的<a href="http://blog.ddlisting.com/2016/03/22/ember-js-ru-men-zhi-nan-zhi-shi-san-link-to/">Ember.js 入门指南之十三{{link-to}} 助手</a>也介绍过了，在这里就再简单补充下。</p><p>路由最主要的任务之一就是加载<code>model</code>。</p><p>例如对于路由<code>this.route(&#39;posts&#39;);</code>会加载项目中所有的<code>posts</code>下的<code>model</code>。但是当你只想加载其中一个<code>model</code>的时候怎么处理呢？而且大多数情况我们是不需要一次性加载完全部数据的，一般情况都是加载其中一小部分。这个时候就需要动态段了！</p><p>动态段以<code>:</code>开头，并且后面接着<code>model</code>的<code>id</code>属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/router.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  ⋯⋯</span></span><br><span class="line"></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;about&#x27;</span>);</span><br><span class="line">    <span class="comment">// 注意：访问的URL可以写favs但是项目中如果是使用route的地方仍然是使用favorites</span></span><br><span class="line">    <span class="comment">// this.route(&#x27;favorites&#x27;, &#123; path: &#x27;/favs&#x27; &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.route(<span class="string">&#x27;post&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/:post_id&#x27;</span>&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><p>此时你可以访问<a href="http://localhost:4200/posts/1">http://localhost:4200/posts/1</a>，不过我们还没创建<code>model</code>所以会报错。这个我们暂时不管，后面会有一章是介绍<code>model</code>的。现在只要知道你访问<a href="http://localhost:4200/posts/1">http://localhost:4200/posts/1</a>就相当于获取<code>id</code>值唯一的<code>model</code>。</p><h3 id="5，通配符-全局路由"><a href="#5，通配符-全局路由" class="headerlink" title="5，通配符/全局路由"></a>5，通配符/全局路由</h3><p>Ember也同样运行你使用<code>*</code>作为URL通配符。有了通配符你可以设置多个URL访问同一个路由。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.route(<span class="string">&#x27;about&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/*wildcard&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><p>然后访问：<a href="http://localhost:4200/wildcard">http://localhost:4200/wildcard</a>或者访问<a href="http://localhost:4200/2423432ffasdfewildcard">http://localhost:4200/2423432ffasdfewildcard</a>或者<a href="http://localhost:4200/2333">http://localhost:4200/2333</a>都是可以进入到<code>about</code>这个路由，但是<a href="http://localhost:4200/posts">http://localhost:4200/posts</a>仍然进入的是<code>posts</code>这个路由。因为可以匹配到这个路由。</p><h3 id="6，重置子路由的命名空间"><a href="#6，重置子路由的命名空间" class="headerlink" title="6，重置子路由的命名空间"></a>6，重置子路由的命名空间</h3><p>在有路由嵌套的情况下，一般情况我们访问URL的格式都是<code>父路由名/子路由名</code>，Ember提供了一个<code>resetNamespace:true</code>选项可以用户重置子路由的命名空间，使用这个设置的路由可以直接这样访问<code>/子路由名</code>，不需要写父路由名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.route(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;post&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/:post_id&#x27;</span>&#125;);</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;comments&#x27;</span>, &#123; <span class="attr">resetNamespace</span>: <span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.route(<span class="string">&#x27;new&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时如果你想问的<code>new</code>这个路由你可以直接不写<code>comments</code>。<a href="http://localhost:4200/posts/new">http://localhost:4200/posts/new</a>，而不需要<a href="http://localhost:4200/posts/comments/new">http://localhost:4200/posts/comments/new</a>，不过模板渲染的顺序没变，<code>new</code>模板仍然是渲染到<code>comments</code>的<code>{{outlet}}</code>上。</p><p>不过个人觉得还是不使用这个设置比较好，特别是在开发的时候你可以看到访问的URL的层次，对你调试代码还是很有帮助的。</p><p>以上的内容就是定义路由的全部内容。都是非常重要的知识，希望你能好好掌握，对于路由的嵌套请看之前的文章。如果有疑问请给我留言或者访问官网看原教程。<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由重定向</title>
      <link href="/2020/01/18/ember-teach/routing/%E8%B7%AF%E7%94%B1%E9%87%8D%E5%AE%9A%E5%90%91/"/>
      <url>/2020/01/18/ember-teach/routing/%E8%B7%AF%E7%94%B1%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>声明：对于transition这个词直译是“过渡”的意思，但是总觉得“路由的过渡”读起来总有那么一点别扭，想了下于是就用“切换”替代吧，如有不妥欢迎指正。</p></blockquote><p>我们熟知的Java、PHP等语言都提供了URL的重定向，那么<a href="http://emberjs.com/">Ember</a>的重定向又是怎么去实现的呢？</p><p>如果是从路由重定向到另外一个路由你可以调用<code>transitionTo</code>方法，如果是从<code>controller</code>重定向到一个<code>route</code>则调用<code>transitionToRoute</code>方法。<code>transitionTo</code>方法所实现的功能与<code>link-to</code>的作用是一样的，都可以实现路由的切换。<br>如果重定向之后的路由包含有动态段你需要解析<code>model</code>数据或者指定动态段的值。由于不是直接执行URL所以不会执行重定向之后的路由的<code>model</code>回调。</p><h3 id="1，切换路由前获取model"><a href="#1，切换路由前获取model" class="headerlink" title="1，切换路由前获取model"></a>1，切换路由前获取model</h3><p>如果你想在路由切换的时候不加载<code>model</code>你可以调用<code>beforeModel</code>回调，在这个回调中实现路由的切换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeModel() &#123;</span><br><span class="line">    <span class="built_in">this</span>.transitionTo(<span class="string">&#x27;posts&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2，切换路由后获取model"><a href="#2，切换路由后获取model" class="headerlink" title="2，切换路由后获取model"></a>2，切换路由后获取model</h3><p>有些情况下你需要先根据<code>model</code>回调获取到的数据然后判断跳转到某个路由上。此时你可以使用<code>afterModel</code>回调方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">afterModel: <span class="function"><span class="keyword">function</span>(<span class="params">model, transition</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (model.get(‘length’) === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.transitionTo(<span class="string">&#x27;post&#x27;</span>, model.get(<span class="string">&#x27;firstObject&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切换路由，并初始化数据为<code>model</code>的第一个元素数据。</p><h3 id="3，重定向到子路由"><a href="#3，重定向到子路由" class="headerlink" title="3，重定向到子路由"></a>3，重定向到子路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.route(<span class="string">&#x27;post&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/:post_id&#x27;</span>&#125;);</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>子路由的重定向有些许不同，如果你需要重定向到上面这个段代码的子路由<code>posts.post</code>上，如果是使用<code>beforeModel</code>、<code>model</code>、<code>afterModel</code>回调重定向到<code>posts.post</code>父路由<code>posts</code>会重新在执行一次，再次执行父路由这种方式就显得有点多余了，特别父路由需要加载的数据比较多的时候，会影响到加载的效率。<br>如果是这种情况我们可以使用<code>redirect</code>回调，此回调不会再次执行父路由。仅仅是实现路由切换而已。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redirect: <span class="function"><span class="keyword">function</span>(<span class="params">model, transition</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (model.get(<span class="string">&#x27;length&#x27;</span>) === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.transitionTo(<span class="string">&#x27;posts.post&#x27;</span>, model.get(<span class="string">&#x27;firstObject&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重定向到子路由，解析之后会得到的类似于<code>posts/2</code>这种形式的URL。</p><p>以上就是全部路由的重定向方式，主要有4个回调：<code>beforeModel</code>、<code>model</code>、<code>afterModel</code>、<code>redirect</code>。前面三种使用场景差别不大，<code>redirect</code>主要用于重定向到子路由。</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>handlebars基础</title>
      <link href="/2020/01/18/ember-teach/templetes/handlebars%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/01/18/ember-teach/templetes/handlebars%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><code>Ember</code>采用<code>handlebars</code>模板库作为应用的<code>view</code>层。<code>Handlebars</code>模板与普通的<code>HTML</code>非常相似。但是相比普通的<code>HTML</code>而言<code>handlebars</code>提供了非常丰富的表达式。<br><code>Ember</code>采用<code>handlebars</code>模板并且扩展了很多功能，让你使用<code>handlebars</code>就像使用<code>HTML</code>一样简单。</p><h3 id="模板定义"><a href="#模板定义" class="headerlink" title="模板定义"></a>模板定义</h3><p>在前一篇介绍了一个很重要的构建工具<code>Ember CLI</code>，从本篇开始后面所创建的文件都是使用这个构建工具来创建，先进入到项目路径下再执行<code>Ember CLI</code>命令。</p><p>创建一个模板命令<code>ember g template application</code></p><p>由于这个模板在创建项目的时候就已经有了，所以会提示你是否覆盖原来的文件，你可以选择覆盖或者不覆盖都行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/application.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Kittens<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">Kittens are the cutest!!</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<font color='red'>代码中的第一句注释的内容表明了这个文件的位置已经文件名称，后面的代码片段也会采用这种方式标注。如果没有特别的说明第一句代码都是注释文件的路径及其名称。</font></p><p>上述就是一个模板，非常简单的模板，只有一个h1和p标签，当你保存这个文件的时候Ember CLI会自动帮你刷新页面，不需要你手动去刷新！此时你的浏览器页面应该会看到如下信息：</p><p><img src="/content/images/2016/03/15.png" alt="run result"></p><p>那么恭喜你，模板定义成功了，至于为什么执行<a href="http://localhost:4200/">http://localhost:4200</a>就直接显示到这里等你慢慢学到<code>controller</code>和<code>route</code>的时候自然会明白，你就当<code>application.hbs</code>是一个默认的首页，这样你应该明白了吧！</p><h3 id="handlbars表达式"><a href="#handlbars表达式" class="headerlink" title="handlbars表达式"></a>handlbars表达式</h3><p>每一个模板都会有一个与之关联的<code>controller</code>类、<code>route</code>类、<code>model</code>类（当然这些类是不是必须有的）。这就是模板能显示表达式的值的原因，你可以在<code>controller</code>类中设置模板中表达式显示的值，就像<code>java web</code>开发中在<code>servlet</code>或者<code>Action</code>调用<code>request.setAttribute()</code>方法设置某个属性一样。比如下面的模板代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/application.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这个是默认的模板，Ember会根据命名的规则自动找到 controllers/application 对应的模板是templates/application.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Welcome to Ember<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Ember的属性自动更新：如果属性在controller层改变了，页面会自动刷新显示最新的值，太强大了！！！ --&gt;</span></span><br><span class="line"></span><br><span class="line">Hello, <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>!</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">My email is <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;email&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面我们创建一个controller。这次我们用Ember CLI的命令创建： ember generate controller application，这句命令表示会创建一个controller并且名称是application，然后我们会得到如下几个文件：</p><ol><li><code>app/controllers/application.js</code>   –<code>controller</code>本身</li><li><code>tests/unit/controllers/application-test.js</code>   –<code>controller</code>对应的单元测试文件</li></ol><p>打开你的文件目录，是不是可以在<code>app/controllers</code>下面看到了！<br>现在为了演示表达式我们在<code>controller</code>里添加一些代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controllers/application.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember from <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Ember会根据命名规则自动找到templates/application.hbs这个模板，</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type</span> &#123;hash&#125; 需要设置的hash对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">export <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    <span class="comment">//  设置两个属性</span></span><br><span class="line">    firstName: <span class="string">&#x27;chen&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;ubuntuvim&#x27;</span>,</span><br><span class="line">    email: <span class="string">&#x27;chendequanroob@gmail.com&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后修改显示的模板如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/application.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这个是默认的模板，Ember会根据命名的规则自动找到 controllers/application 对应的模板是templates/application.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Welcome to Ember<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Ember的属性自动更新：如果属性在controller层改变了，页面会自动刷新显示最新的值，太强大了！！！ --&gt;</span></span><br><span class="line">Hello, <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>!</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">My email is <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;email&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存，然后页面会自动刷新（<code>Ember CLI</code>会自动检测文件是否改变，然后重新编译项目），我们可以看到在<code>controller</code>设置的值，可以直接在模板上显示了。</p><p><img src="/content/images/2016/03/16.png" alt="run result"></p><p>这个就是表达式的绑定，后面你会学习到更多更有趣也更复杂的<code>handlebasr</code>表达式。<br>随着应用程序的规模不断扩大，会有更多的模板和与之关联的控制器。并且有时候一个模板还可以对应这多个控制器。也就是说模板上表达式的值可能有多个<code>controller</code>控制。<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>handlebars属性绑定</title>
      <link href="/2020/01/18/ember-teach/templetes/handlebars%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A/"/>
      <url>/2020/01/18/ember-teach/templetes/handlebars%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>简单讲属性绑定其实就是在HTML标签内（是在一个标签的”&lt;”和“&gt;”中使用）直接使用<code>handlebars</code>表达式。可以直接用<code>handlebars</code>表达式的值作为HTML标签中某个属性的值。</p><p>准备工作：<br><code>ember generate route binding-element-attributes</code></p><h3 id="1，绑定字符串"><a href="#1，绑定字符串" class="headerlink" title="1，绑定字符串"></a>1，绑定字符串</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- //  app/templates/binding-element-attribute.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;&#123;model.imgUrl&#125;&#125;</span> <span class="attr">alt</span>=<span class="string">&#x27;logo&#x27;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在对应的<code>route:binding-element-attributes</code>里增加测试数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">imgUrl</span>: <span class="string">&#x27;http://i1.tietuku.com/1f73778ea702c725.jpg&#x27;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行之后模板会编译成如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://i1.tietuku.com/1f73778ea702c725.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到<code>{{model.imgUrl}}</code>会以字符串的形式绑定到<code>src</code>属性上。</p><h3 id="2，绑定Boolean值"><a href="#2，绑定Boolean值" class="headerlink" title="2，绑定Boolean值"></a>2，绑定Boolean值</h3><p>在开发过程中我们经常会根据某个值判断是否给某个标签增加CSS类，或者根据某个值决定按钮是否可用等等⋯⋯那么ember是怎么做的呢？？<br>比如下面的代码演示的是<code>checkbox</code>按钮根据绑定的属性<code>isEnable</code>的值决定是否可用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;! 当isEnable为true时候，disabled为true，不可用；否则可用&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;checkbox&#x27;</span> <span class="attr">disabled</span>=<span class="string">&#123;&#123;model.isEnable&#125;&#125;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果在<code>route</code>里设置的值是<code>true</code>那么渲染之后的HTML如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>否则</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-绑定data-xxx属性"><a href="#3-绑定data-xxx属性" class="headerlink" title="3, 绑定data-xxx属性"></a>3, 绑定data-xxx属性</h3><p>默认情况下，ember不会绑定到<code>data-xxx</code>这一类属性上。比如下面的绑定结果就得不到你的预期。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;! 绑定到data-xxx这种属性需要特殊设置&#125;&#125;</span><br><span class="line">&#123;&#123;#link-to &#x27;photo&#x27; data-toggle=&#x27;dropdown&#x27;&#125;&#125; link-to &#123;&#123;/link-to&#125;&#125;</span><br><span class="line">&#123;&#123;input type=&#x27;text&#x27; data-toggle=&#x27;tooltip&#x27; data-placement=&#x27;bottom&#x27; title=&quot;Name&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>模板渲染之后得到下面的HTML代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;ember455&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/binding-element-attributes&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ember-view active&quot;</span>&gt;</span> link-to <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;ember470&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ember-view ember-text-field&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到<code>data-xxx</code>的属性都不见了！！！现在很多的前端框架都会用到<code>data-xxx</code>这个属性，比如<code>bootstrap</code>。那怎么办呢⋯⋯你可以在view中指定对应的渲染组件<code>Ember.LinkComponent</code>和<code>Ember.TextField</code>（个人理解的）。<br>执行命令得到view文件：<br><br><code>ember generate view binding-element-attributes</code>，<br><br>在view中手动绑定，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/views/binding-element-attributes.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.View.extend(&#123;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  下面是官方给的代码，但很明显看出来这种使用方式不是2.0版本的！！</span></span><br><span class="line"><span class="comment">//  2.0版本的写法还在学习中，后续在补上，现在为了演示模板效果暂时这么写！毕竟本文的重点还是在模板属性的绑定上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  绑定input</span></span><br><span class="line">Ember.TextField.reopen(&#123;</span><br><span class="line">    attributeBindings: [<span class="string">&#x27;data-toggle&#x27;</span>, <span class="string">&#x27;data-placement&#x27;</span>]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// //  绑定link-to</span></span><br><span class="line">Ember.LinkComponent.reopen(&#123;</span><br><span class="line">    attributeBindings: [<span class="string">&#x27;data-toggle&#x27;</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>渲染之后得到的结果符合预期。得到如下HTML代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;ember398&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/binding-element-attributes&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ember-view active&quot;</span>&gt;</span>link-to<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;ember414&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tooltip&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;bottom&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ember-view ember-text-field&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到<code>data-xxx</code>的属性正常渲染到HTML上了。</p><p>本文介绍了几个常用的属性绑定方式，非常之实用！但是有点遗憾本人能力有限还没理解到最后一个实例在<code>Ember2.0</code>版中是怎么使用的，现在的代码是根据个人理解把指定组件的代码放在view，官方教程给的也不是<code>Ember2.0</code>版的，所以<code>binding-element-attributes.js</code>这个文件的代码有点奇葩了⋯⋯希望读者们不吝赐教！<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>action helper</title>
      <link href="/2020/01/18/ember-teach/templetes/action%20helper/"/>
      <url>/2020/01/18/ember-teach/templetes/action%20helper/</url>
      
        <content type="html"><![CDATA[<p><code>action</code>助手所现实的功能与<code>javascript</code>里的事件是相似的，都是通过用户点击元素触发定义在元素上的事件。Ember的action助手还允许你传递参数到对应的<code>controller</code>、<code>component</code>类，在<code>controller</code>或者<code>component</code>上处理事件的逻辑。<br>准备工作，我们使用<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令创建一个名称为<code>myaction</code>的<code>controller</code>和同名的<code>route</code>，如果你不知道怎么使用Ember CLI请看前面的文章<a href="http://blog.ddlisting.com/2016/03/18/ember-js-ru-men-zhi-nan-zhi-qi-di-zhang-dui-xiang-mo-xing-xiao-jie/">Ember.js 入门指南之七第一章对象模型小结</a>，这篇文件讲解了怎么使用Ember CLI构建一个简单的Ember项目。</p><h3 id="1，action使用实例"><a href="#1，action使用实例" class="headerlink" title="1，action使用实例"></a>1，action使用实例</h3><h4 id="1，在route层增加测试数据"><a href="#1，在route层增加测试数据" class="headerlink" title="1，在route层增加测试数据"></a>1，在route层增加测试数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  apap/routes/myaction.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    <span class="comment">//  返回测试数据到页面</span></span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">id</span>:<span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;ACTIONS&#x27;</span>, <span class="attr">body</span>: <span class="string">&quot;Your app will often need a way to let users interact with controls that change application state. For example, imagine that you have a template that shows a blog title, and supports expanding the post to show the body.If you add the &#123;&#123;action&#125;&#125; helper to an HTML element, when a user clicks the element, the named event will be sent to the template&#x27;s corresponding component or controller.&quot;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>重写<code>model</code>回调，直接返回一个对象数据。</p><h4 id="2，编写action模板"><a href="#2，编写action模板" class="headerlink" title="2，编写action模板"></a>2，编写action模板</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //  app/templates/myaction.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- showDetailInfo这个事件的名字必须要跟controller里的方法名字一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> &#123;&#123;<span class="attr">action</span> &#x27; <span class="attr">showDetailInfo</span> &#x27;&#125;&#125; <span class="attr">style</span>=<span class="string">&quot;cursor: pointer;&quot;</span>&gt;</span>&#123;&#123;model.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;&#123;#if isShowingBody&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123;model.body&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123;/if&#125;&#125;</span><br></pre></td></tr></table></figure><p>默认下只显示文章的标题，当用户点击标题的时候触发事件<code>toggleBody</code>显示文章的详细信息。</p><h4 id="3，编写action的controller实现模板所需要的逻辑"><a href="#3，编写action的controller实现模板所需要的逻辑" class="headerlink" title="3，编写action的controller实现模板所需要的逻辑"></a>3，编写action的controller实现模板所需要的逻辑</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controllers/myaction.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  控制页面文章详细内容是否显示</span></span><br><span class="line">    isShowingBody: <span class="literal">false</span>,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        showDetailInfo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// toggleProperty方法直接把isShowingBody设置为相反值</span></span><br><span class="line">            <span class="comment">// toggleProperty方法详情：http://devdocs.io/ember/classes/ember.observable#method_toggleProperty</span></span><br><span class="line">            <span class="built_in">this</span>.toggleProperty(<span class="string">&#x27;isShowingBody&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对于<code>controller</code>的处理逻辑你还可以直接编写触发的判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">        showDetailInfo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// toggleProperty方法直接把isShowingBody设置为相反值</span></span><br><span class="line">            <span class="comment">// toggleProperty方法详情：http://devdocs.io/ember/classes/ember.observable#method_toggleProperty</span></span><br><span class="line">            <span class="comment">// this.toggleProperty(&#x27;isShowingBody&#x27;);</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 变量作用域问题</span></span><br><span class="line">            <span class="keyword">var</span> isShowingBody = <span class="built_in">this</span>.get(<span class="string">&#x27;isShowingBody&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (isShowingBody) &#123;</span><br><span class="line">                <span class="built_in">this</span>.set(<span class="string">&#x27;isShowingBody&#x27;</span>, <span class="literal">false</span>);    </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.set(<span class="string">&#x27;isShowingBody&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果你不使用<code>toggleProperty</code>方法改变<code>isShowingBody</code>的值，你也可用直接编写代码修改它的值。<br>最后执行URL：<a href="http://localhost:4200/myaction">http://localhost:4200/myaction</a>，默认情况下页面上是不显示文章的详细信息的，当你点击标题则会触发事件，显示详细信息，下面2个图片分别展示的是默认情况和点击标题之后。当我们再次点击标题，详细内容又变为隐藏。</p><p><img src="/content/images/2016/03/35.png" alt="图片1"></p><p><img src="/content/images/2016/03/36-1.png" alt="图片2"></p><p>通过上述的小例子可以看到<code>action</code>助手使用起来也是非常简单的。主要注意下模板上的<code>action</code>所指定的事件名称要与<code>controller</code>里的方法名字一致。</p><h3 id="2，action参数"><a href="#2，action参数" class="headerlink" title="2，action参数"></a>2，action参数</h3><p>就像调用<code>javascript</code>的方法一样，你也可以为<code>action</code>助手增加必要的参数。只要在<code>action</code>名字后面接上你的参数即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- model直接作为参数传递到controller --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">hitMe</span>&#x27; <span class="attr">model</span>&#125;&#125;&gt;</span>点击我吧<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的在<code>controller</code>增加处理的方法<code>selected</code>。在此方法内打印获取到的参数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controllers/myaction.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  控制页面文章详细内容是否显示</span></span><br><span class="line">    isShowingBody: <span class="literal">false</span>,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        showDetailInfo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//  ⋯⋯同上面的例子</span></span><br><span class="line">        &#125;,</span><br><span class="line">        hitMe: <span class="function"><span class="keyword">function</span>(<span class="params">model</span>) </span>&#123;   <span class="comment">//  参数的名字可以任意</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;The title is &#x27;</span> + model.title);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;The body is &#x27;</span> + model.body);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Ember规定我们编写的动作处理的方法都是放在<code>actions</code>这个哈希内。哈希的键就是方法名。在<code>controller</code>方法上的参数名不要求与模板上传递的名字一致，你可以任意定义。比如方法<code>hitMe</code>的参数<code>model</code>你也可以使用<code>m</code>作为<code>hitMe</code>方法的参数。</p><p>当用户点击按钮“点击我吧”就会触发方法<code>hitMe</code>，然后执行<code>controller</code>的同名方法，最后你可以在浏览器的<code>console</code>下看到如下的打印信息。</p><p><img src="/content/images/2016/03/37.png" alt="run result"></p><p>看到这些打印结果很好的说明了获取的参数是正确的。</p><h3 id="3，指定action触发的事件类型"><a href="#3，指定action触发的事件类型" class="headerlink" title="3，指定action触发的事件类型"></a>3，指定action触发的事件类型</h3><p>默认情况下<code>action</code>触发的是<code>click</code>事件，你可以指定其他事件，比如键盘按下事件<code>keypress</code>。事件的名字与<code>javascript</code>提供的名字是相似的，唯一不同的是Ember所识别是事件名字如果是由不同单词组成的需要用中划线分隔，比如<code>keypress</code>事件在Ember模板中你需要写成<code>key-press</code>。<br>注意：你指定事件的时候要把事件的名字作为<code>on</code>的属性。比如<code>on=&#39;key-press&#39;</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/myaction&quot;</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">triggerMe</span>&#x27; <span class="attr">on</span>=<span class="string">&quot;mouse-over&quot;</span>&#125;&#125;&gt;</span>鼠标移到我身上触发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">triggerMe: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;触发mouseover事件。。。。&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4，指定action触发事件的辅助按键"><a href="#4，指定action触发事件的辅助按键" class="headerlink" title="4，指定action触发事件的辅助按键"></a>4，指定<code>action</code>触发事件的辅助按键</h3><p>甚至你还可以指定按下键盘某个键后点击才触发<code>action</code>所指定的事件，比如按下键盘的<code>Alt</code>再点击才会触发事件。使用<code>allowedkeys</code>属性指定按下的是那个键。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">pressALTKeyTiggerMe</span>&#x27; <span class="attr">allowedkeys</span>=<span class="string">&#x27;alt&#x27;</span>&#125;&#125;&gt;</span>按下Alt点击触发我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5，禁止标签默认行为"><a href="#5，禁止标签默认行为" class="headerlink" title="5，禁止标签默认行为"></a>5，禁止标签默认行为</h3><p>在<code>action</code>助手内使用属性<code>preventDefault=false</code>可以禁止标签的默认行为，比如下面的a标签，如果<code>action</code>助手内没有定义这个属性那么你点击链接时只会执行执行的<code>action</code>动作，<code>a</code>标签默认的行为不会被触发。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> &#123;&#123;<span class="attr">action</span> &quot;<span class="attr">showDetailInfo</span>&quot; <span class="attr">preventDefault</span>=<span class="string">false&#125;&#125;</span>&gt;</span></span><br><span class="line">点我跳转</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6，可以把触发的事件作为参数传递到controller"><a href="#6，可以把触发的事件作为参数传递到controller" class="headerlink" title="6，可以把触发的事件作为参数传递到controller"></a>6，可以把触发的事件作为参数传递到<code>controller</code></h3><p><code>handlebars</code>的<code>action</code>助手真的是非常强大，你甚至可以把触发的事件作为<code>action</code>的参数直接传递到<code>controller</code>。不过你需要把<code>action</code>助手放在<code>javascript</code>的事件里。比如下面的代码当失去焦点时触发，并且通过<code>action</code>指定的<code>dandDidChange</code>把触发的事件<code>blur</code>传递到<code>controller</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>失去焦点时候触发<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;&#123;textValue&#125;&#125;</span> <span class="attr">onblur</span>=<span class="string">&#123;&#123;action</span> &#x27;<span class="attr">bandDidChange</span>&#x27;&#125;&#125; /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controllers/myaction.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line"></span><br><span class="line">    actions: &#123;</span><br><span class="line">        bandDidChange: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;event = &#x27;</span> + event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/content/images/2016/03/38.png" alt="result"></p><p>从控制台输出结果看出来<code>event</code>的值是一个对象并且是一个<code>focus</code>事件。<br>但是如果你在<code>action</code>助手内增加一个属性<code>value=&#39;target.value&#39;</code>(别写错只能是<code>target.value</code>)之后，传递到<code>controller</code>的则是输入框本身的内容。不再是事件对象本身。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;&#123;textValue&#125;&#125;</span> <span class="attr">onblur</span>=<span class="string">&#123;&#123;action</span> &#x27;<span class="attr">bandDidChange</span>&#x27; <span class="attr">value</span>=<span class="string">&quot;target.value&quot;</span>&#125;&#125; /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/content/images/2016/03/39.png" alt="result"></p><p>这个比较有意思，实现的功能与前面的参数传递类似的。</p><h3 id="7，action助手用在非点击元素上"><a href="#7，action助手用在非点击元素上" class="headerlink" title="7，action助手用在非点击元素上"></a>7，<code>action</code>助手用在非点击元素上</h3><pre><code>`action`助手可以用在任何的`DOM`元素上，不仅仅是用在能点击的元素上（比如`a`、`button`），但是用在其他非点击的元素上默认情况下是不可用的，也就是说点击也是无效的。比如用在`div`标签上，但是你点击`div`元素是没有反应的。如果你需要让`div`元素也能触发单击事件你需要给元素添加一个CSS类&#39;cursor:pointer;`。</code></pre><p>总的来说Ember的<code>action</code>助手与普通的javascript的事件是差不多的。用法基本上与javascript的事件相似。</p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>handlebars显示对象的键</title>
      <link href="/2020/01/18/ember-teach/templetes/handlebars%E6%98%BE%E7%A4%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%94%AE/"/>
      <url>/2020/01/18/ember-teach/templetes/handlebars%E6%98%BE%E7%A4%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>在实际的开发过程中你很有可能需要显示出对象数组的键或者值，如果你需要同时显示出对象的键和值你可以使用<code>{{#each-in}}</code>标签。<br><br>注意：<code>each-in</code>标签是<code>Ember 2.0</code>才有的功能，之前的版本是无法使用这个标签的，如果是2.0一下的版本会报错：<code>Uncaught Error: Assertion Failed: A helper named &#39;each-in&#39; coulad not be found</code><br><br>准备工作：使用<code>Ember CLI</code>生成一个<code>component</code>，与此同时会生成一个对应的模板文件。<br><br><code>ember generate component store-categories</code><br><br>执行上述命令得到下面的3个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app&#x2F;components&#x2F;store-categories.js</span><br><span class="line">app&#x2F;templates&#x2F;components&#x2F;store-categories.hbs</span><br><span class="line">tests&#x2F;integration&#x2F;components&#x2F;store-categories-test.js</span><br></pre></td></tr></table></figure><p>然后在<code>app/router.js</code>增加一个路由设置，在<code>map</code>方法里添加<code>this.route(&#39;store-categories&#39;);</code>；此时可以直接访问<a href="http://localhost:4200/store-categories">http://localhost:4200/store-categories</a>;</p><p><a href="http://guides.emberjs.com/v2.0.0/templates/displaying-the-keys-in-an-object/">http://guides.emberjs.com/v2.0.0/templates/displaying-the-keys-in-an-object/</a></p><h4 id="在组件中增加测试数据"><a href="#在组件中增加测试数据" class="headerlink" title="在组件中增加测试数据"></a>在组件中增加测试数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/components/store-categories.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    <span class="comment">// https://guides.emberjs.com/v2.4.0/components/the-component-lifecycle/</span></span><br><span class="line">    willRender: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//  设置一个对象到属性“categories”上，并且设置到categories属性上的对象结构是：key为字符串，value为数组</span></span><br><span class="line">        <span class="built_in">this</span>.set(<span class="string">&#x27;categories&#x27;</span>, &#123;</span><br><span class="line">          <span class="string">&#x27;Bourbons&#x27;</span>: [<span class="string">&#x27;Bulleit&#x27;</span>, <span class="string">&#x27;Four Roses&#x27;</span>, <span class="string">&#x27;Woodford Reserve&#x27;</span>],</span><br><span class="line">          <span class="string">&#x27;Ryes&#x27;</span>: [<span class="string">&#x27;WhistlePig&#x27;</span>, <span class="string">&#x27;High West&#x27;</span>]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p><code>willRender</code>方法在组件渲染的时候执行，更多有关组件的介绍会在后面章节——组件中介绍，想了解更多有关组件的介绍会在后面的文章中一一介绍，目前你暂且把组件当做是一个提取出来的公共HTML代码。</p><p>有了测试数据之后我们怎么去使用<code>each-in</code>标签遍历出数组的键呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- // app/templates/components/store-categories.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  &#123;&#123;#each-in categories as |category products|&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;category&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        &#123;&#123;#each products as |product|&#125;&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;product&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;&#123;/each&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  &#123;&#123;/each-in&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述模板代码中第一个位置参数<code>category</code>就是迭代器的键，第二个位置参数<code>product</code>就是键所对应的值。</p><p>为了显示效果，在<code>application.hbs</code>中调用这个组件，组件的调用非常简单，直接使用<code>{{组件名}}</code>方式调用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- //app/templates/application.hbs --&gt;</span></span><br><span class="line">&#123;&#123;store-categories&#125;&#125;</span><br></pre></td></tr></table></figure><p>渲染后结果如下图：</p><p><img src="/content/images/2016/03/23.png" alt="result"></p><h3 id="重渲染"><a href="#重渲染" class="headerlink" title="重渲染"></a>重渲染</h3><p><strong><code>{{each-in}}</code>表达式不会根据属性值变化而自动更新。</strong>上述示例中，如果你给属性<code>categories</code>增加一个元素值，模板上显示的数据不会自动更新。为了演示这个特性在组件中增加一个触发属性变化的按钮，首先需要在组件类<code>app/components/store-categories.js</code>中增加一个<code>action</code>方法（有关action会在后面的章节介绍，暂时把他看做是一个普通的js函数），然后在<code>app/templates/components/store-categories.hbs</code>中增加一个触发的按钮。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">    <span class="comment">// willRender方法在组件渲染的时候执行，更多有关组件的介绍会在后面章节——组件，中介绍</span></span><br><span class="line">    willRender: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//  设置一个对象到属性“categories”上，并且设置到categories属性上的对象结构是：key为字符串，value为数组</span></span><br><span class="line">        <span class="built_in">this</span>.set(<span class="string">&#x27;categories&#x27;</span>, &#123;</span><br><span class="line">          <span class="string">&#x27;Bourbons&#x27;</span>: [<span class="string">&#x27;Bulleit&#x27;</span>, <span class="string">&#x27;Four Roses&#x27;</span>, <span class="string">&#x27;Woodford Reserve&#x27;</span>],</span><br><span class="line">          <span class="string">&#x27;Ryes&#x27;</span>: [<span class="string">&#x27;WhistlePig&#x27;</span>, <span class="string">&#x27;High West&#x27;</span>]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        addCategory: <span class="function"><span class="keyword">function</span>(<span class="params">category</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;清空数据&#x27;</span>);</span><br><span class="line">            <span class="keyword">let</span> categories = <span class="built_in">this</span>.get(<span class="string">&#x27;categories&#x27;</span>);</span><br><span class="line">            <span class="comment">// console.log(categories);</span></span><br><span class="line">            categories[<span class="string">&#x27;Bourbons&#x27;</span>] = [];</span><br><span class="line">            <span class="comment">//  手动执行重渲染方法更新dom元素，但是并没有达到预期效果</span></span><br><span class="line">            <span class="comment">// 还不知道是什么原因</span></span><br><span class="line">            <span class="built_in">this</span>.rerender();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- // templates/components/store-categories.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  &#123;&#123;#each-in categories as |category products|&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;category&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        &#123;&#123;#each products as |product|&#125;&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;product&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;&#123;/each&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  &#123;&#123;/each-in&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&#123;&#123;action</span> &#x27;<span class="attr">addCategory</span>&#x27;&#125;&#125;&gt;</span>点击清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是很遗憾，即使是手动调用了<code>rerender</code>方法也没办法触发重渲染，界面显示的数据并没有发生变化。后续找到原因后再补上！！</p><h3 id="空数组处理"><a href="#空数组处理" class="headerlink" title="空数组处理"></a>空数组处理</h3><p>空数组处理与表达式<code>{{each}}</code>一样，同样是判断属性不是<code>null</code>、<code>undefined</code>、<code>[]</code>就显示出数据，否则执行<code>else</code>部分。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#each-in people as |name person|&#125;&#125;</span><br><span class="line">  Hello, &#123;&#123;name&#125;&#125;! You are &#123;&#123;person.age&#125;&#125; years old.</span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">  Sorry, nobody is here.</span><br><span class="line">&#123;&#123;/each-in&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以参考上一篇的<code>{{each}}</code>标签测试，这里不再赘述。<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>handlebars条件表达式</title>
      <link href="/2020/01/18/ember-teach/templetes/handlebars%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/01/18/ember-teach/templetes/handlebars%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><code>handlebars</code>模板提供了与一般语言类似的条件表达式，比如<code>if</code>、<code>if⋯⋯else⋯⋯</code>。<br>在介绍这些条件表达式之前，我们先做好演示的准备工作。首先我会使用<code>Ember CLI</code>命令创建<code>route</code>、<code>template</code>，然后在创建的<code>template</code>上编写<code>handlebars</code>模板代码。<br>先创建<code>route</code>：<br><br><code>ember generate route handlbars-conditions-exp-route</code><br><br>或者：<br><br><code>ember generate route handlbarsConditionsExpRoute</code><br><br>这两个命令创建的文件名都是一样的。最后<code>Ember CLI</code>会为我们自动创建2个主要的文件：<code>app/templates/handlbars-conditions-exp-route.hbs</code>  和 <code>app/routes/handlbars-conditions-exp-route.js</code></p><p><strong>注意：如果你使用的是驼峰式的名称<code>Ember CLI</code>会根据<code>Ember</code>的命名规范自动创建以中划线<code>-</code>分隔的名称。为什么我是先使用命令创建<code>route</code>而不是<code>template</code>呢？？因为你创建<code>route</code>的同时<code>Ember CLI</code>会自动给你创建一个对应的模板文件，如果你是先创建<code>template</code>的话，你还需要手动再执行创建<code>route</code>的命令，即你要执行2条命令(<code>ember generate template handlbars-conditions-exp-route</code>和<code>ember generate route handlbars-conditions-exp-route</code>)。</strong></p><p>得到演示所需要的文件后回到正题，开始介绍<code>handlebars</code>的条件判断表达式。<br>为了演示先在<code>route</code>文件添加模拟条件代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/handlebars-condition-exp-route.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    model: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">name</span>: <span class="string">&#x27;i2cao.xyz&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">isAtWork</span>: <span class="literal">false</span>, <span class="attr">isReading</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">        <span class="comment">// return &#123; enable: true &#125;;</span></span><br><span class="line">    &#125;       </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对于<code>handlebars-condition-exp-route.js</code>这个文件的内容会在后面路由这一章详细介绍，你可以暂且当做是返回了一个对象到模板上。与<code>EL</code>表达式非常类似，你可以用<code>.</code>获取对象里的属性值（如：<code>person.name</code>）。</p><h3 id="1，if表达式"><a href="#1，if表达式" class="headerlink" title="1，if表达式"></a>1，<code>if</code>表达式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/handlbars-conditions-exp-route.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- if判断标签，当model的值不为 false, undefined, null or [] 的时候显示标签内的内容 --&gt;</span></span><br><span class="line">&#123;&#123;#if model&#125;&#125;</span><br><span class="line">Welcome back, <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;model.name&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span> !</span><br><span class="line">&#123;&#123;/if&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/content/images/2016/03/17.png" alt="run result"></p><p>每个条件表达式都要以<code>#</code>开头并且要有对应的关闭标签，但是对于<code>if</code>标签来说不是必须要关闭标签的，这里简单举个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 没有关闭关闭标签的if用法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&#123;&#123;if flag &#x27;show&#x27; &#x27;hide&#x27;&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">测试内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个<code>if</code>标签相当于一个<code>三元运算符</code>,只是省略了<code>?</code>和<code>:</code>,他会根据属性<code>flag</code>的值判断是显示那个CSS类，如果<code>flag</code>的值不是<code>false</code>，不是<code>[]</code>空数组，也不是<code>null</code>，也不是<code>undefined</code>则<code>div</code>会加上CSS类<code>show</code>，模板编译之后的标签为<code>&lt;div class=&quot;show&quot;&gt;</code>，否则会加CSS类<code>hide</code>模板编译之后的标签为<code>&lt;div class=&quot;hide&quot;&gt;</code>。这样解释应该很容易理解了，其实说白了就一个<code>if</code>判断。没别的难点。。。</p><p>运行的时候需要注意两个地方，一个是浏览器执行的<code>URL</code>。如果你也是使用驼峰式的命名方式（创建命名：<code>ember generate route handlbarsConditionsExpRoute</code>），那你的<code>URL</code>跟我的是一样的，反正你只要记得执行的<code>URL</code>跟你创建的<code>route</code>的名称是一致的。当然这个名字是可以修改的。在<code>app/router.js</code>里面修改，在<code>Router.map</code>里的代码也是<code>Ember CLI</code>自动创建的。我们可以看到有一个<code>this.route(&#39;handlebarsConditionsExpRoute&#39;);</code>这个就是你的路由的名称。</p><p><strong>建议：创建之后的路由名字最好不要修改，<code>ember</code>会根据默认的命名规范查找<code>route</code>对应的<code>template</code>，如果你修改了<code>router.js</code>里的名字你需要同时修改<code>app/routes</code> 和 <code>app/templates</code> 里相对应的文件名。否则<code>URL</code>上的路由无法找到对应的<code>template</code>显示你的内容，在<code>router.js</code>里配置的名字必须与<code>app/routes</code>目录下的路由文件名字对应，模板的名字不一定要与路由配置名称对应，应该可以在<code>route</code>类中指定渲染的模板是那个，这个后面的内容会讲到（不是重点内容，了解即可）。<br>说明：可能你看到的我截图给你的有点差别，是因为我修改了主模板(<code>app/index.html</code>)你可以在这个文件里添加自己喜欢的样式，你一在<code>app/index.html</code>引入你的样式，或者在<code>ember-cli-build.js</code>引入第三方样式都可以，自定义的样式放在<code>public/assets/</code>下，如果没有目录可以自行手动创建，在此就不再赘述，这个不是本文的重点。</strong></p><h3 id="2，if⋯⋯else⋯⋯表达式"><a href="#2，if⋯⋯else⋯⋯表达式" class="headerlink" title="2，if⋯⋯else⋯⋯表达式"></a>2，<code>if⋯⋯else⋯⋯</code>表达式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/handlebars-conditions-exp-route.hbs --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- if⋯⋯else⋯⋯判断 --&gt;</span></span><br><span class="line">&#123;&#123;#if model.isAtWork&#125;&#125;</span><br><span class="line">Ship that code..<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123;else if model.isReading&#125;&#125;</span><br><span class="line">You can finish War and Peace eventually..<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">This is else block...</span><br><span class="line">&#123;&#123;/if&#125;&#125;</span><br></pre></td></tr></table></figure><p>结果是输出：This is else block…<br>因为<code>isAtWork</code>和<code>isReading</code>都是<code>false</code>。读者可以自己修改<code>app/routes/handlebars-condition-exp-route.js</code>里面对应的值然后查看输出结果。</p><h3 id="3，unless表达式"><a href="#3，unless表达式" class="headerlink" title="3，unless表达式"></a>3，<code>unless</code>表达式</h3><p><code>unless</code>表达式类似于非操作，当<code>model.isReading</code>值为<code>false</code>的时候会输出表达式里面的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/handlebars-conditions-exp-route.hbs --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 非判断 --&gt;</span></span><br><span class="line">&#123;&#123;#unless model.isReading&#125;&#125;</span><br><span class="line">unless.....</span><br><span class="line">&#123;&#123;/unless&#125;&#125;</span><br></pre></td></tr></table></figure><p>如果<code>isReading</code>值为<code>false</code>会输出<code>unless⋯</code>否则不进入表达式内。</p><h3 id="4，在HTML标签内使用表达式"><a href="#4，在HTML标签内使用表达式" class="headerlink" title="4，在HTML标签内使用表达式"></a>4，在HTML标签内使用表达式</h3><p><code>handlebars</code>表达式可以直接在嵌入到<code>HTML</code>标签内。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/handlebars-conditions-exp-route.hbs --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以把表达式直接嵌入在某个标签中，当enable的值为true则结果是增加了一个类(css的类)enable，否则增加&#x27;disable&#x27; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&#123;&#123;if</span> <span class="attr">enable</span> &#x27;<span class="attr">enable</span>&#x27; &#x27;<span class="attr">disable</span>&#x27;&#125;&#125;&gt;</span>enable or disable<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说白了其实就是一个三目运算。不难理解。不过这个例子与第一点讲没有关闭标签的<code>if</code>例子一致，就当是复习吧=^=。</p><p>上述就是<code>handlebars</code>中最常用的几个条件表达式，自己作为小例子演示一遍肯定懂了，对于有点惊讶的开发者甚至看一遍即可。非常的简单，可能后面还会有其他的条件判断的表达式，后续会补上。<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>handlebars遍历标签</title>
      <link href="/2020/01/18/ember-teach/templetes/handlebars%E9%81%8D%E5%8E%86%E6%A0%87%E7%AD%BE/"/>
      <url>/2020/01/18/ember-teach/templetes/handlebars%E9%81%8D%E5%8E%86%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<p>采用与上一篇文章一样的方法，使用 <code>ember generate route handlebars-each</code> 命令创建了一个路由文件和一个对应的模板文件。<br>这一篇将为你介绍遍历标签，数组的遍历几乎在任何的常用的开发语言中都能看到，也是使用非常广泛的一个功能。下面我将为大家介绍<code>handlebars</code>的遍历标签，其使用方式与EL表达式几乎是一样的。我想你看一遍下来肯定也能明白了⋯⋯废话少说，下面直接上演示代码吧！！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/handlebars.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个用于测试的对象数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    <span class="comment">//  重写model回调函数，初始化测试数据</span></span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            Ember.Object.create(&#123; <span class="attr">name</span>: <span class="string">&#x27;chen&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span>&#125;),</span><br><span class="line">            Ember.Object.create(&#123; <span class="attr">name</span>: <span class="string">&#x27;i2cao.xyz&#x27;</span>, <span class="attr">age</span>: <span class="number">0.2</span>&#125;),</span><br><span class="line">            Ember.Object.create(&#123; <span class="attr">name</span>: <span class="string">&#x27;ibeginner.sinaapp.com&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span>&#125;),</span><br><span class="line">            Ember.Object.create(&#123; <span class="attr">name</span>: <span class="string">&#x27;ubuntuvim.xyz&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span>&#125;)</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如上述所示，在<code>route</code>类里构建了一个用于测试的对象数组，每个对象有2个属性（<code>name</code>，<code>age</code>）。<br>下面是显示数据的模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- // app/templates/handlebars.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;! 遍历在route里设置的对象数组 &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello everyone, My name is &#123;&#123;item.name&#125;&#125; and &#123;&#123;item.age&#125;&#125; year old.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有没有似曾相似的感觉呢！！跟EL表达式的<code>forEach</code>标签几乎是一样的。不出意外你应该可以看到如下的结果。</p><p><img src="/content/images/2016/03/21.png" alt="run result"></p><p><strong>提醒：记得此时运行的URL是刚刚新建的route。</strong><br>操作数组的时候注意使用官方建议的方法（如，新增使用<code>pushObject</code>而不是<code>push</code>），请看<a href="http://blog.ddlisting.com/2016/03/17/ember-js-ru-men-zhi-nan-zhi-liu-mei-ju-enumerables/">前面的文章</a>。</p><h3 id="1，访问数组下标"><a href="#1，访问数组下标" class="headerlink" title="1，访问数组下标"></a>1，访问数组下标</h3><p>有些情况我们可能需要获取数组的下标，比如有些时候可能会下标作为数据的序号。请看下面的演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- // app/templates/handlebars.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;! 遍历在route里设置的对象数组 &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span></span></span><br><span class="line"><span class="tag">    &#123;&#123;#<span class="attr">each</span> <span class="attr">model</span> <span class="attr">as</span> |<span class="attr">item</span> <span class="attr">index</span>|&#125;&#125;</span></span><br><span class="line">        &lt;li&gt;&#123;&#123;index&#125;&#125; Hello everyone, My name is &#123;&#123;item.name&#125;&#125; and &#123;&#123;item.age&#125;&#125; year old.&lt;/li&gt;</span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过这个下标是从0开始的，且你还不能想jstl中的<code>forEach</code>标签可以这样写<code>{{index+1}}</code>，<code>handlebars</code>不允许这么写！如果你想改成从1开始那么可以使用helper实现。正如网友<code>@吧台丶香槟</code>所说的方法。有关helper请看<a href="http://blog.ddlisting.com/2016/03/23/ember-js-ru-men-zhi-nan-zhi-shi-ba-gong-ju-lei-de-zhu-shou/">Ember.js 入门指南之十八工具类的助手</a>。</p><h3 id="2，空数组处理"><a href="#2，空数组处理" class="headerlink" title="2，空数组处理"></a>2，空数组处理</h3><p>在each标签内还可以使用<code>{{else}}</code>，当数组为空的时候就会执行else代码块。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;! 空数组处理，如果从route返回的model为空，则会执行else代码块的代码 &#125;&#125;</span><br><span class="line">&#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">    Hello, &#123;&#123;item.name&#125;&#125;</span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">    Sorry, nobody is here.</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><p>为了测试效果，请把<code>app/routes/handlebars.js</code>的<code>return</code>语句改成<code>return []</code>。此时返回到模板上的是一个空数组，结果也和预期的一致，页面显示的是“Sorry, nobody is here.”。</p><p>上述的内容就是<code>handlebars</code>的<code>each</code>遍历使用实例。应该也是没什么难度的⋯⋯<br><br></p><p>最后感谢的<a href="http://t.qq.com/falaoyunfeiluan">@吧台丶香槟</a>建议。<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>link-to helper</title>
      <link href="/2020/01/18/ember-teach/templetes/link-to%20helper/"/>
      <url>/2020/01/18/ember-teach/templetes/link-to%20helper/</url>
      
        <content type="html"><![CDATA[<h3 id="1，link-to助手常规使用"><a href="#1，link-to助手常规使用" class="headerlink" title="1，link-to助手常规使用"></a>1，link-to助手常规使用</h3><p><code>link-to</code>助手表达式渲染之后就是一个<code>a</code>标签。而<code>a</code>标签的<code>href</code>属性的值是根据路由生成的，与路由的设置是息息相关的。并且每个设置的路由名称都是有着对应的关系的。<br>为了演示效果，用命令生成了一个<code>route</code>（或者手动创建文件）并获取测试数据。本文结合路由设置，随便串讲了一些路由方面的知识，如果你能看懂最好了，看不懂也不要紧后面会有一整章介绍路由。</p><h4 id="1-增加子路由"><a href="#1-增加子路由" class="headerlink" title="1, 增加子路由"></a>1, 增加子路由</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routers.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./config/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Router = Ember.Router.extend(&#123;</span><br><span class="line">  location: config.locationType </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;detail&#x27;</span>, &#123;<span class="attr">path</span>: <span class="string">&#x27;/:post_id&#x27;</span>&#125;);  <span class="comment">//指定子路由，:post_id会自动转换为数据的id</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><p>如上述代码，在<code>posts</code>下增加一个子路由<code>detail</code>。并且指定路由名为<code>/:post_id</code>，<code>:post_id</code>是一个动态字段，一般情况下默认为<code>model</code>的<code>id</code>属性。经过模板渲染之后会得到类似于<code>posts/1</code>、<code>posts/2</code>这种形式的路由。</p><h4 id="2-在route初始化数据"><a href="#2-在route初始化数据" class="headerlink" title="2, 在route初始化数据"></a>2, 在route初始化数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Ember.$.getJSON(<span class="string">&#x27;https://api.github.com/repos/emberjs/ember.js/pulls&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用Ember提供的方法直接从远程获取测试数据。测试数据的格式可以用浏览器直接打开上面的URL就可以看到。</p><h4 id="3，添加显示的模板"><a href="#3，添加显示的模板" class="headerlink" title="3，添加显示的模板"></a>3，添加显示的模板</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //  app/templates/posts.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-10 col-xs-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 70px;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置路由，路由的层级与router.js里定义的要一致 --&gt;</span></span><br><span class="line">                     &#123;&#123;#link-to &#x27;posts.detail&#x27; item&#125;&#125;</span><br><span class="line">                            &#123;&#123;item.title&#125;&#125;</span><br><span class="line">                        &#123;&#123;/link-to&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;&#123;/each&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接用<code>{{{{#each}}</code>遍历出所有的数据，并显示在界面上，由于数据比较多可能显示的比较慢，特别是页面刷新之后看到一片空白，请不要急着刷新页面，等待一下即可⋯⋯。下图是结果的一部分：</p><p><img src="/content/images/2016/03/24.png" alt="结果截图"></p><p>我们查看页面的源代码，可以看到<code>link-to</code>助手渲染之后的HTML代码，自动生成了URL，在<code>router.js</code>里配置的<code>post_id</code>渲染之后都被<code>model</code>的<code>id</code>属性值代替了。</p><p><img src="/content/images/2016/03/25.png" alt="run result"></p><p>如果你没有测试数据，你还可直接把<code>link-to</code>助手的<code>post_id</code>写死，可以直接把数据的<code>id</code>值设置到<code>link-to</code>助手上。在模板文件的<code>ul</code>标签下一行增加如下代码，在<code>link-to</code>助手中指定<code>id</code>为<code>1</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 增加一条直接指定id的数据 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;#link-to &#x27;posts.detail&#x27; 1&#125;&#125;增加一条直接指定id的数据&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染之后的HTML代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;ember404&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/posts/1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ember-view&quot;</span>&gt;</span>增加一条直接指定id的数据</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到与前面使用动态数据渲染之后的<code>href</code>的格式是一样的。如果你想设置某个<code>a</code>标签是激活状态，你可以直接在标签上增加一个CSS类（<code>class=”active”</code>）。</p><h3 id="2，link-to助手设置多个动态字段"><a href="#2，link-to助手设置多个动态字段" class="headerlink" title="2，link-to助手设置多个动态字段"></a>2，link-to助手设置多个动态字段</h3><p>开发中，路由的路径经常不是2层的（<code>post/1</code>）也有可能是多层次的（<code>post/1/comment</code>、<code>post/1/2</code>或者<code>post/1/comment/2</code>等等形式。），如果是这种形式的URL在<code>link-to</code>助手上又要怎么去定义呢？<br>老样子，在演示模板之前还是需要先构建好测试数据以及修改对应的路由设置，此时的路由设置是多层的，因为<code>link-to</code>助手渲染之后得到的href属性值就是根据路由生成的！！！这个必须要记得⋯⋯</p><h4 id="1-一个路由下有个多子路由"><a href="#1-一个路由下有个多子路由" class="headerlink" title="1. 一个路由下有个多子路由"></a>1. 一个路由下有个多子路由</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routers.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./config/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Router = Ember.Router.extend(&#123;</span><br><span class="line">  location: config.locationType </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this.route(&#x27;handlebarsConditionsExpRoute&#x27;);</span></span><br><span class="line">  <span class="comment">// this.route(&#x27;handlebars-each&#x27;);</span></span><br><span class="line">  <span class="comment">// this.route(&#x27;store-categories&#x27;);</span></span><br><span class="line">  <span class="comment">// this.route(&#x27;binding-element-attributes&#x27;);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  link-to实例理由配置</span></span><br><span class="line">  <span class="comment">// this.route(&#x27;link-to-helper-example&#x27;, function() &#123;</span></span><br><span class="line">  <span class="comment">//  this.route(&#x27;edit&#x27;, &#123;path: &#x27;/:link-to-helper-example_id&#x27;&#125;);</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//指定子路由，:post_id会自动转换为数据的id</span></span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;detail&#x27;</span>, &#123;<span class="attr">path</span>: <span class="string">&#x27;/:post_id&#x27;</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//增加一个comments路由</span></span><br><span class="line">      <span class="built_in">this</span>.route(<span class="string">&#x27;comments&#x27;</span>);</span><br><span class="line">      <span class="comment">// 第二个子路由comment，并且路由是个动态字段comment_id</span></span><br><span class="line">      <span class="built_in">this</span>.route(<span class="string">&#x27;comment&#x27;</span>, &#123;<span class="attr">path</span>: <span class="string">&#x27;/:comment_id&#x27;</span>&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><p>如果是上述配置，渲染之后得到的路由格式<code>posts/detail/comments</code>。由于获取远程数据比较慢直接注释掉<code>posts.js</code>里的<code>model</code>回调方法，就直接使用写死id的方式。<br>注意：上述配置中，在路由<code>detail</code>下有2个子路由，一个是<code>comments</code>，一个是<code>comment</code>，并且这个是一个动态段。由此模板渲染之后应该是有2种形式的URL。一种是<code>posts.detail.comments</code>（<code>posts/1/comments</code>），另一种是<code>posts.detail.comment</code>（<code>posts/1/2</code>）。如果能理解这个那<code>route</code>嵌套层次再多应该也能看明白了！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //  app/templates/posts.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-10 col-xs-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 70px;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 增加一条直接指定id的数据 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">!—-</span> 注意此时只有一个动态段，所以只有一个数字<span class="attr">1</span>，<span class="attr">Ember</span>会根据顺序自动匹配到动态段的位置上。 <span class="attr">--</span>&gt;</span></span><br><span class="line">                        &#123;&#123;#link-to &#x27;posts.detail.comments&#x27; 1 class=&#x27;active&#x27;&#125;&#125;</span><br><span class="line">                        posts.detail.comments（posts/1/comments）形式</span><br><span class="line">                        &#123;&#123;/link-to&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">!—-</span></span></span><br><span class="line"><span class="tag">                        注意此时有<span class="attr">2</span>个动态段，所以有<span class="attr">2</span>个数字<span class="attr">1</span>，<span class="attr">2</span>，<span class="attr">Ember</span>会根据顺序自动匹配到动态段的位置上。</span></span><br><span class="line"><span class="tag">                        第一个数字<span class="attr">1</span>会匹配到第一个动态段<span class="attr">post_id</span>上，第二个数字<span class="attr">2</span>会匹配到动态段<span class="attr">comment_id</span>上</span></span><br><span class="line"><span class="tag">                         <span class="attr">--</span>&gt;</span></span><br><span class="line">                        &#123;&#123;#link-to &#x27;posts.detail.comment&#x27; 1 2 class=&#x27;active&#x27;&#125;&#125;</span><br><span class="line">                        posts.detail.comment（posts/1/2）形式</span><br><span class="line">                        &#123;&#123;/link-to&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染之后的结果如下：</p><p><img src="/content/images/2016/03/26.png" alt="run result"></p><p>如果是动态段的一般都是<code>model</code>的<code>id</code>代替，如果不是动态段的直接显示配置的路由名称。</p><h4 id="2-多层路由嵌套"><a href="#2-多层路由嵌套" class="headerlink" title="2, 多层路由嵌套"></a>2, 多层路由嵌套</h4><p>上面演示了多个子路由的情况，下面接着介绍一个路由有多个层次，并且是有个多个动态段和非动态段组成的情况。<br>首先修改路由配置，把<code>comments</code>设置为<code>detail</code>的子路由。并且在<code>comments</code>下在设置一个动态段的子路由<code>comment_id</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routers.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./config/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Router = Ember.Router.extend(&#123;</span><br><span class="line">  location: config.locationType </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//指定子路由，:post_id会自动转换为数据的id</span></span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;detail&#x27;</span>, &#123;<span class="attr">path</span>: <span class="string">&#x27;/:post_id&#x27;</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//增加一个comments路由</span></span><br><span class="line">      <span class="built_in">this</span>.route(<span class="string">&#x27;comments&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 在comments下面再增加一个子路由comment，并且路由是个动态字段comment_id</span></span><br><span class="line">        <span class="built_in">this</span>.route(<span class="string">&#x27;comment&#x27;</span>, &#123;<span class="attr">path</span>: <span class="string">&#x27;/:comment_id&#x27;</span>&#125;);</span><br><span class="line">      &#125;);   </span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><p>模板使用路由的方式<code>posts.detail.comments.comment</code>。正常情况应该生成类似<code>posts/1/comments/2</code>这种格式的URL。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //  app/templates/posts.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-10 col-xs-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 70px;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                            一共设置了4层路由</span></span><br><span class="line"><span class="comment">                         --&gt;</span></span><br><span class="line">                        &#123;&#123;#link-to &#x27;posts.detail.comments.comment&#x27; 1 2 class=&#x27;active&#x27;&#125;&#125;</span><br><span class="line">                        posts.detail.comments.comment（posts/1/comments/2）形式</span><br><span class="line">                        &#123;&#123;/link-to&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染之后得到的HTML如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 一共设置了4层路由 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;ember473&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/posts/1/comments/2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active ember-view&quot;</span>&gt;</span>                      posts.detail.comments.comment（posts/1/comments/2）形式</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果正如我们预想的组成了4层路由（<code>/posts/1/comment/2</code>）。<br>补充内容。<br>对于上述第二点多层路由嵌套的情况你还可以使用下面的方式设置路由和模板，并且可用同时设置了<code>/posts/1/comments</code>和<code>/posts/1/comments/2</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.route(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//指定子路由，:post_id会自动转换为数据的id</span></span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;detail&#x27;</span>, &#123;<span class="attr">path</span>: <span class="string">&#x27;/:post_id&#x27;</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//增加一个comments路由</span></span><br><span class="line">        <span class="built_in">this</span>.route(<span class="string">&#x27;comments&#x27;</span>);</span><br><span class="line">        <span class="comment">// 路由调用：posts.detail.comment</span></span><br><span class="line">        <span class="comment">// 注意区分与前面的设置方式，detai渲染之后会被/:post_id替换，comment渲染之后直接被comments/:comment_id替换了，</span></span><br><span class="line">        <span class="comment">//会得到如posts/1/comments/2这种形式的URL</span></span><br><span class="line">        <span class="built_in">this</span>.route(<span class="string">&#x27;comment&#x27;</span>, &#123;<span class="attr">path</span>: <span class="string">&#x27;comments/:comment_id&#x27;</span>&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //  app/templates/posts.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-10 col-xs-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 70px;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">--</span> 设置的方式不变 <span class="attr">--</span>&gt;</span></span><br><span class="line">                    &#123;&#123;#link-to &#x27;posts.detail.comments&#x27; 1 class=&#x27;active&#x27;&#125;&#125;</span><br><span class="line">                        posts.detail.comments（/posts/1/comments）形式</span><br><span class="line">                        &#123;&#123;/link-to&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                            一共设置了4层路由，与前面的设置方式一样</span></span><br><span class="line"><span class="comment">                         --&gt;</span></span><br><span class="line">                        &#123;&#123;#link-to &#x27;posts.detail.comment&#x27; 1 2 class=&#x27;active&#x27;&#125;&#125;</span><br><span class="line">                        posts.detail.comments.comment（posts/1/comments/2）形式</span><br><span class="line">                        &#123;&#123;/link-to&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染之后的结果如下：</p><p><img src="/content/images/2016/03/27.png" alt="渲染之后的结果"></p><p>两种方式定义的路由渲染的结果是一样的，看个人喜欢了，定义方式也是非常灵活的。第一种定义方式看着比较清晰，看代码就知道是一层层的。但是需要写更多代码。第二种定义方式更加简洁，不过看不出嵌套的层次。<br>    对于上述route的设置如果还不能理解也不要紧，后面会有一整章是介绍路由的，然而你能结合link-to助手理解了路由设置对于后面route章节的学习是非常有帮助的。</p><h4 id="3-在link-to助手内增加额外属性"><a href="#3-在link-to助手内增加额外属性" class="headerlink" title="3, 在link-to助手内增加额外属性"></a>3, 在link-to助手内增加额外属性</h4><p><code>handlebars</code>允许你直接在<code>link-to</code>助手增加额外的属性，经过模板渲染之后<code>a</code>标签就有了增加的额外属性了。<br>比如你可用为<code>a</code>标签增加CSS的<code>class</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;link-to &quot;show text info&quot; &#x27;posts.detail&#x27; 1 class=&quot;btn btn-primary&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;#link-to &quot;posts.detail&quot; 1 class=&quot;btn btn-primary&quot;&#125;&#125;show text info&#123;&#123;/link-to&#125;&#125;</span><br></pre></td></tr></table></figure><p>上述两种写法都是可以的，渲染的结果也是一样的。渲染之后的HTML为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;ember434&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/posts/1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary ember-view&quot;</span>&gt;</span>show text info<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：上述两种方式的写法所设置的参数的位置不能调换。但是官网没有看到这方面的说明，有可能是我的演示实例的问题，如果读者你的可用欢迎给我留言。<br>第一种方式，显示的文字必须放在最前面，并且中间的参数是路由设置，最有一个参数是额外的属性设置，如果你还要其他的属性需要设置仍然只能放在最后面。<br>第二章方式的参数位置也是有要求的，第一个参数必须是路由设置，后面的参数设置额外的属性。<br>对于渲染之后的HTML代码中出现标签<code>id</code>为<code>ember</code>，或者<code>ember-xxx</code>，这些属性都是Ember默认生成的，我们可以暂时不用理它。<br>综合，本来这篇是讲解<code>link-to</code>的，但是由于涉及到了<code>route</code>的配置就顺便讲讲，有点难度，主要在路由的嵌套这个知识点上，但是对于后面的<code>route</code>这一章的学习是很有帮助的，<code>route</code>的设置几乎都是为URL设置的。这两者是紧密关联的！<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内置Helper</title>
      <link href="/2020/01/18/ember-teach/templetes/%E5%86%85%E7%BD%AEHelper/"/>
      <url>/2020/01/18/ember-teach/templetes/%E5%86%85%E7%BD%AEHelper/</url>
      
        <content type="html"><![CDATA[<h1 id="内置Helper方法"><a href="#内置Helper方法" class="headerlink" title="内置Helper方法"></a>内置Helper方法</h1><p>上一节我们学习了如何编写一个Helper。一个Helper是一个可以用在任何模板的简单方法。Ember自带了一些可以使你开发模板变简单的Helper方法，这些方法允许你更灵活的向其他Helper方法或组件中传输数据。</p><h2 id="使用Helper方法动态的获取属性"><a href="#使用Helper方法动态的获取属性" class="headerlink" title="使用Helper方法动态的获取属性"></a>使用Helper方法动态的获取属性</h2><p><code>{{get}}</code>方法可以帮助你动态地发送一个变量的值到另一个Helper方法或组件中，如果你想输出某些<code>计算属性</code>中的一个值的时候,这会非常有用。</p><figure class="highlight hbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name"><span class="builtin-name">get</span></span> address part&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>如果计算属性<code>part</code>返回值为<code>zip</code>，那这条语句会显示<code>this.get(&#39;address.zip&#39;)</code>的结果；如果返回值为<code>city</code>，那便会显示<code>this.get(&#39;address.city&#39;)</code>的结果。</p><h2 id="内置Helper方法的嵌套"><a href="#内置Helper方法的嵌套" class="headerlink" title="内置Helper方法的嵌套"></a>内置Helper方法的嵌套</h2><p>上一节我们提到过Helper方法允许嵌套使用，内置的方法同样可以。举个栗子,<code>{{concat}}</code>可以将参数中的数字动态地发送到组件或Helper方法中，然后将其合并为一个独立的参数。</p><figure class="highlight hbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name"><span class="builtin-name">get</span></span> <span class="string">&quot;foo&quot;</span> (<span class="name"><span class="builtin-name">concat</span></span> <span class="string">&quot;item&quot;</span> index)&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>当<code>index</code>为<code>1</code>时，这条语句会显示<code>this.get(&#39;foo.item1&#39;)</code>的结果；当<code>index</code>为其他值时，以此类推。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具类的助手</title>
      <link href="/2020/01/18/ember-teach/templetes/%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E5%8A%A9%E6%89%8B/"/>
      <url>/2020/01/18/ember-teach/templetes/%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E5%8A%A9%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p>本篇主要介绍格式转换、自定义<code>helper</code>、自定义<code>helper</code>参数、状态<code>helper</code>、HTML标签转义这几个方面的东西。</p><p>按照文章惯例先准备好测试所需要的数据、文件。仍然是使用<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令，这次我们创建的是<code>helper</code>、<code>controller</code>、<code>route</code>（创建<code>route</code>会自动创建<code>template</code>）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ember generate helper my-helper</span><br><span class="line">ember generate controller tools-helper</span><br><span class="line">ember generate route tools-helper</span><br></pre></td></tr></table></figure><h3 id="1，自定义helper"><a href="#1，自定义helper" class="headerlink" title="1，自定义helper"></a>1，自定义<code>helper</code></h3><p>自定义助手非常简答直接使用<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令生成就可以了。当然你也可以手动创建，自定义的助手都是放在<code>app/helpers</code>目录下。Ember会根据模板上使用的助手自动到这个目录查找。定义了<code>helper</code>之后你就可以直接在模板上使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //app/templates/tools-helper.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line">my-helper: &#123;&#123;my-helper&#125;&#125;</span><br></pre></td></tr></table></figure><p>程序没有报错，但是什么也没有显示。是的什么也没有显示。没有显示就对了。因为我们对于刚刚创建的<code>app/helpers/my-helper.js</code>没有做任何的修改。你可以看这个文件的代码。直接返回了<code>params</code>，目前来说这个参数是空的。修改这个文件，直接返回一个字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/helpers/my-helper.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">myHelper</span>(<span class="params">params<span class="regexp">/*, hash*/</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Helper.helper(myHelper);</span><br></pre></td></tr></table></figure><p>此时可以在页面上看到直接打印了“hello world!”这个字符串。这就是一个最简单的自定义<code>helper</code>，不过这么简单<code>helper</code>显然是没啥用的。Ember的作者肯定不会这么傻的，接着下面介绍<code>helper</code>的参数。<br>注意：使用模板的名字跟文件名是一致的。不同单词使用<code>-</code>分隔，虽然这个命名规则不是强制性的但是Ember建议你这么做，Ember会自动根据<code>helper</code>的名字找到对应的自定义的<code>helper</code>，然后执行<code>helper</code>里名字为<code>myHelper</code>（名字是文件名的驼峰式命名）的方法，在这个方法里你可以实现你需要的逻辑。这些工作Ember自动帮你做了，不需要你编写解析的代码。</p><h4 id="1，helper无名参数"><a href="#1，helper无名参数" class="headerlink" title="1，helper无名参数"></a>1，<code>helper</code>无名参数</h4><p>上面的代码定义了一个最简单的helper，不过没啥用，Ember允许在自定义的helper上添加自定义的参数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my-helper-param: &#123;&#123;my-helper &#x27;chen&#x27; &#x27;ubuntuvim&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><p>在这个自定义的<code>helper</code>中增加了两个参数，既然有了参数那么又有什么用呢？当然是有用的，你可以在自定义的<code>helper</code>中获取参数，获取模板的参数有两种方式。<br><br><strong>写法一</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/helpers/my-helper.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">myHelper</span>(<span class="params">params<span class="regexp">/*, hash*/</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取模板上的参数</span></span><br><span class="line">    <span class="keyword">var</span> p1 = params[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> p2 = params[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;p1 = &#x27;</span> + p1 + <span class="string">&quot;, p2 = &quot;</span> + p2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p1 + <span class="string">&quot; &quot;</span> + p2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Helper.helper(myHelper);</span><br></pre></td></tr></table></figure><p><br><strong>写法二</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/helpers/my-helper.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">myHelper</span>(<span class="params">[arg1, arg2]</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;p1 = &#x27;</span> + arg1 + <span class="string">&quot;, p2 = &quot;</span> + arg2);</span><br><span class="line">    <span class="keyword">return</span> arg1 + <span class="string">&quot; &quot;</span> + arg2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Helper.helper(myHelper);</span><br></pre></td></tr></table></figure><p>参数很多的情况使用第一种方式用循环获取参数比较方便，参数少情况第二种方式更加简便，直接使用！</p><p><strong>注意：参数的顺序与模板传入的顺序一致。</strong></p><p>页面刷新之后可以在页面或者浏览器控制台看到在<code>helper</code>上设置的参数值了吧！！如果你的程序没有错误在浏览器上你也会得到下图的结果：</p><p><img src="/content/images/2016/03/52.png" alt="result"></p><p>第一行因为在模板上没有传入参数所以是<code>undefined</code>，第二行传入了参数，并且直接从<code>helper</code>返回显示。</p><h4 id="2，helper命名参数"><a href="#2，helper命名参数" class="headerlink" title="2，helper命名参数"></a>2，<code>helper</code>命名参数</h4><p>上一点演示了在模板中传递无名的参数，这一小节讲为你介绍有名字的参数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my-helper-named-param: &#123;&#123;my-helper firstName=&#x27;chen&#x27; lastName=&#x27;ubuntuvim&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><p>相比于第一种使用方式给每个参数增加了参数名。那么<code>helper</code>处理类有要怎么去获取这些参数呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/helpers/my-helper.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于命名参数使用namedArgs获取</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">myHelper</span>(<span class="params">params, namedArgs</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;namedArgs = &#x27;</span> + namedArgs);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;params = &#x27;</span> + params);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;=========================&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> namedArgs.firstName + <span class="string">&quot;, &quot;</span> + namedArgs.lastName; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Helper.helper(myHelper);</span><br></pre></td></tr></table></figure><p>获取命名参数使用<code>namedArgs</code>，其实你也可以按照前面的方法使用<code>params</code>获取参数值。你在第一行打印语句上打上断点，是浏览器进入debug模式，但不执行，你会发现<code>params</code>一开始是有值<code>namedArgs</code>没有值，但是执行到最后正好相反，<code>params</code>的值被置空了，<code>namedArgs</code>却有了模板设置的值，你可以猜想下，Ember可能是把<code>params</code>的值赋值到<code>namedArgs</code>上了，不同之处是<code>namedArgs</code>是以对象属性的方式取值并且不用关心参数的顺序问题，<code>params</code>是以数组的方式取值需要关心参数的顺序。</p><p><img src="/content/images/2016/03/49.png" alt="result"></p><h3 id="2，时间格式化"><a href="#2，时间格式化" class="headerlink" title="2，时间格式化"></a>2，时间格式化</h3><p>做开发的都应该遇到过数字或者时间格式问题，特别是时间格式问题应该是最普遍遇到的。不同的项目时间格式往往不同，有<code>yyyy-DD-mm</code>类型的有<code>yyyyMMdd</code>类型以及其他类型。</p><p>同样的Ember模板也给我们提供了类似的解决办法，那就是自定义格式化方法。通过自定义<code>helper</code>实现数据的格式化。</p><ol><li>创建格式化<code>helper</code>：<code>ember generate helper format-date</code></li><li>在<code>controller</code>初始化一个时间数据。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/controllers/tools-helper.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    currentDate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>默认情况下显示数据<code>currentDate</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //app/templates/tools-helper.hbs  --&gt;</span></span><br><span class="line">&#123;&#123; currentDate&#125;&#125;</span><br></pre></td></tr></table></figure><p>此时显示的默认的数据格式。<br>运行<a href="http://localhost:4200/tools-helper">http://localhost:4200/tools-helper</a>，可以在页面看到：<code>Mon Sep 21 2015 23:46:03 GMT+0800 (CST) </code>这种格式的时间。显然不太合法我们的习惯，看着都觉得不舒服。那下面使用自定义的<code>helper</code>格式化日期格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/helpers/format-data.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意：方法名字是文件名去掉中划线变大写，驼峰式写法</span></span><br><span class="line"><span class="comment"> * 或者你也可以直接作为helper的内部函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>params 从助手&#123;&#123;format-data&#125;&#125;传递过来的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">params<span class="regexp">/*, hash*/</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;params = &#x27;</span> + params);</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">Date</span>.parse(params);</span><br><span class="line">    <span class="keyword">var</span> dd = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(d)).toLocaleString().replace(<span class="regexp">/:\d&#123;1,2&#125;$/</span>,<span class="string">&#x27; &#x27;</span>);  <span class="comment">//  2015/9/21 下午11:21</span></span><br><span class="line">    <span class="keyword">var</span> v = dd.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>).substr(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Helper.helper(formatDate);</span><br></pre></td></tr></table></figure><p>或者你也可以这样写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Helper.helper(<span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">params<span class="regexp">/*, hash*/</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">Date</span>.parse(params);</span><br><span class="line">    <span class="keyword">var</span> dd = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(d)).toLocaleString().replace(<span class="regexp">/:\d&#123;1,2&#125;$/</span>,<span class="string">&#x27; &#x27;</span>);  <span class="comment">//  2015/9/21 下午11:21</span></span><br><span class="line">    <span class="keyword">var</span> v = dd.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>).substr(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为了简便，直接就替换字符，修改时间分隔字 <code>/</code>为<code>-</code>。   然后修改显示的模板，使用自定义的<code>helper</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //app/templates/tools-helper.hbs  --&gt;</span></span><br><span class="line">&#123;&#123;format-date currentDate&#125;&#125;</span><br></pre></td></tr></table></figure><p>此时页面上显示的时间是我们熟悉的时间格式：</p><p><img src="/content/images/2016/03/50.png" alt="result"></p><p>上面介绍的是简答的用法，Ember还允许你传入时间的格式（<code>format</code>），以及本地化类型（<code>locale</code>）。</p><ol><li>用命令新建一个<code>helper</code>：<code>ember generate helper format-date-time</code></li><li>在<code>controller</code>类里新增两个用于测试的属性<code>cDate</code>和<br><code>currentTime</code>。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/controllers/tools-helper.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    currentDate: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    cDate: <span class="string">&#x27;2015-09-22&#x27;</span>,</span><br><span class="line">    currentTime: <span class="string">&#x27;00:22:32&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //app/templates/tools-helper.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">format-date-time: &#123;&#123;format-date-time currentDate cDate currentTime format=&quot;yyyy-MM-dd h:mm:ss&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">format-date-time-local: &#123;&#123;format-date-time currentDate cDate currentTime format=&quot;yyyy-MM-dd h:mm:ss&quot; locale=&quot;en&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>在助手<code>format-date-time</code>上一共有4个属性。<code>cDate</code>和<code>currentTime</code>是从上下文获取值的变量，<code>format</code>和<code>locale</code>是Ember专门提供用于时间格式化的属性。</p><p>下面看看<code>format-date-time</code>这个助手怎么获取页面的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/helpers/format-date-time.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">formatDateTime</span>(<span class="params">params, hash</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  参数的顺序跟模板&#123;&#123;format-date-time currentDate cDate currentTime&#125;&#125;上使用顺序一致，</span></span><br><span class="line">    <span class="comment">//  cDate比currentTime先，所以第一个参数是cDate</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;params[0] = &#x27;</span> + params[<span class="number">0</span>]);  <span class="comment">//第一个参数是cDate,</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;params[1] = &#x27;</span> + params[<span class="number">1</span>]);  <span class="comment">//  第二个是currentTime</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hash.format = &#x27;</span> + hash.format);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hash.locale = &#x27;</span> + hash.locale);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;------------------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Helper.helper(formatDateTime);</span><br></pre></td></tr></table></figure><p>我只是演示怎么获取页面<code>format-date-time</code>助手设置的值，得到页面设置的值你想干嘛就干嘛⋯⋯<br>最后看看浏览器控制台的输出信息。</p><p><img src="/content/images/2016/03/51.png" alt="result"></p><p>因为页面使用了两次这个助手，所以自然也就打印了两次。</p><h4 id="3，转义HTML标签"><a href="#3，转义HTML标签" class="headerlink" title="3，转义HTML标签"></a>3，转义HTML标签</h4><p>官方的解释是：为了保护你的应用免受跨点脚本攻击（XSS），Ember会自动把<code>helper</code>返回值中的HTML标签转义。</p><p>新建一个<code>helper</code>：<code>ember generate helper escape-helper</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/helpers/escape-helper.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">escapeHelper</span>(<span class="params">params<span class="regexp">/*, hash*/</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// return Ember.String.htmlSafe(`&lt;b&gt;$&#123;params&#125;&lt;/b&gt;`);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;b&gt;<span class="subst">$&#123;params&#125;</span>&lt;/b&gt;`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Helper.helper(escapeHelper);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escape-helper: &#123;&#123;escape-helper &quot;helloworld!&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>此时页面上会直接显示“<b>helloworld!</b>”而不是“helloworld”被加粗了！如果你确定你返回的字符串是安全的你可用使用<code>htmlSafe</code>方法，这个方法不会把HTML代码转义，HTML代码仍然能起作用，那么页面显示的将是加粗的“helloworld！”。</p><p>到此模板这一章全部讲完了！！！但愿你能从中得到一点收获！！后面的文章将开始讲<code>route</code>，<code>route</code>在<a href="http://blog.ddlisting.com/2016/03/22/ember-js-ru-men-zhi-nan-zhi-shi-san-link-to/">Ember.js 入门指南之十三NaN 助手</a>这一篇已经讲过一点，但不是很详细。接下来的一章将会为你详细解释<code>route</code>。<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>番外篇，路由、模板的执行、渲染顺序</title>
      <link href="/2020/01/18/ember-teach/templetes/%E7%95%AA%E5%A4%96%E7%AF%87%EF%BC%8C%E8%B7%AF%E7%94%B1%E3%80%81%E6%A8%A1%E6%9D%BF%E7%9A%84%E6%89%A7%E8%A1%8C%E3%80%81%E6%B8%B2%E6%9F%93%E9%A1%BA%E5%BA%8F/"/>
      <url>/2020/01/18/ember-teach/templetes/%E7%95%AA%E5%A4%96%E7%AF%87%EF%BC%8C%E8%B7%AF%E7%94%B1%E3%80%81%E6%A8%A1%E6%9D%BF%E7%9A%84%E6%89%A7%E8%A1%8C%E3%80%81%E6%B8%B2%E6%9F%93%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>在Ember中路由和模板的执行都是有一定顺序的，它们的顺序为：主路由-&gt;子路由1-&gt;子路由2-&gt;子路由3-&gt;⋯⋯。模板渲染的顺序与路由执行顺序刚好相反，从最后一个模板开始解析渲染。</p><p><strong>注意</strong>：模板的渲染是在所有路由执行完之后，从最后一个模板开始。关于这一点下面的代码会演示验证，官网教程有介绍，点击查看。</p><p>比如有一路由格式为<code>application/posts/detail/comments/comment</code>，此时路由执行的顺序为：<code>application/posts</code> -&gt; <code>detail</code> -&gt; <code>comments</code> -&gt; <code>comment</code>，<code>application</code>是项目默认的路由，用户自定义的所有路由都是<code>application</code>的子路由（默认情况下），相对应的模板也是这样，所有用户自定义的模板都是<code>application.hbs</code>的子模板。如果你要修改模板的渲染层次你可以在<code>route</code>中重写<code>renderTemplate</code>回调函数，在函数内使用<code>render</code>方法指定要渲染的模板（如：<code>render(&#39;other&#39;)</code>，渲染到<code>other</code>这个模板上）更多有关信息请查看这里。并且它们对应的文件模板结构如下图：</p><p><img src="/content/images/2016/03/28.png" alt="文件模板结构"></p><p>路由与模板是相对应的，所以模板的目录结构与路由的目录结构是一致的。<br>你有两种方式构建上述目录：</p><ol><li>手动创建</li><li>使用命令，比如创建<code>comment.js</code>使用命令：<code>ember generate route posts/detail/comments/comment</code>，<a href="http://ember-cli.com/user-guide/">Ember CLI</a>会自动为我们创建目录和文件。</li></ol><p>创建好目录结构之后我们添加一些代码到每个文件。运行项目之后你就会一目了然了⋯⋯。<br>下面我按前面讲的路由执行顺序分别列出每个文件的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;running in posts...&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">routeName</span>: <span class="string">&#x27;The route is posts&#x27;</span>&#125;;</span><br><span class="line">        <span class="comment">// return Ember.$.getJSON(&#x27;https://api.github.com/repos/emberjs/ember.js/pulls&#x27;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;params id = &#x27;</span> + params.post_id);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;running in detail....&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">routeName</span>: <span class="string">&#x27;The route is detail..&#x27;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);    </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts/detail.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;params id = &#x27;</span> + params.post_id);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;running in detail....&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">routeName</span>: <span class="string">&#x27;The route is detail..&#x27;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);    </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts/detail/comments.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;running in comments...&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">routName</span>: <span class="string">&#x27;The route is comments....&#x27;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts/detail/comments/comment.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;params id = &#x27;</span> + params.post_id);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;running in comment...&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">routeName</span>: <span class="string">&#x27;The route is comment...&#x27;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下面是模板各个文件的内容。其列出才顺序与路由的顺序一致。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //  app/templates/posts.hbs  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 所有的子路由对应的模板都会渲染到outlet上 --&gt;</span></span><br><span class="line">&#123;&#123;model.routeName&#125;&#125; &gt;&gt; &#123;&#123;outlet&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- // app/templates/posts/detail.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 所有的子路由对应的模板都会渲染到outlet上 --&gt;</span></span><br><span class="line">&#123;&#123;model.routeName&#125;&#125; &gt;&gt; &#123;&#123;outlet&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- // app/templates/posts/detail/comments.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 所有的子路由对应的模板都会渲染到outlet上 --&gt;</span></span><br><span class="line">&#123;&#123;model.routeName&#125;&#125; &gt;&gt; &#123;&#123;outlet&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- // app/templates/posts/detail/comments/comment.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 所有的子路由对应的模板都会渲染到outlet上 --&gt;</span></span><br><span class="line">&#123;&#123;model.routeName&#125;&#125; &gt;&gt; &#123;&#123;outlet&#125;&#125;</span><br></pre></td></tr></table></figure><p>下图是路由执行的顺序，并且在执行的过程中渲染路由对应的模板。</p><p><img src="/content/images/2016/03/29.png" alt="路由执行的顺序"></p><p>从上图中可用清楚的看到当你运行一个URL时，与URL相关的路由是怎么执行的。</p><ol><li>执行主路由（默认是<code>application</code>），此时进入到路由的<code>model</code>回调方法，并且返回了一个对象<code>&#123; id: 1, routeName: &#39;The route is application...&#39; &#125;</code>，执行完回调之后继续转到子路由执行直到最后一个路由执行完毕，所有的路由执行完毕之后开始渲染页面。</li><li>页面的渲染则是从最后一个路由对应的模板开始，并沿着最近的父模板往回渲染。<br>为了验证是否是这样的执行顺序，下面修改<code>detail.js</code>和<br><code>comments.js</code>。在代码中加入一个模拟休眠的操作。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts/detail.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;params id = &#x27;</span> + params.post_id);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;running in detail....&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  执行一个循环，模拟休眠</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000000</span>; i++) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;The comment route executed...&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">routeName</span>: <span class="string">&#x27;The route is detail..&#x27;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);    </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/posts/detail/comments.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;params id = &#x27;</span> + params.post_id);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;running in comment...&#x27;</span>); </span><br><span class="line">        <span class="comment">//  执行一个循环，模拟休眠</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000000</span>; i++) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">routeName</span>: <span class="string">&#x27;The route is comment...&#x27;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>刷新页面，注意查看控制台输出信息和页面显示的内容。<br>新开一个窗口，执行URL：<a href="http://localhost:4200/posts/2/comments">http://localhost:4200/posts/2/comments</a>。</li></ol><p><img src="/content/images/2016/03/30.png" alt="run result"></p><p>控制台输出到这里时处理等待（执行<code>for</code>循环），此时已经执行了两个路由<code>application</code>和<code>posts</code>，并且正在执行<code>detail</code>，但是页面是空白的，没有任何HTML元素。</p><p><img src="/content/images/2016/03/31.png" alt="run result"></p><p>在<code>detail</code>路由执行完成之后转到路由<code>comments</code>。然后执行到<code>for</code>循环模拟休眠，此时页面仍然是没有任何HTML元素。然后等到所有<code>route</code>执行完毕之后，界面才显示<code>model</code>回调里设置的信息。</p><p><img src="/content/images/2016/03/33.png" alt="run result"></p><p><img src="/content/images/2016/03/32.png" alt="run result"></p><p>每个子路由设置的信息都会渲染到最近一个父路由对应模板的<code>{{outlet}}</code>上面。</p><p><img src="/content/images/2016/03/34.png" alt="run result"></p><ol><li>渲染<code>comment</code><br>得到的内如为：“<code>comment</code>渲染完成”</li><li>渲染<code>comment</code>最近的父模板<code>comments</code><br>得到的内容为：“<code>comment</code>渲染完成 <code>comments</code>渲染完成”</li><li>渲染<code>comments</code>最近的父模板<code>detail</code><br>得到的内容为：“<code>comment</code>渲染完成 <code>comments</code>渲染完成 <code>detail</code>渲染完成”</li><li>渲染<code>detail</code>最近的父模板<code>posts</code><br>得到的内容为：“<code>comment</code>渲染完成 <code>comments</code>渲染完成 <code>detail</code>渲染完成 <code>posts</code>渲染完成”</li><li>渲染<code>posts</code>最近的父模板<code>application</code><br>得到的内容为：“<code>comment</code>渲染完成 <code>comments</code>渲染完成 <code>detail</code>渲染完成 <code>posts</code>渲染完成 <code>application</code>渲染完成”</li></ol><p>只要记住一句话：<strong>子模板的都会渲染到父模板的<code>{{outlet}}</code>上，最终所有的模板都会被渲染到<code>application</code>的<code>{{outlet}}</code>上。</strong></p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章模板小结</title>
      <link href="/2020/01/18/ember-teach/templetes/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%A8%A1%E6%9D%BF%E5%B0%8F%E7%BB%93/"/>
      <url>/2020/01/18/ember-teach/templetes/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%A8%A1%E6%9D%BF%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>真快，第二章模板（<code>template</code>）已经介绍完毕了！这个章节相对来说是比较简单，只有是有点HTML基础的学习起来并不会很难，几乎也不需要去记忆，自己动手实践实践就能理解。其中比较重要的是<code>{{link-to}}</code>和<code>{{action}}</code>这两篇。特别是<code>{{link-to}}</code>，这个标签几乎都是与路由结合使用的，要注意与路由配置一一对应。</p><p>在下一章将为读者介绍第三章路由，如果你是看官网文档的你会发现路由是在模板之前介绍的，我稍微做了下调整，因为根据我自己学习的ember的经验我觉得先介绍模板更好学习。很多东西结合显示效果讲会容易很多。</p><p>在介绍路由这一章之前，重新创建了一个项目用于演示，依然是使用<a href="http://ember-cli.com/user-guide">Ember CLI</a>创建项目。下面是创建命名并且运行项目，测试项目是否创建成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ember new chapter3_routes</span><br><span class="line">cd chapter3_routes</span><br><span class="line">ember server</span><br></pre></td></tr></table></figure><p>在浏览器运行：<a href="http://localhost:4200/">http://localhost:4200/</a>，在界面上能看到<strong>Welcome to Ember</strong>说明项目搭建成功了！！</p><p>如果你还不知道怎么使用<a href="http://ember-cli.com/user-guide">Ember CLI</a>创建项目，请自行根据提供的地址安装配置<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令环境，在<a href="http://blog.ddlisting.com/2016/03/18/ember-js-ru-men-zhi-nan-zhi-qi-di-zhang-dui-xiang-mo-xing-xiao-jie/">第一章的小节</a>已经详细介绍过，这里不再赘述。</p><p>下面开始路由的学习之旅吧<del>~</del></p><br>博文完整代码放在[Github](https://github.com/ubuntuvim/my_emberjs_code)（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表单元素</title>
      <link href="/2020/01/18/ember-teach/templetes/%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0/"/>
      <url>/2020/01/18/ember-teach/templetes/%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>Ember提供的表单元素都是经过封装的，封装成了<code>view</code>组件。经过解析渲染之后就会生成普通的HTML标签。更多详细信息你可以查看他们的实现源码：<a href="https://github.com/emberjs/ember.js/blob/v2.0.1/packages/ember-views/lib/views/text_field.js#L36">Ember.TextField</a>、<a href="https://github.com/emberjs/ember.js/blob/v2.0.1/packages/ember-views/lib/views/checkbox.js#L10">Ember.Chechbox</a>、<a href="https://github.com/emberjs/ember.js/blob/v2.0.1/packages/ember-views/lib/views/text_area.js#L8">Ember.TextArea</a>。</p><p>按照惯例，先创建一个<code>route</code>：<br><br><code>ember generate route form-helper</code>。</p><h3 id="1，input助手"><a href="#1，input助手" class="headerlink" title="1，input助手"></a>1，<code>input</code>助手</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;! //app/templates/form-helper.hbs &#125;&#125;</span><br><span class="line">&#123;&#123;input name=&quot;username&quot; placeholder=&quot;your name&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>其中可以使用在<code>input</code>助手上的属性有很多，包括<code>readonly</code>、<code>value</code>、<code>disabled</code>、<code>name</code>等等，更多有关的属性介绍请移步<a href="guides.emberjs.com/v2.0.0/templates/input-helpers/">官网介绍</a>。<br><br><strong>注意：对于使用在<code>input</code>助手上的属性是不是使用双引号括住是有区别的。比如<code>value=&#39;helloworld&#39;</code>和<code>value=helloworld</code>渲染之后的结果是不一样的，第一种写法是直接把”helloworld”这个字符串赋值设置到<code>value</code>上，第二种写法是从上下文获取变量helloworld的值再设置到<code>value</code>上，通常是在<code>controller</code>或者<code>route</code>设置的值。</strong><br>看下面2行代码的演示结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;input name=&quot;username&quot; placeholder=&quot;your name&quot; value=&quot;model.helloworld&quot;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123;input name=&quot;username&quot; placeholder=&quot;your name&quot; value=model.helloworld&#125;&#125;</span><br></pre></td></tr></table></figure><p>修改对应的<code>route</code>类，重写<code>model</code>回调，返回一个字符串；或者你可以在模板对应的<code>controller</code>类设置。比如下面的第二段代码（使用命令<code>ember generate controller form-helper</code>得到模板对应的<code>controller</code>类。<br>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/routes/form-helper.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">helloworld</span>: <span class="string">&#x27;The value from route...&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>controller</code>类初始化测试数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controllers/form-helper.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    helloworld: <span class="string">&#x27;The value from route...&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对应的，如果你使用的是<code>controller</code>初始化测试数据，那么你的模板获取数据的方式就要稍微修改下。需要去掉前缀<code>model.</code>。<code>controller</code>不需要在回调中初始化测试数据，可用直接定义成<code>controller</code>的属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;input name=&quot;username&quot; placeholder=&quot;your name&quot; value=helloworld&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/content/images/2016/03/40.png" alt="运行结果"></p><h3 id="2，在input助手上指定触发事件"><a href="#2，在input助手上指定触发事件" class="headerlink" title="2，在input助手上指定触发事件"></a>2，在<code>input</code>助手上指定触发事件</h3><p>你可以想想下，我们平常写过的javascript代码，不是可用直接在<code>input</code>输入框上使用javascript的函数，同理的，<code>input</code>助手上可以使用javascript函数，不过使用方式有点差别，请看下面示例。比如按<code>enter</code>键触发指定的事件、失去焦点触发事件等等。<br>首先编写<code>input</code>输入框，获取<code>input</code>输入框的值有点不按常理=^=。在<code>controller</code>类获取<code>input</code>输入框的值是通过不用双引号的<code>value</code>属性获取的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">按enter键触发</span><br><span class="line">&#123;&#123;input value=getValueKey enter=&quot;getInputValue&quot; name=getByName placeholder=&quot;请输入测试的内容&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controllers/form-helper.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    actions: &#123;</span><br><span class="line">        getInputValue: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> v = <span class="built_in">this</span>.get(<span class="string">&#x27;getValueKey&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;v = &#x27;</span> + v);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> v2 = <span class="built_in">this</span>.get(<span class="string">&#x27;getByName&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;v2 = &#x27;</span> + v2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>输入测试内容后按<code>enter</code>键。</p><p><img src="/content/images/2016/03/41.png" alt="run result"></p><p>最后的输出结果有那么一点点意外。<code>v</code>的值是正确的，<code>v2</code>却是<code>undefined</code>。可见在<code>controller</code>层获取页面的值是通过<code>value</code>这个属性而不是<code>name</code>这个属性。跟我们平常HTML的<code>input</code>有点不一样了！！这个需要注意下。</p><h3 id="3，checkbook助手"><a href="#3，checkbook助手" class="headerlink" title="3，checkbook助手"></a>3，<code>checkbook</code>助手</h3><p><code>checkbox</code>这个表单元素也是经过Ember封装了，作为一个组件使用。使用过程需要注意的问题与前面的<code>input</code>是一样的，属性是不是使用双引号所起的作用是不一样的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checkbox&#123;&#123;input type=&quot;checkbox&quot; checked=isChecked &#125;&#125;</span><br></pre></td></tr></table></figure><p>你可以在<code>controller</code>增加一个属性<code>isChecked</code>并设置为<code>true</code>，<code>checkbox</code>将默认为选中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controllers/form-helper.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="comment">// ⋯⋯</span></span><br><span class="line">    &#125;,</span><br><span class="line">    isChecked: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/content/images/2016/03/42.png" alt="result"></p><h3 id="4，textarea助手"><a href="#4，textarea助手" class="headerlink" title="4，textarea助手"></a>4，<code>textarea</code>助手</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;textarea value=key cols=&quot;80&quot; rows=&quot;3&quot; enter=&quot;getValueByV&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>同样的也是通过<code>value</code>属性获取输入的值。</p><p>本篇简单的介绍了常用的表单元素，使用的方式比较简单，唯一需要注意的是获取的输入框输入值的方式与平常使用的HTML表单元素有点差别。其他的基本上与普通的HTML表单元素没什么差别。<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调试助手</title>
      <link href="/2020/01/18/ember-teach/templetes/%E8%B0%83%E8%AF%95%E5%8A%A9%E6%89%8B/"/>
      <url>/2020/01/18/ember-teach/templetes/%E8%B0%83%E8%AF%95%E5%8A%A9%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p>Ember不仅提供了专门用于调试Ember程序的谷歌、火狐浏览器插件<a href="https://github.com/emberjs/ember-inspector">Ember Inspector</a>( 安装插件可能需要翻墙，如果你也是一个程序员我想翻墙对于你来说应该不是什么难事！！！)，还提供了用于调试的<code>helper</code>。<br>按照惯例，先做好准备工作，分别执行<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令创建<code>controller</code>、<code>route</code>和模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember generate controller dev-helper</span><br><span class="line">ember generate route dev-helper</span><br></pre></td></tr></table></figure><h3 id="1，日志助手-lt-￼11-gt"><a href="#1，日志助手-lt-￼11-gt" class="headerlink" title="1，日志助手{{log}}"></a>1，日志助手<code>null</code></h3><p><code>{{log}}</code>可以把从<code>controller</code>、<code>route</code>类传递到页面上的值以日志的形式直接输出在浏览器的控制台上。下面代码在<code>controller</code>类添加测试数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controllers/dev-helper.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    testName: <span class="string">&#x27;This is a testvalue...&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们可以在模板上直接显示字符串<code>testName</code>的值，也可以使用<code>{{log}}</code>助手以日志形式输出在控制台。当然你也可以直接使用<code>{{log 'xxx'}}</code>在控制台打印”xxxx”。第二点断点助手的示例中将为你演示<code>{{log 'xxx'}}</code>用法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/dev-helper.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line">直接显示在页面上：&#123;&#123;testName&#125;&#125;</span><br><span class="line">&#123;&#123;log testName&#125;&#125;</span><br></pre></td></tr></table></figure><p>运行<a href="http://localhost:4200/dev-helper">http://localhost:4200/dev-helper</a>之后我们可以在页面上看到字符串<code>testName</code>的值。打开谷歌或者火狐的控制台（console标签下）可以看到也打印的字符的值。比较简单我就不再截图了⋯⋯</p><h3 id="2，断点助手-lt-￼16-gt"><a href="#2，断点助手-lt-￼16-gt" class="headerlink" title="2，断点助手{{debugger}}"></a>2，断点助手<code>null</code></h3><p>当你需要调试的时候，你可以在模板上需要添加断点的地方添加这个助手，运行的时候会自动停在添加这个助手的地方。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;log &#x27;这句话在断点前面&#x27;&#125;&#125;</span><br><span class="line">&#123;&#123;debugger&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123;log &#x27;这句话在断点后面&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><p>不出意外程序会停在有<code>{{debugger}}</code>这一行。控制台应该会打印“这句话在断点前面”。然后通过点击下一步跳过断点，然后继续打印“这句话在断点后面”。<br><br>运行结果不好截图，请读者自己试试吧！！！<br><br>当你使用了<code>{{debugger}}</code>，并且程序停止进入debug状态的时候，你可以直接在浏览器控制台的命令行输入<code>get(&#39;key&#39;)</code>来获取<code>controller</code>设置的值。</p><p><img src="/content/images/2016/03/43.png" alt="result"></p><p>在箭头所指的位置输入<code>get(&#39;testName&#39;)</code>，然后按<code>enter</code>键执行。会得到如下结果：</p><p><img src="/content/images/2016/03/44.png" alt="result"></p><p>可以看到正确的获取到了前面在<code>controller</code>类里设置的值。<br>如果你不是在调试模式下输入<code>get(&#39;testName&#39;)</code>那么会提示如下错误。</p><p><img src="/content/images/2016/03/45.png" alt="result"></p><p>你还可以在遍历助手<code>{{each}}</code>中使用<code>{{debugger}}</code>，点击一次“下一步”就会执行一次循环。</p><p>首先重写<code>route</code>类的<code>model</code>回调，在里面添加测试数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  app/routes/dev-helper.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;chen&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;ibeginner.sinaapp.com&#x27;</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在模板的<code>each</code>助手中使用<code>{{debugger}}</code>助手。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">    &#123;&#123;debugger&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><p>运行，浏览器自动进入debug模式（如果不能自动进入debug模式可以手动按<code>F12</code>进入debug）。此时你可以在浏览器控制台命令输入<code>get(&#39;item.name&#39;)</code>来获取本次循环对象的属性值。然后你几点“下一步”或者按<code>F8</code>，程序自动进入到下一次循环，然后你再输入<code>get(&#39;item.name&#39;)</code>，此时得到的是本次循环对象属性值。然后点击下一步或者按F8进入第三次循环，由于<code>route</code>类设置返回的数组只有2个元素，第三次已经没有元素。所以这次会自动退出debug模式。<br>如果运行正常你可会得到下图所示的输出信息。</p><p><img src="/content/images/2016/03/46.png" alt="result"></p><p>在调试状态下你还可以直接在浏览器控制台命令行输入<code>context</code>获取上下文信息。会输出本页面所包含的所有类和属性。</p><p><img src="/content/images/2016/03/47.png" alt="result"></p><p>上述介绍的就是Ember提供的调试助手的所有使用方法。在你开发Ember应用的时候应该是很有用的，特别是在<code>each</code>循环遍历的时候。<br><br><br>博文完整代码放在<a href="https://github.com/ubuntuvim/my_emberjs_code">Github</a>（博文经过多次修改，博文上的代码与github代码可能又出入，不过影响不大！），如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>验收测试</title>
      <link href="/2020/01/18/ember-teach/testing/acceptanceTests/"/>
      <url>/2020/01/18/ember-teach/testing/acceptanceTests/</url>
      
        <content type="html"><![CDATA[<h1 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h1><p>使用<code>ember generate acceptance-test &lt;name&gt;</code>创建一个验收测试，比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember g acceptance-test login</span><br></pre></td></tr></table></figure><p>执行完毕命令之后得到如下文件内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tests/acceptance/login-test.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; test &#125; <span class="keyword">from</span> <span class="string">&#x27;qunit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> moduleForAcceptance <span class="keyword">from</span> <span class="string">&#x27;people/tests/helpers/module-for-acceptance&#x27;</span>;</span><br><span class="line"></span><br><span class="line">moduleForAcceptance(<span class="string">&#x27;Acceptance | login&#x27;</span>);</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;visting /login&#x27;</span>， <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  visit(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  andThen(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  　assert.equal(currentURL()， <span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>moduleForAcceptance</code>用来启动、终止程序。最后几行<code>test</code>中包含了一个示例。</p><p>几乎所有的测试都有一个路由请求，用于和页面交互(通过helper)并检查DOM是否按照期望值进行改变。</p><p>举个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">&#x27;should add new post&#x27;</span>， <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  visit(<span class="string">&#x27;/posts/new&#x27;</span>);</span><br><span class="line">  fillIn(<span class="string">&#x27;input.title&#x27;</span>， <span class="string">&#x27;My new post&#x27;</span>);</span><br><span class="line">  click(<span class="string">&#x27;button.submit&#x27;</span>);</span><br><span class="line">  andThen(<span class="function">() =&gt;</span> assert.equal(find(<span class="string">&#x27;ul.posts li:first&#x27;</span>).text()， <span class="string">&#x27;My new post&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>大体意思为:<br>进入路由<code>/posts/new</code>，在输入框<code>input.title</code>填入<code>My new post</code>，点击<code>button.submit</code>，期望的结果是: 在对应列表下<code>ul.posts li.first</code>的文本为<code>My new post</code>.</p><h2 id="测试助手"><a href="#测试助手" class="headerlink" title="测试助手"></a>测试助手</h2><p>在测试web应用中的一个主要的问题是，由于代码都是基于事件驱动的，因此他们有可能是<code>异步</code>的，会使代码<code>无序</code>运行。</p><p>比如有两个按钮，从不同的服务器载入数据，我们先后点击他们，但可能结果返回的顺序并不是我们点击的顺序。</p><p>当你在编写测试的时候，你需要特别注意一个问题，就是你无法确定在发出一个请求后，是否会立刻得到返回的响应。因此，你的断言需要以同步的状态来等待被测试体。例如上面所举的例子，应该等待两个服务器均返回数据后，这时测试代码才会执行其逻辑来检测数据的正确性。</p><p>这就是为什么在做断言的时候，Ember测试助手都是被包裹在一个确保同步状态的代码中。这样做避免了对所有这样的代码都去做这样的包裹，并且因为减少了模板代码，从而提高了代码的可读性.</p><p>Ember包含多个测试助来辅助进行验收测试。一共有2种类型:异步助手<code>asynchronous</code>和同步助手<code>synchronous</code></p><h3 id="异步测试助手"><a href="#异步测试助手" class="headerlink" title="异步测试助手"></a>异步测试助手</h3><p>异步测试助手可以意识到程序中的异步行为，使你可以更方便的编写确切的测试。</p><p>同时，这些测试助手会按注册的顺序执行，并且是链式运行。每个测试助手的调用都是在前一个调用结束之后，才会执行下一个。因此，你可以不用当心测试助手的执行顺序。</p><ul><li><code>click(selector)</code><ul><li>点击一个元素，触发该元素所绑定的<code>click</code>事件，返回一个异步执行成功的<code>promise</code>。</li></ul></li><li><code>fillIn(selector， value)</code><ul><li>用执行成功的promise值填充到选中的input元素上。使用<code>&lt;select&gt;</code>作为<code>&lt;input&gt;</code>时，记得<code>&lt;select&gt;</code>元素的<code>value</code>是标签<code>&lt;option&gt;</code>所指定的值，并不是<code>&lt;option&gt;</code>标签显示的内容。</li></ul></li><li><code>keyEvent(selector， type， keyCode)</code><ul><li>模拟键盘操作。比如选中的元素检测按键<code>keypress</code>，按键按下<code>keydown</code>，按键弹起<code>keyup</code>事件的<code>keyCode</code>。</li></ul></li><li><code>triggerEvent(selector，type，keyCode)</code><ul><li>在指定元素上触发给定事件，比如<code>blur</code>、<code>ddlclick</code>等事件…</li></ul></li><li><code>visit(url)</code><ul><li>访问路由并返回promise执行成功的结果。</li></ul></li></ul><h3 id="同步测试助手"><a href="#同步测试助手" class="headerlink" title="同步测试助手"></a>同步测试助手</h3><p>同步测试助手，当触发时会立即执行并返回结果.</p><ul><li><code>currentPath()</code><ul><li>返回当前路径</li></ul></li><li><code>currentRouteName()</code><ul><li>返回当前激活的路由名称</li></ul></li><li><code>currentURL()</code><ul><li>返回当前URL</li></ul></li><li><code>find(selector， context)</code><ul><li>寻找应用根元素中的指定下上文(可选)的元素。将其域定义到根元素可以有效的避免与测试框架的冲突。当上下文没有指定的时候，会按照默认方式完成。</li></ul></li></ul><h3 id="等待助手"><a href="#等待助手" class="headerlink" title="等待助手"></a>等待助手</h3><p> <code>andThen</code>测试助手将会等待所有异步测试助手完成之后再执行.举个例子:</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  tests/acceptance/new-post-appears-first-test.js</span></span><br><span class="line"></span><br><span class="line">tese(<span class="string">&#x27;should add new post&#x27;</span>， <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  visit(<span class="string">&#x27;/posts/new&#x27;</span>);</span><br><span class="line">  fillIn(<span class="string">&#x27;input.title&#x27;</span>， <span class="string">&#x27;My new post&#x27;</span>);</span><br><span class="line">  click(<span class="string">&#x27;button.submit&#x27;</span>);</span><br><span class="line">  andThen(<span class="function">() =&gt;</span> assert.equal(find(<span class="string">&#x27;ul.posts li:first&#x27;</span>).text()， <span class="string">&#x27;My new post&#x27;</span>));</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>首先，我们访问<code>/posts/new</code>地址，在有<code>title</code>css类的<code>input</code>输入框内内填入内容“My new post”，然后点击有CSS类<code>submit</code>的按钮。</p><p>等待签名的异步测试助手执行完（具体说，<code>andThen</code>会在路由<code>/posts/new</code>访问完毕，<code>input</code>表单填充完毕，按钮被点击之后）毕后会执行<code>andThen</code>助手。注意<code>andThen</code>助手只有一个参数，这个参数是一个函数，函数的代码是其实测试助手执行完毕之后才执行的代码。</p><p>在<code>andThen</code>助手中，我们最后会调用<code>assert.equal</code>断言来判定对应位置的值是否为<code>My new post</code>。</p><h3 id="自定义测试助手"><a href="#自定义测试助手" class="headerlink" title="自定义测试助手"></a>自定义测试助手</h3><p>使用命令<code>ember generate test-helper &lt;helper-name&gt;</code>来创建自定义测试助手。</p><p>下面的代码是执行命令<code>ember g test-helper shouldHaveElementWithCount</code>得到的测试例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tests/helpers/should-have-element-with-count.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Test.registerAsyncHelper(</span><br><span class="line">    <span class="string">&#x27;shouldHaveElementWithCount&#x27;</span>， <span class="function"><span class="keyword">function</span>(<span class="params">app</span>)</span>&#123;&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>Ember.Test.registerAsyncHelper</code>和<code>Ember.Test.registerHelper&#39;是当</code>startApp<code>被调用时，会将自定义测试助手注册。两者的区别在于，前者</code>Ember.Test.registerHelper`会在之前任何的异步测试助手运行完成之后运行，并且后续的异步测试助手在运行前都会等待他完成.</p><p>测试助手方法一般都会以当前程序的第一个参数被调用，其他参数，比如<code>assert</code>，在测试助手被调用的时候提供。测试助手需要在调用<code>startApp</code>前进行注册，但<code>ember-cli</code>会帮你处理，你不需要担心这个问题。</p><p>下面是一个非异步的测试助手:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tests/helpers/should-have-element-with-count.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Test.registerHelper(<span class="string">&#x27;shouldHaveElementWithCount&#x27;</span>，</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">app， assert， selector， n， context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> el = findWithAssert(selector， context);</span><br><span class="line">    <span class="keyword">const</span> count = el.length;</span><br><span class="line">    assert.equal(n， count， <span class="string">&#x27;found $&#123;count&#125; times&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//shouldHaveElementWithCount(assert， &#x27;ul li&#x27;， 3);</span></span><br></pre></td></tr></table></figure><p>下面是一个异步的测试助手:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Test.registerAsynHelper(<span class="string">&#x27;dblclick&#x27;</span>，</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">app， assert， selector， context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> $el = findWithAssert(selector， context);</span><br><span class="line">    Ember.run(<span class="function">() =&gt;</span> $el.dblclick());</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//dblclick(assert， &#x27;#persion-1&#x27;)</span></span><br></pre></td></tr></table></figure><p>异步测试助手也可以让你将多个测试助手合并为一个.举个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tests/helpers/add-contact.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Test.registerAsyncHelper(<span class="string">&#x27;addContact&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">app，name</span>) </span>&#123;</span><br><span class="line">    fillIn(<span class="string">&#x27;#name&#x27;</span>, name);</span><br><span class="line">    click(<span class="string">&#x27;button.create&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//addContact(&#x27;Bob&#x27;);</span></span><br><span class="line"><span class="comment">//addContact(&#x27;Dan&#x27;);</span></span><br></pre></td></tr></table></figure><p>最后， 别忘了将你的测试助手添加进<code>tests/.jshintrc</code>和<code>tests/helpers/start-app.js</code>中、在<code>tests/.jshintrc</code>中，你需要将其添加进<code>predef</code>块中，不然就会得到jshint测试失败的消息.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;predef&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;document&quot;</span>,</span><br><span class="line">    <span class="string">&quot;window&quot;</span>,</span><br><span class="line">    <span class="string">&quot;locaiton&quot;</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;shouldHaveElementWithCount&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dblclick&quot;</span>,</span><br><span class="line">    <span class="string">&quot;addContact&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;*</span><br></pre></td></tr></table></figure><p>你需要在<code>tests/helpers/start-app.js</code>引入测试助手，这些助手将会被注册到应用中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Application <span class="keyword">from</span> <span class="string">&#x27;../../app&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;../../router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;../../config/environmnet&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./should-have-element-with-count&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./dblclick&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./add-contact&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试简介</title>
      <link href="/2020/01/18/ember-teach/testing/introduction/"/>
      <url>/2020/01/18/ember-teach/testing/introduction/</url>
      
        <content type="html"><![CDATA[<p>英文原文：<a href="https://guides.emberjs.com/v2.7.0/testing/">https://guides.emberjs.com/v2.7.0/testing/</a></p><h1 id="测试简介"><a href="#测试简介" class="headerlink" title="测试简介"></a>测试简介</h1><blockquote><p>测试是<code>Ember。js</code>框架开发环节中很重要的一环。</p></blockquote><p>现在假设你正在利用Ember框架开发一个博客系统，这个系统包含<code>user</code>和<code>post</code>模型，有登录及创建博客的操作。最后假设你希望在你的程序里实现自动化测试。</p><h2 id="测试类型"><a href="#测试类型" class="headerlink" title="测试类型"></a>测试类型</h2><p>你一共需要下面这3种类型的测试:</p><ol><li>验收测试Acceptance</li><li>单元测试Unit</li><li>集成测试Integration</li></ol><h3 id="验收测试-Acceptance-Tests"><a href="#验收测试-Acceptance-Tests" class="headerlink" title="验收测试 Acceptance Tests"></a>验收测试 Acceptance Tests</h3><p>验收测试是用来确保程序流程正确，且各类交互特性符合用户预期的测试。</p><p>验收测试用于确认项目基本功能，保证项目核心功能没有退化，确保该项目的目标得以实现。测试应用的方式和用户与应用程序的交互方式是一致的（比如填写表单，点击按钮）。</p><p>在上述的场景中，可能会做如下的验收测试:</p><ol><li>用户可以通过登录表单登录。</li><li>用户可以创建博客。</li><li>当成功保存一篇博客文章后，程序会返回博客列表给用户。</li><li>访客不能访问管理界面。</li></ol><h3 id="单元测试-Unit-Tests"><a href="#单元测试-Unit-Tests" class="headerlink" title="单元测试 Unit Tests"></a>单元测试 Unit Tests</h3><p>单元测试是针对程序中的最小可测试单元进行的测试，比如一个类或者一个方法。该测试可以编写与程序逻辑相对的语句来测试相关单元</p><p>下面是一些单元测试的具体例子:</p><ol><li>用户姓名是由对应的姓和名组合而成的。</li><li>把博客请求数据正确序列化转换为一个博客模型对象。</li><li>正确格式化博客时间。</li></ol><h3 id="集成测试-Integration-Tests"><a href="#集成测试-Integration-Tests" class="headerlink" title="集成测试 Integration Tests"></a>集成测试 Integration Tests</h3><p>集成测试是处于单元测试和验收测试之间的测试。集成测试目的是验证客户端与全系统交互，所有单元测试，以及微观层面具体代码的算法逻辑是否都能通过。</p><p>集成测试用来验证应用程序各个模块相互关系，比如若干个UI控件之间的行为。也可以用于确认数据和动作在系统不同的部件中被正确的传递和执行，同时在给定假设条件下，可以提供系统各部件配合运行的情况。  </p><p>我们建议对每个组件都进行集成测试，因为组件各个组件以相同的方式运行在系统的上下文中，并且组件之间也有相互影响，包括从模板中渲染组件、接收组件生命周期回调函数。</p><p>集成测试示例如下：</p><ol><li>用户姓名和日期正确的显示在每篇博文上</li><li>禁止用户在标题栏内输入超过50个字符</li><li>当提交一个没有标题的博客时，显示红色提醒并给出需要标题的错误信息</li><li>博客列表滚动到最顶端显示最新博客</li></ol><h2 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h2><p>QUnit是本手册的默认测试框架，但是Ember.js也支持其他第三方的测试框架。</p><h3 id="如何运行测试"><a href="#如何运行测试" class="headerlink" title="如何运行测试"></a>如何运行测试</h3><p>在命令行输入<code>ember test</code>来运行测试。也可以通过<code>ember test -server</code>命令，在每次文件改动后，重新运行测试。</p><p>在本地开发项目的时候可以通过访问<code>/tests/index.html</code>来运行你的测试，前提是你需要使用命令<code>ember server</code>运行了你的项目。如果你是使用这种方式有一点需要注意：</p><ul><li>通过<code>ember server</code>运行的测试，是在开发环境下的测试，调用的是开发环境下的参数</li><li>通过<code>ember test --server</code>运行的测试，是在测试环境下的测试，调用的是测试环境下的参数，比如加载的依赖也是不同的。因此我们推荐你使用<code>ebmer test --server</code>来运行测试。</li></ul><h3 id="指定测试"><a href="#指定测试" class="headerlink" title="指定测试"></a>指定测试</h3><p>使用<code>--filter</code>选项来指定运行部分测试。比如:快速运行当前工作的测试使用命令<code>ember test --filter=&quot;dashboard&quot;</code>、运行指定类型的测试使用命令<code>ember test --filter=&quot;integration&quot;</code>、可以使用<code>!</code>来排除验收测试<code>ember test --filter=&quot;!acceptance&quot;</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件测试</title>
      <link href="/2020/01/18/ember-teach/testing/testingComponents/"/>
      <url>/2020/01/18/ember-teach/testing/testingComponents/</url>
      
        <content type="html"><![CDATA[<h1 id="组件测试"><a href="#组件测试" class="headerlink" title="组件测试"></a>组件测试</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型测试</title>
      <link href="/2020/01/18/ember-teach/testing/testingModels/"/>
      <url>/2020/01/18/ember-teach/testing/testingModels/</url>
      
        <content type="html"><![CDATA[<h1 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由测试</title>
      <link href="/2020/01/18/ember-teach/testing/testingRoutes/"/>
      <url>/2020/01/18/ember-teach/testing/testingRoutes/</url>
      
        <content type="html"><![CDATA[<h1 id="路由测试"><a href="#路由测试" class="headerlink" title="路由测试"></a>路由测试</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>控制器测试</title>
      <link href="/2020/01/18/ember-teach/testing/testingControllers/"/>
      <url>/2020/01/18/ember-teach/testing/testingControllers/</url>
      
        <content type="html"><![CDATA[<h1 id="控制器测试"><a href="#控制器测试" class="headerlink" title="控制器测试"></a>控制器测试</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试基础</title>
      <link href="/2020/01/18/ember-teach/testing/unitTestingBasics/"/>
      <url>/2020/01/18/ember-teach/testing/unitTestingBasics/</url>
      
        <content type="html"><![CDATA[<h1 id="单元测试基础"><a href="#单元测试基础" class="headerlink" title="单元测试基础"></a>单元测试基础</h1><p>单元测试一般被用来测试一些小的代码块，并确保它正在做的是什么。与验收测试不同的是，单元测试被限定在小范围内并且不需要Emeber程序运行。  </p><p>与Ember基本对象一样的，创建单元测试也只需要继承<code>Ember.Object</code>即可。然后在代码块内编写具体的测试内容，比如控制器、组件。每个测试就是一个<code>Ember.Object</code>实例对象，你可以设置对象的状态，运行断言。通过下面的例子，让我们一起看看测试如何使用。</p><h2 id="测试计算属性"><a href="#测试计算属性" class="headerlink" title="测试计算属性"></a>测试计算属性</h2><p>创建一个简单的实例，实例内包含一个计算属性<code>computedFoo</code>，此计算属性依赖普通属性<code>foot</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app/models/somt-thing.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Object.extend(&#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  computedFoo: Ember.compuuted(<span class="string">&#x27;foo&#x27;</span>，<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> foo = <span class="built_in">this</span>.get(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`computed <span class="subst">$&#123;foo&#125;</span>`</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在测试中，我们建立一个实例，然后更新属性<code>foo</code>的值（这个操作会触发计算属性<code>computedFoo</code>，使其自动更新），然后给出一个符合预期的<code>断言</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tests/unit/models/some-thing-test.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;moduleFor， test&#125; <span class="keyword">from</span> <span class="string">&#x27;ember-qunit&#x27;</span>;</span><br><span class="line"></span><br><span class="line">moduleFor(<span class="string">&#x27;model:some-thing&#x27;</span>， <span class="string">&#x27;Unit | some thing&#x27;</span>， &#123;</span><br><span class="line">  unit: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;should correctly concat foo&#x27;</span>， <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> someThing = <span class="built_in">this</span>.subject();</span><br><span class="line">  somtThing.set(<span class="string">&#x27;foo&#x27;</span>， <span class="string">&#x27;baz&#x27;</span>);  <span class="comment">//设置属性foo的值</span></span><br><span class="line">  assert.equal(someThing.get(<span class="string">&#x27;computedFoo&#x27;</span>), <span class="string">&#x27;computed baz&#x27;</span>);  <span class="comment">//断言，判断计算属性值是否相等于computed baz</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>例子中使用了<code>moduleFor</code>，它是由<code>Ember-Qunit</code>提供的单元测试助手。这些测试助手为我们提供了很多便利，比如<code>subject</code>功能，它可以寻找并实例化测试所用的对象。同时你还可以在<code>subject</code>方法中自定义初始化的内容，这些初始化的内容可以是传递给主体功能的实例变量。比如在单元测试内初始化属性“foo”你可以这样做：<code>this.subject({foo: 'bar'});</code>，那么单元测试在运行时属性<code>foo</code>的值就是<code>bar</code>。</p><h2 id="测试对象方法"><a href="#测试对象方法" class="headerlink" title="测试对象方法"></a>测试对象方法</h2><p>下面让我们来看一下如何测试对象方法的逻辑。在本例中对象内部有一个设置属性（更新属性<code>foo</code>值）值的方法<code>testMethod</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app/models/some-thing.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Object.extend(&#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span>，</span><br><span class="line">  testMethod() &#123;</span><br><span class="line">    <span class="built_in">this</span>.set(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>要对其进行测试，我们先创建如下实例，然后调用<code>testMethod</code>方法，然后用断言判断方法的调用结果是否是正确的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tests/unit/models/some-thing-test.js</span></span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;should update foo on testMethod&#x27;</span>， <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> someThing = <span class="built_in">this</span>.subject();</span><br><span class="line">  someThing.testMethod();</span><br><span class="line">  assert.equal(someThing.get(<span class="string">&#x27;foo&#x27;</span>), <span class="string">&#x27;baz&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果一个对象方法返回的是一个值，你可以很容易的给予断言进行判定是否正确。假设我们的对象拥有一个<code>calc</code>方法，方法的返回值是基于对象内部的状态值。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app/models/some-thing.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Object.extend(&#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  calc() &#123;</span><br><span class="line">    <span class="built_in">this</span>.incrementProperty(<span class="string">&#x27;count&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> count = <span class="built_in">this</span>.get(<span class="string">&#x27;count&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`count: <span class="subst">$&#123;count&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在测试中需要调用<code>calc</code>方法，并且断言其返回值是否正确。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tests/unit/models/some-thing-test.js</span></span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;should return incremented count on calc&#x27;</span>， <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> someThing = <span class="built_in">this</span>.subject();</span><br><span class="line">  assert.equal(someThing.calc(), <span class="string">&#x27;count: 1&#x27;</span>);</span><br><span class="line">  assert.equal(someThing.calc(), <span class="string">&#x27;count: 2&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="测试观察者"><a href="#测试观察者" class="headerlink" title="测试观察者"></a>测试观察者</h2><p>假设我们有一个对象，这个对象拥有一些属性，并且有一个方法在监测着这些属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app/models/some-thing.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Object.extend(&#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  other: <span class="string">&#x27;no&#x27;</span>,,</span><br><span class="line">  doSomething: Ember.observer(<span class="string">&#x27;foo&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.set(<span class="string">&#x27;other&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为了测试<code>doSomething</code>方法，我们创建一个<code>SomeThing</code>对象，更新<code>foo</code>属性值，然后进行断言是否达到预期结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tests/unit/models/some-thing-test.js</span></span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;should set other prop to yes when foo changes&#x27;</span>， <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> someThing = <span class="built_in">this</span>.subject();</span><br><span class="line">  someThing.set(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>);</span><br><span class="line">  assert.equal(someThing.get(<span class="string">&#x27;other&#x27;</span>), <span class="string">&#x27;yes&#x27;</span>);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Teach </tag>
            
            <tag> Ember-Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-junit-jacoco代码覆盖测试</title>
      <link href="/2020/01/18/junit-jacoco/spring-junit-jacoco%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/01/18/junit-jacoco/spring-junit-jacoco%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>接着上一篇<a href="http://xcoding.tech/2018/12/06/junit-jacoco/junit-jacoco%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E6%B5%8B%E8%AF%95/">http://xcoding.tech/2018/12/06/junit-jacoco/junit-jacoco%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E6%B5%8B%E8%AF%95/</a>。</p><p>上一篇只是简单的java项目，实际应用通常会复杂很多，比如spring项目，那么本篇介绍如何在spring项目中做代码覆盖率扫描并生成报告。</p><h3 id="使用maven构建spring项目"><a href="#使用maven构建spring项目" class="headerlink" title="使用maven构建spring项目"></a>使用maven构建spring项目</h3><h4 id="清空原有目录"><a href="#清空原有目录" class="headerlink" title="清空原有目录"></a>清空原有目录</h4><p>复制上一篇的项目，命名为<code>coverage-spring</code>，然后把目录下面<code>src</code>和<code>test</code>目录都删除了，里面的代码也不需要保留。删除之后项目目录结构如下：</p><p><img src="/image/blog-image/java/junit-coverage/1.png" alt="项目结构"></p><p>另外，再把<code>jacocolib</code>目录下的<code>hamcrest-core-1.3.jar</code>、<code>junit-4.12.jar</code>也删除了，一会使用maven重新下载。</p><h4 id="设置maven项目结构"><a href="#设置maven项目结构" class="headerlink" title="设置maven项目结构"></a>设置maven项目结构</h4><p>修改项目结构，在项目属性的<code>java build path</code>里面设置，设置后结构如下截图：</p><p><img src="/image/blog-image/java/junit-coverage/2.png" alt="项目结构"></p><p><strong>注意</strong>：对于没有的目录要自己创建（如截图左下角的<code>create new folder</code>），一级一级目录创建，创建完毕之后按截图勾选。</p><p>设置后目录结构如下：</p><p><img src="/image/blog-image/java/junit-coverage/3.png" alt="项目结构"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;建立工程目录</span><br><span class="line">src&#x2F;main&#x2F;java&#x2F;com&#x2F;ubuntuvim&#x2F;coverage</span><br><span class="line">&#x2F;&#x2F;建立test目录</span><br><span class="line">src&#x2F;test&#x2F;java&#x2F;com&#x2F;ubuntuvim&#x2F;coverage</span><br><span class="line">&#x2F;&#x2F;建立resources文件夹</span><br><span class="line">src&#x2F;main&#x2F;resources</span><br><span class="line">&#x2F;&#x2F; 创建应用主配置</span><br><span class="line">src&#x2F;main&#x2F;resources&#x2F;application.xml</span><br><span class="line">&#x2F;&#x2F;建立webapp目录</span><br><span class="line">src&#x2F;main&#x2F;webapp&#x2F;</span><br></pre></td></tr></table></figure><p>文件具体内容本文后续逐个补充，创建的时候暂时为空文件。</p><h4 id="增加pom-xml"><a href="#增加pom-xml" class="headerlink" title="增加pom.xml"></a>增加pom.xml</h4><p>项目结构创建完毕之后，在根目录下新增<code>pom.xml</code>，文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ubuntuvim.coverage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>coverage-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring proj coverage test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 属性配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.master.classpath.dir</span>&gt;</span>master-lib<span class="tag">&lt;/<span class="name">project.master.classpath.dir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/servlet-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                                $&#123;project.master.classpath.dir&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="安装maven依赖"><a href="#安装maven依赖" class="headerlink" title="安装maven依赖"></a>安装maven依赖</h4><p>创建好<code>pom.xml</code>之后，在这个文件上右键 <code>Run As</code> -&gt; <code>maven install</code>。稍等片刻spring依赖自动下载到根目录下的<code>master-lib</code>目录中。把jar都下载都根目录的<code>master-lib</code>中是为了后续编译代码时候引用方便，通过<code>pom.xml</code>中的<code>outputDirectory</code>标签设置了jar的保存目录。</p><h3 id="增加业务代码"><a href="#增加业务代码" class="headerlink" title="增加业务代码"></a>增加业务代码</h3><p>所需jar包下载到<code>master-lib</code>之后就可以编写spring代码了。在此之前先把下载的jar全部添加到项目类路径。</p><h4 id="spring配置"><a href="#spring配置" class="headerlink" title="spring配置"></a>spring配置</h4><p>打开<code>src/main/resources/application.xml</code>增加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:jee</span>=<span class="string">&quot;http://www.springframework.org/schema/jee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans-4.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">             http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">             http://www.springframework.org/schema/context/spring-context-4.0.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">             http://www.springframework.org/schema/jee </span></span></span><br><span class="line"><span class="tag"><span class="string">              http://www.springframework.org/schema/jee/spring-jee-4.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">              http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">             http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">             http://www.springframework.org/schema/util </span></span></span><br><span class="line"><span class="tag"><span class="string">             http://www.springframework.org/schema/util/spring-util-4.1.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置自动扫描的package --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ubuntuvim.coverage&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span> </span><br></pre></td></tr></table></figure><h4 id="验证项目"><a href="#验证项目" class="headerlink" title="验证项目"></a>验证项目</h4><p>配置都准备好之后先验证一下项目是否搭建成功了。创建一个service类，然后用Junit启动这个类，验证spring容器是否配置成功了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.coverage.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ubuntuvim.coverage.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.ubuntuvim.coverage.service.IUserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//为了简单直接创建一个用户对象，通常这部分是通过查询数据库获取</span></span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        u.setAge(<span class="number">20</span>);</span><br><span class="line">        u.setId(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        u.setUsername(<span class="string">&quot;ubuntuvim&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Test配置"><a href="#Spring-Test配置" class="headerlink" title="Spring Test配置"></a>Spring Test配置</h3><p>业务类创建完毕之后我们新建一个Junit类用于测试这个service类。在创建测试类之前先增加一些其他代码，用于加载配置，设置web环境等，后续所有的测试都需要继承这个基类。</p><h4 id="创建BaseJunit4Test基类"><a href="#创建BaseJunit4Test基类" class="headerlink" title="创建BaseJunit4Test基类"></a>创建BaseJunit4Test基类</h4><p>该类主要用来加载配置文件，设置web环境。所有的测试类，都继承该类即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.coverage.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="comment">//使用junit4进行测试  </span></span><br><span class="line"><span class="comment">// 加载spring主配置文件</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations=&#123;&quot;classpath:application.xml&quot;&#125;)</span> </span><br><span class="line"><span class="comment">// 设置web资料目录</span></span><br><span class="line"><span class="meta">@WebAppConfiguration(&quot;src/main/webapp&quot;)</span></span><br><span class="line"><span class="comment">//------------如果加入以下代码，所有继承该类的测试类都会遵循该配置，也可以不加，在测试类的方法上</span></span><br><span class="line"><span class="comment">///控制事务，参见下一个实例    </span></span><br><span class="line"><span class="comment">//这个非常关键，如果不加入这个注解配置，事务控制就会完全失效！    </span></span><br><span class="line"><span class="comment">//@Transactional    </span></span><br><span class="line"><span class="comment">//这里的事务关联到配置文件中的事务控制器（transactionManager = &quot;transactionManager&quot;），同时</span></span><br><span class="line"><span class="comment">//指定自动回滚（defaultRollback = true）。这样做操作的数据才不会污染数据库！    </span></span><br><span class="line"><span class="comment">//@TransactionConfiguration(transactionManager = &quot;transactionManager&quot;, defaultRollback = true)    </span></span><br><span class="line"><span class="comment">//------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBaseJunit4Test</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务代码测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.coverage.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertNotNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ubuntuvim.coverage.base.AbstractBaseJunit4Test;</span><br><span class="line"><span class="keyword">import</span> com.ubuntuvim.coverage.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.ubuntuvim.coverage.service.IUserService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImplTest</span> <span class="keyword">extends</span> <span class="title">AbstractBaseJunit4Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService iUserService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User u = iUserService.getUser(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        assertNotNull(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右键 -&gt; <code>Coverage As</code> -&gt; <code>Junit Test</code>。运行完毕之后可以看到覆盖率结果：</p><p><img src="/image/blog-image/java/junit-coverage/4.png" alt="覆盖率结果"></p><h3 id="整合Ant自动扫描"><a href="#整合Ant自动扫描" class="headerlink" title="整合Ant自动扫描"></a>整合Ant自动扫描</h3><p>到此为止，项目环境是验证通过了，直接使用覆盖率运行也是没问题的。那么下一步就是整合Ant，使用Ant脚本自动运行测试类并生成覆盖率报告。</p><p>复制第一篇创建的项目中的<code>build.xml</code>和<code>build-test.xml</code>。重命名为<code>compile.xml</code>和<code>coverage-report.xml</code>，你也可以不重命名，我只是为了用一个更直观的名字所以改一改文件名。</p><p>稍微调整一下<code>buil.xml</code>的内容，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">&quot;AntTestReporting&quot;</span> <span class="attr">basedir</span>=<span class="string">&quot;.&quot;</span> <span class="attr">default</span>=<span class="string">&quot;compile&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- general --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;VERBOSE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;TARGET&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.8&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- folder --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;build.dir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;build&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;src.dir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;src/main/java&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;src.classess.dir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;build.dir&#125;/classess&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;test.dir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;src/test/java&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;test.classess.dir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;build.dir&#125;/test-classess&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;master-lib&quot;</span> <span class="attr">value</span>=<span class="string">&quot;master-lib&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;third-party-lib&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jacocolib&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 设置编译所需要的所有jar，包括从maven下载的和覆盖率扫描的第三方jar --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;classpath&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;master-lib&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">&quot;**/*.jar&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;third-party-lib&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">&quot;**/*.jar&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;init&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">delete</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;build.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;build.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;src.classess.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;test.classess.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;compile&quot;</span> <span class="attr">depends</span>=<span class="string">&quot;init&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">         <span class="comment">&lt;!-- 编译java代码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javac</span> <span class="attr">target</span>=<span class="string">&quot;$&#123;TARGET&#125;&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;$&#123;DEBUG&#125;&quot;</span> <span class="attr">verbose</span>=<span class="string">&quot;$&#123;VERBOSE&#125;&quot;</span> <span class="attr">classpathref</span>=<span class="string">&quot;classpath&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">optimize</span>=<span class="string">&quot;true&quot;</span> <span class="attr">destdir</span>=<span class="string">&quot;$&#123;src.classess.dir&#125;&quot;</span> <span class="attr">srcdir</span>=<span class="string">&quot;$&#123;src.dir&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javac</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">echo</span>&gt;</span>======== java代码编译完毕 ========<span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;classpath.src.dir&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pathelement</span> <span class="attr">location</span>=<span class="string">&quot;$&#123;src.classess.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 编译test代码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javac</span> <span class="attr">target</span>=<span class="string">&quot;$&#123;TARGET&#125;&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;$&#123;DEBUG&#125;&quot;</span> <span class="attr">verbose</span>=<span class="string">&quot;$&#123;VERBOSE&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">optimize</span>=<span class="string">&quot;true&quot;</span> <span class="attr">destdir</span>=<span class="string">&quot;$&#123;test.classess.dir&#125;&quot;</span> <span class="attr">srcdir</span>=<span class="string">&quot;$&#123;test.dir&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- test代码依赖src的代码和第三方jar --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">classpath</span> <span class="attr">refid</span>=<span class="string">&quot;classpath&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">classpath</span> <span class="attr">refid</span>=<span class="string">&quot;classpath.src.dir&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javac</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">echo</span>&gt;</span>======== test代码编译完毕 ========<span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行ant脚本之后，刷新项目可以看到多了一个<code>build</code>目录，在目录下可以看到所有编译后的class文件。</p><p><img src="/image/blog-image/java/junit-coverage/5.png" alt="编译结果"></p><p>编译完成之后再使用Ant执行测试类代码，脚本仍然是在前一个项目基础上改造而得。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">&quot;AntTestReporting-test&quot;</span> <span class="attr">basedir</span>=<span class="string">&quot;.&quot;</span> <span class="attr">default</span>=<span class="string">&quot;main&quot;</span> <span class="attr">xmlns:jacoco</span>=<span class="string">&quot;antlib:org.jacoco.ant&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">file</span>=<span class="string">&quot;compile.xml&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- Java Code Coverage --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taskdef</span> <span class="attr">uri</span>=<span class="string">&quot;antlib:org.jacoco.ant&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;org/jacoco/ant/antlib.xml&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classpath</span> <span class="attr">path</span>=<span class="string">&quot;jacocolib/jacocoant.jar&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">taskdef</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">&lt;!-- spring配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spring.cfg.dir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;basedir&#125;/src/main/resources&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reports.dir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;basedir&#125;/reports&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;test.data.dir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;reports.dir&#125;/testResults&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;coverage.reports.dir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;reports.dir&#125;/coverage-report&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;junit.reports.dir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;reports.dir&#125;/junit-report&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;xms&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-Xms256m&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;xmx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-Xmx1024m&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- test代码类路径，包括src代码、测试代码本身、jacoco jar --&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;classpath.test.dir&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 测试代码依赖src代码，需要作为test代码的运行classpath --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">refid</span>=<span class="string">&quot;classpath&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">pathelement</span> <span class="attr">location</span>=<span class="string">&quot;$&#123;src.classess.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pathelement</span> <span class="attr">location</span>=<span class="string">&quot;$&#123;test.classess.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;init-report-dir&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">delete</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;test.data.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">delete</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;coverage.reports.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">delete</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;reports.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;reports.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;test.data.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;junit.reports.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;coverage.reports.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">       <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;copy-spring-cfg&quot;</span> <span class="attr">description</span>=<span class="string">&quot;复制spring配置文件到test运行目录&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">echo</span>&gt;</span>复制spring配置到test运行目录<span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">copy</span> <span class="attr">todir</span>=<span class="string">&quot;$&#123;test.classess.dir&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;spring.cfg.dir&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">&quot;**/*.xml&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">&quot;**/*.properties&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">copy</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;run-test&quot;</span> <span class="attr">depends</span>=<span class="string">&quot;init-report-dir, compile, copy-spring-cfg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">echo</span>&gt;</span>========= 运行所有test类 =========<span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jacoco:coverage</span> <span class="attr">destfile</span>=<span class="string">&quot;$&#123;test.data.dir&#125;/jacoco.exec&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">junit</span> <span class="attr">printsummary</span>=<span class="string">&quot;true&quot;</span> <span class="attr">haltonfailure</span>=<span class="string">&quot;false&quot;</span> <span class="attr">fork</span>=<span class="string">&quot;yes&quot;</span> <span class="attr">forkmode</span>=<span class="string">&quot;once&quot;</span> <span class="attr">showoutput</span>=<span class="string">&quot;yes&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">                &lt;jvmarg value=&quot;</span>$&#123;<span class="attr">xms</span>&#125;&quot; /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jvmarg</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;xmx&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">classpath</span> <span class="attr">refid</span>=<span class="string">&quot;classpath.test.dir&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">formatter</span> <span class="attr">type</span>=<span class="string">&quot;xml&quot;</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 执行 *Test类 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">batchtest</span> <span class="attr">todir</span>=<span class="string">&quot;$&#123;test.data.dir&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;test.classess.dir&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- AbstractBaseJunit4Test类不需要执行 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">name</span>=<span class="string">&quot;**/AbstractBaseJunit4Test.class&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">name</span>=<span class="string">&quot;**/*$*.class&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">&quot;**/*Test.class&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">batchtest</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">junit</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jacoco:coverage</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- Generate HTML report</span></span><br><span class="line"><span class="comment">            - junit-noframes.html -&gt; Single page HTML-report</span></span><br><span class="line"><span class="comment">            - index.html -&gt; HTML-report using frames (several files, but more comfortable to read)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">echo</span>&gt;</span>========= 生成Junit报告 =========<span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junitreport</span> <span class="attr">todir</span>=<span class="string">&quot;$&#123;test.data.dir&#125;&quot;</span> <span class="attr">description</span>=<span class="string">&quot;单元测试报告&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;test.data.dir&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">&quot;TEST-*.xml&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 生成一个HTML网页报告 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 自定义报告的格式文件目录，通常从/ANT_HOME/etc/目录直接把junit-frames.xsl和junit-noframes.xsl复制过即可，</span></span><br><span class="line"><span class="comment">            目的是为了自定义报告的标题，默认的报告title为：Unit Test Results</span></span><br><span class="line"><span class="comment">            https://ant.apache.org/manual/Tasks/junitreport.html</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">report</span> <span class="attr">format</span>=<span class="string">&quot;frames&quot;</span> <span class="attr">todir</span>=<span class="string">&quot;$&#123;junit.reports.dir&#125;&quot;</span> <span class="attr">styledir</span>=<span class="string">&quot;$&#123;basedir&#125;/junit-report-style&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;TITLE&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;junit单元测试报告&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">report</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">junitreport</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- Generate Code Coverage report</span></span><br><span class="line"><span class="comment">            See: http://www.eclemma.org/jacoco/trunk/doc/ant.html --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">echo</span>&gt;</span>========= 生成覆盖率报告 =========<span class="tag">&lt;/<span class="name">echo</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">jacoco:report</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executiondata</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file</span> <span class="attr">file</span>=<span class="string">&quot;$&#123;test.data.dir&#125;/jacoco.exec&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executiondata</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="tag">&lt;<span class="name">structure</span> <span class="attr">name</span>=<span class="string">&quot;单元测试覆盖率报告&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">classfiles</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;src.classess.dir&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">&quot;**/*.class&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 生成的报告中排除test类 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">name</span>=<span class="string">&quot;**/AbstractBaseJunit4Test.class&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- Exclude inner classes --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">name</span>=<span class="string">&quot;**/*$*.class&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">classfiles</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">structure</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="tag">&lt;<span class="name">html</span> <span class="attr">destdir</span>=<span class="string">&quot;$&#123;coverage.reports.dir&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jacoco:report</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;main&quot;</span> <span class="attr">depends</span>=<span class="string">&quot;run-test&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据实际项目路径修改了一些相对路径，比较重要的有点是最好一个任务中把spring的测试基础类排除了。<code>&lt;exclude name=&quot;**/AbstractBaseJunit4Test.class&quot; /&gt;</code>。<br>在<code>junitreport</code>标签内增加了一个<code>report</code>标签，用于自定义生成的单元测试结果模板。</p><p><strong>注意</strong>：最好是打开<code>junit</code>标签中的属性<code>showoutput=&quot;yes&quot;</code>（值为<code>no</code>或者<code>yes</code>），打开这个属性之后所有代码中的<code>Logger</code>日志才会打印到控制台，可以即时看到项目的实时日志方便调试。</p><p>打开这个开关之后可以看到有类似如下的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">run-test:</span><br><span class="line">     [<span class="built_in">echo</span>] ========= 运行所有<span class="built_in">test</span>类 =========</span><br><span class="line">[jacoco:coverage] Enhancing junit with coverage</span><br><span class="line">    [junit] objc[21529]: Class JavaLaunchHelper is implemented <span class="keyword">in</span> both /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/bin/java (0x10264b4c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x1026c14e0). One of the two will be used. Which one is undefined.</span><br><span class="line">    [junit] 十二月 09, 2018 12:57:26 上午 org.springframework.test.context.support.AbstractTestContextBootstrapper getDefaultTestExecutionListenerClassNames</span><br><span class="line">    [junit] 信息: Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]</span><br><span class="line">    [junit] 十二月 09, 2018 12:57:26 上午 org.springframework.test.context.support.AbstractTestContextBootstrapper getTestExecutionListeners</span><br><span class="line">    [junit] 信息: Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@35e52059, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@62577d6, org.springframework.test.context.support.DependencyInjectionTestExecutionListener@49bd54f7, org.springframework.test.context.support.DirtiesContextTestExecutionListener@6b5f8707]</span><br><span class="line">    [junit] Running com.ubuntuvim.coverage.service.impl.UserServiceImplTest</span><br><span class="line">    [junit] 返回参数： = User [id=123, username=ubuntuvim, age=20]</span><br><span class="line">    [junit] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.61 sec</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>重点是这几行日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">…………</span><br><span class="line">[junit] 信息: Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: </span><br><span class="line">…………</span><br><span class="line">[junit] 返回参数： = User [id=123, username=ubuntuvim, age=20]</span><br></pre></td></tr></table></figure><p>第一行是容器加载的日志，第二行是业务代码打印的Logger日志。</p><h4 id="生成报告"><a href="#生成报告" class="headerlink" title="生成报告"></a>生成报告</h4><p>按照上述内容配置好之后就可以直接运行了。在<code>coverage-report.xml</code>上右键，选中ant运行即可。运行完毕后项目目录下新增<code>reports</code>目录，目录内存放这Junit报告、覆盖率报告。</p><p><img src="/image/blog-image/java/junit-coverage/6.png" alt="报告"></p><p><code>coverage-report</code>和<code>junit-report</code>分别存放着覆盖率报告和单元测试报告，用浏览器直接打开这两个目录下<code>index.html</code>即可看到报告的详细信息。</p><p><img src="/image/blog-image/java/junit-coverage/7.png" alt="junit报告"></p><p><img src="/image/blog-image/java/junit-coverage/8.png" alt="覆盖率报告"></p><h3 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h3><p><a href="https://github.com/ubuntuvim/coverage/tree/coverage-spring">https://github.com/ubuntuvim/coverage/tree/coverage-spring</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Junit </tag>
            
            <tag> Jacoco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从服务器获取数据，引入组件</title>
      <link href="/2020/01/18/Ember-Demo/%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%BC%95%E5%85%A5%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/01/18/Ember-Demo/%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%BC%95%E5%85%A5%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>来源：<a href="http://yoember.com/">yoember.com</a><br>作者：<a href="http://zoltan.nz/">Zoltan</a></p><p><strong>声明</strong>：<em>本文的转载与翻译是经过作者认可的，再次感谢原作，如有侵权请给我留言，我会删除博文！！</em> 希望本系列教程能帮助更多学习Ember.js的初学者。</p><p>接着前面四篇：</p><ol><li><a href="http://xcoding.tech/2016/03/30/Ember-Demo/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8Ember.js%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/">环境搭建以及使用Ember.js创建第一个静态页面</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E5%BC%95%E5%85%A5%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E3%80%81action%E3%80%81%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9/">引入计算属性、action、动态内容</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E6%A8%A1%E5%9E%8B%EF%BC%8C%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93/">模型，保存数据到数据库</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%8A%A0%E5%85%A5CRUD%E5%8A%9F%E8%83%BD/">发布项目，加入CRUD功能</a></li></ol><h2 id="清理模板，使用组件重构"><a href="#清理模板，使用组件重构" class="headerlink" title="清理模板，使用组件重构"></a>清理模板，使用组件重构</h2><p>2.0版本之后组件会越来越重要。有关组件的介绍请看<a href="http://blog.ddlisting.com/2016/04/07/ember-js-ru-men-zhi-nan-zhi-er-shi-ba-zu-jian-ding-yi/">Ember.js 入门指南之二十八组件定义</a>。组件的创建同样可以使用<a href="http://ember-cli.com/user/guide">Ember CLI</a>命令创建。如下命令创建了2个组件，创建的同时会自动创建2个文件；一个是组件类（<code>app/components/xxx.js</code>）。一个是组件对应的模板（<code>app/templates/components/xxx.hbs</code>）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember g component library-item</span><br><span class="line">ember g component library-item-form</span><br></pre></td></tr></table></figure><p><strong>修改模板library-item</strong></p><p>下面在组件模板<code>library-item.hbs</code>中增加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/components/library-item.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default library-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Address: &#123;&#123;item.address&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Phone: &#123;&#123;item.phone&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-footer text-right&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;yield&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果注意看可以发现上述代码与<code>app/templates/libraries/index.hbs</code>文件的代码非常相似。这是<code>item</code>替代了<code>model</code>。至于<code>item</code>是怎么来的请看<a href="http://blog.ddlisting.com/2016/04/07/ember-js-ru-men-zhi-nan-zhi-er-shi-jiu-shu-xing-chuan-di/">Ember.js 入门指南之二十九属性传递</a>，这篇博文介绍了组件的属性传递，<code>item</code>是从调用组件的模板传递过来的。上述代码中还有一个重要的东西是<code>{{yield}}</code>，这个表达式与<code>{{outlet}}</code>类似。同样也是一个占位符。组件渲染之后会被传进来的html代码替换。比如下面的调用代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#library-item item=model&#125;&#125;</span><br><span class="line">  Closed</span><br><span class="line">&#123;&#123;/library-item&#125;&#125;</span><br></pre></td></tr></table></figure><p>组件渲染之后，上述的<code>Closed</code>会替换到<code>{{yield}}</code>这里，最终得到的html代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-footer text-right&quot;</span>&gt;</span></span><br><span class="line">      Closed</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有关组件渲染的内容请看<a href="http://blog.ddlisting.com/2016/04/07/ember-js-ru-men-zhi-nan-zhi-san-shi-bao-guo-nei-rong/">Ember.js 入门指南之三十包裹内容</a>。</p><p><strong>修改模板library-item-form</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- app&#x2F;templates&#x2F;components&#x2F;library-item-form.hbs --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;form-horizontal&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;form-group has-feedback &#123;&#123;if item.isValid &#39;has-success&#39;&#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;label class&#x3D;&quot;col-sm-2 control-label&quot;&gt;Name*&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;</span><br><span class="line">          &#123;&#123;input type&#x3D;&quot;text&quot; value&#x3D;item.name class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;The name of the Library&quot;&#125;&#125;</span><br><span class="line">          &#123;&#123;#if item.isValid&#125;&#125;&lt;span class&#x3D;&quot;glyphicon glyphicon-ok form-control-feedback&quot;&gt;&lt;&#x2F;span&gt;&#123;&#123;&#x2F;if&#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;label class&#x3D;&quot;col-sm-2 control-label&quot;&gt;Address&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;</span><br><span class="line">          &#123;&#123;input type&#x3D;&quot;text&quot; value&#x3D;item.address class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;The address of the Library&quot;&#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;label class&#x3D;&quot;col-sm-2 control-label&quot;&gt;Phone&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;</span><br><span class="line">          &#123;&#123;input type&#x3D;&quot;text&quot; value&#x3D;item.phone class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;The phone number of the Library&quot;&#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-sm-offset-2 col-sm-10&quot;&gt;</span><br><span class="line">            &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-default&quot; &#123;&#123;action &#39;buttonClicked&#39; item&#125;&#125; disabled&#x3D;&quot;&#123;&#123;unless item.isValid &#39;disabled&#39;&#125;&#125;&quot;&gt;&#123;&#123;buttonLabel&#125;&#125;&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>注意观察上述代码与<code>libraries/new.hbs</code>和<code>libraries/edit.hbs</code>几乎是一样的。有点不一样的是把校验移到<code>model</code>中。比如校验<code>name</code>属性不为空。<br><strong>注意</strong>：顶部导入的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Model <span class="keyword">from</span> <span class="string">&#x27;ember-data/model&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> attr <span class="keyword">from</span> <span class="string">&#x27;ember-data/attr&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Model.extend(&#123;</span><br><span class="line">  name: attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">  address: attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">  phone: attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  isValid: Ember.computed.notEmpty(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>再修改<code>app/templates/libraries/index.hbs</code>引入组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>List<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;#each model as |library|&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;#library-item item=library&#125;&#125;</span><br><span class="line">        &#123;&#123;#link-to &#x27;libraries.edit&#x27; library.id class=&#x27;btn btn-success btn-xs&#x27;&#125;&#125;Edit&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-xs&quot;</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">deleteLibrary</span>&#x27; <span class="attr">library</span>&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      &#123;&#123;/library-item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在迭代中使用组件，通过属性名<code>item</code>传递迭代出来的对象<code>library</code>到组件中。其中<code>link-to</code>和<code>button</code>这两句代码会替换到组件<code>library-item</code>的<code>{{yield}}</code>上。<br>等待项目重启完成，可以看到界面与之前的没有任何变化。页面是没有变化，但是后台的处理还需要完善。</p><p><strong>修改<code>app/templates/libraries/new.hbs</code></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/libraries/new.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Add a new local Library<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;library-item-form item=model buttonLabel=&#x27;Add to library list&#x27; action=&#x27;saveLibrary&#x27;&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;#library-item item=model&#125;&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      &#123;&#123;/library-item&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>修改<code>app/templates/libraries/edit.hbs</code></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Edit Library<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;library-item-form item=model buttonLabel=&#x27;Save changes&#x27; action=&#x27;saveLibrary&#x27;&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;#library-item item=model&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      &#123;&#123;/library-item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在组件类<code>library-item-form.js</code>增加对<code>action</code>的处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">  buttonLabel: <span class="string">&#x27;Save&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">    buttonClicked(param) &#123;</span><br><span class="line">      <span class="built_in">this</span>.sendAction(<span class="string">&#x27;action&#x27;</span>, param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="合并edit-hbs和new-hbs到form-hbs"><a href="#合并edit-hbs和new-hbs到form-hbs" class="headerlink" title="合并edit.hbs和new.hbs到form.hbs"></a>合并<code>edit.hbs</code>和<code>new.hbs</code>到<code>form.hbs</code></h2><p>原来的文件<code>edit.hbs</code>和<code>new.hbs</code>几乎是一样的，可以使用组件重构。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /app/templates/libraries/form.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;library-item-form item=model buttonLabel=buttonLabel action=&#x27;saveLibrary&#x27;&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;#library-item item=model&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      &#123;&#123;/library-item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了实现代码复用，首先把不同的部分定义成属性：<code>title</code>、<code>buttonLabel</code>。默认情况下路由会渲染到同名的模板上，如果你想修改这个默认行为可以使用<code>renderTemplate()</code>方法。</p><h2 id="使用方法renderTemplate-和setupController"><a href="#使用方法renderTemplate-和setupController" class="headerlink" title="使用方法renderTemplate()和setupController()"></a>使用方法<code>renderTemplate()</code>和<code>setupController()</code></h2><p><strong>API介绍</strong></p><ul><li><a href="http://emberjs.com/api/classes/Ember.Route.html#method_renderTemplate">renderTemplate()</a></li><li><a href="http://emberjs.com/api/classes/Ember.Route.html#method_setupController">setupController()</a></li></ul><p>默认情况下路由会渲染到同名的模板上，我们使用方法<code>renderTemplate()</code>执行渲染的模板。比如下面的代码使用这个方法执行路由<code>new</code>渲染到模板<code>libraries/form.hbs</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/routes/libraries/new.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">  model: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;library&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setupController: <span class="function"><span class="keyword">function</span> (<span class="params">controller, model</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>._super(controller, model);</span><br><span class="line"></span><br><span class="line">    controller.set(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;Create a new library&#x27;</span>);</span><br><span class="line">    controller.set(<span class="string">&#x27;buttonLabel&#x27;</span>, <span class="string">&#x27;Create&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  renderTemplate() &#123;</span><br><span class="line">    <span class="built_in">this</span>.render(<span class="string">&#x27;libraries/form&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">    saveLibrary(newLibrary) &#123;</span><br><span class="line">      newLibrary.save().then(<span class="function">() =&gt;</span> <span class="built_in">this</span>.transitionTo(<span class="string">&#x27;libraries&#x27;</span>));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    willTransition() &#123;</span><br><span class="line">      <span class="keyword">let</span> model = <span class="built_in">this</span>.controller.get(<span class="string">&#x27;model&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (model.get(<span class="string">&#x27;isNew&#x27;</span>)) &#123;</span><br><span class="line">        model.destroyRecord();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意方法<code>setupController()</code>设置组件模板中的属性<code>title</code>和<code>buttonLabel</code>的值。同样的在修改路由<code>edit.js</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/routes/libraries/edit.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">  model(params) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.store.findRecord(<span class="string">&#x27;library&#x27;</span>, params.library_id);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setupController(controller, model) &#123;</span><br><span class="line">    <span class="built_in">this</span>._super(controller, model);</span><br><span class="line"></span><br><span class="line">    controller.set(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;Edit library&#x27;</span>);</span><br><span class="line">    controller.set(<span class="string">&#x27;buttonLabel&#x27;</span>, <span class="string">&#x27;Save changes&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  renderTemplate() &#123;</span><br><span class="line">    <span class="built_in">this</span>.render(<span class="string">&#x27;libraries/form&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">    saveLibrary(newLibrary) &#123;</span><br><span class="line">      newLibrary.save().then(<span class="function">() =&gt;</span> <span class="built_in">this</span>.transitionTo(<span class="string">&#x27;libraries&#x27;</span>));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    willTransition(transition) &#123;</span><br><span class="line">      <span class="keyword">let</span> model = <span class="built_in">this</span>.controller.get(<span class="string">&#x27;model&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (model.get(<span class="string">&#x27;hasDirtyAttributes&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">let</span> confirmation = confirm(<span class="string">&quot;Your changes haven&#x27;t saved yet. Would you like to leave this form?&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (confirmation) &#123;</span><br><span class="line">          model.rollbackAttributes();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          transition.abort();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用组件重构之后可以删除<code>app/templates/libraries/new.hbs</code>和<code>app/templates/libraries/edit.hbs</code>，这两个文件不需要了。效果截图如下：</p><p><img src="/image/blog-image/182.png" alt="页面重构截图"></p><h2 id="使用组件nav-link-to重构-lt-li-gt-lt-a-gt-lt-a-gt-lt-li-gt"><a href="#使用组件nav-link-to重构-lt-li-gt-lt-a-gt-lt-a-gt-lt-li-gt" class="headerlink" title="使用组件nav-link-to重构&lt;li&gt;&lt;a&gt;&lt;/a&gt;&lt;/li&gt;"></a>使用组件<code>nav-link-to</code>重构<code>&lt;li&gt;&lt;a&gt;&lt;/a&gt;&lt;/li&gt;</code></h2><p>知道组件如何使用之后我们继续重构项目代码，重构导航模板<code>navbar.hbs</code>的链接代码。使用Ember CLI命令创建组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember g component nav-link-to</span><br></pre></td></tr></table></figure><p>这次使用扩展的方式扩展一个组件类，扩展Ember内置的组件类<code>LinkComponent</code>，使用方法<code>extend()</code>扩展一个类。然后使用属性<code>tagName</code>指定渲染之后的标签。更多有关组件属性的介绍请看<a href="http://blog.ddlisting.com/2016/04/07/ember-js-ru-men-zhi-nan-zhi-san-shi-zi-ding-yi-bao-guo-zu-jian-de-htmlbiao-qian/">Ember.js 入门指南之三十一自定义包裹组件的HTML标签</a>，当然你也可以参考网址的教程实现本文的需求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/components/nav-link-to.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.LinkComponent.extend(&#123;</span><br><span class="line">  tagName: <span class="string">&#x27;li&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：记得修改<code>Ember.Component.extend</code>为<code>Ember.LinkComponent.extend</code>。组件模板很简单。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/components/nav-link-to.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>&#123;&#123;yield&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后在修改导航模板<code>navbar.hbs</code>为如下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/navbar.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-inverse&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#main-navbar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      &#123;&#123;#link-to &#x27;index&#x27; class=&quot;navbar-brand&quot;&#125;&#125;Library App&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;main-navbar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;#nav-link-to &#x27;index&#x27;&#125;&#125;Home&#123;&#123;/nav-link-to&#125;&#125;</span><br><span class="line">            &#123;&#123;#nav-link-to &#x27;libraries&#x27;&#125;&#125;Libraries&#123;&#123;/nav-link-to&#125;&#125;</span><br><span class="line">            &#123;&#123;#nav-link-to &#x27;about&#x27;&#125;&#125;About&#123;&#123;/nav-link-to&#125;&#125;</span><br><span class="line">            &#123;&#123;#nav-link-to &#x27;contact&#x27;&#125;&#125;Contact&#123;&#123;/nav-link-to&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>Admin<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">                  &#123;&#123;#nav-link-to &#x27;admin.invitation&#x27;&#125;&#125;Invitations&#123;&#123;/nav-link-to&#125;&#125;</span><br><span class="line">                  &#123;&#123;#nav-link-to &#x27;admin.contact&#x27;&#125;&#125;Contacts&#123;&#123;/nav-link-to&#125;&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等待项目重启完成，可以看到界面与之前的没有任何变化，可以任意点击导航栏菜单且不会出错。效果截图如下：</p><p><img src="/image/blog-image/183.png" alt="最终结果截图"></p><h2 id="家庭作业"><a href="#家庭作业" class="headerlink" title="家庭作业"></a>家庭作业</h2><p>本篇的家庭作业就是好好理解组件！参考下面的文章认真学习、理解组件。</p><ol><li><a href="http://blog.ddlisting.com/2016/04/07/ember-js-ru-men-zhi-nan-zhi-er-shi-ba-zu-jian-ding-yi/">Ember.js 入门指南之二十八组件定义</a></li><li><a href="http://blog.ddlisting.com/2016/04/07/ember-js-ru-men-zhi-nan-zhi-er-shi-jiu-shu-xing-chuan-di/">Ember.js 入门指南之二十九属性传递</a></li><li><a href="http://blog.ddlisting.com/2016/04/07/ember-js-ru-men-zhi-nan-zhi-san-shi-bao-guo-nei-rong/">Ember.js 入门指南之三十包裹内容</a></li><li><a href="http://blog.ddlisting.com/2016/04/07/ember-js-ru-men-zhi-nan-zhi-san-shi-zi-ding-yi-bao-guo-zu-jian-de-htmlbiao-qian/">Ember.js 入门指南之三十一自定义包裹组件的HTML标签</a></li><li><a href="http://blog.ddlisting.com/2016/04/07/chu-li-shi-jian/">Ember.js 入门指南之三十二处理事件</a></li><li><a href="http://blog.ddlisting.com/2016/04/07/action-chong-fa-bian-hua-2/">Ember.js 入门指南之三十三action触发变化</a></li></ol><br>为了照顾懒人我把完整的代码放在[GitHub](https://github.com/ubuntuvim/library-app)上，如有需要请参考参考。博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布项目，加入CRUD功能</title>
      <link href="/2020/01/18/Ember-Demo/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%8A%A0%E5%85%A5CRUD%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/01/18/Ember-Demo/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%8A%A0%E5%85%A5CRUD%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>来源：<a href="http://yoember.com/">yoember.com</a><br>作者：<a href="http://zoltan.nz/">Zoltan</a></p><p><strong>声明</strong>：<em>本文的转载与翻译是经过作者认可的，再次感谢原作，如有侵权请给我留言，我会删除博文！！</em> 希望本系列教程能帮助更多学习Ember.js的初学者。</p><p>接着前面三篇：</p><ol><li><a href="http://xcoding.tech/2016/03/30/Ember-Demo/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8Ember.js%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/">环境搭建以及使用Ember.js创建第一个静态页面</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E5%BC%95%E5%85%A5%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E3%80%81action%E3%80%81%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9/">引入计算属性、action、动态内容</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E6%A8%A1%E5%9E%8B%EF%BC%8C%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93/">模型，保存数据到数据库</a></li></ol><h2 id="应用发布"><a href="#应用发布" class="headerlink" title="应用发布"></a>应用发布</h2><p><strong>发布方式一</strong></p><p>发布的详细教程请看<a href="https://www.firebase.com/docs/web/libraries/ember/guide.html#section-ember-deploy">guide on firebase</a>。执行如下命令发布项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g firebase-tools</span><br><span class="line">ember build --prod</span><br><span class="line">firebase login</span><br><span class="line">firebase init</span><br></pre></td></tr></table></figure><p>执行命令过程需要输入一个public的目录，输入<code>dist</code>后按<code>enter</code>。更新<code>firebase.json</code>的内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;firebase&quot;</span>: <span class="string">&quot;YOUR-APP-NAME&quot;</span>,</span><br><span class="line">  <span class="string">&quot;public&quot;</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">  <span class="string">&quot;rewrites&quot;</span>: [&#123;</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: <span class="string">&quot;**&quot;</span>,</span><br><span class="line">    <span class="string">&quot;destination&quot;</span>: <span class="string">&quot;/index.html&quot;</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遗憾的是在我电脑上一直提示没有<code>firebase</code>命令，即使我已经安装了这个插件也不行。</p><p><strong>发布方式二</strong></p><p>由于上述方式无法发布想到到firebase，所以使用最原始的发布方式，使用<code>ember</code>命令打包项目。然后自己把项目部署到服务器上。</p><ol><li>打包项目<br>打包项目使用命令<code>ember build --prod</code>，等到命令执行完毕后再项目的<code>dist</code>目录下的所有文件即使打包后的项目文件。</li><li>复制打包后的文件到服务器上<br>得到打包后的文件后可以直接把这些文件复制到服务器上运行，比如复制到tomcat的<code>webapps</code>目录下。</li><li>运行项目<br>复制到服务器之后启动服务器，直接访问：<a href="http://localhost:8080/">http://localhost:8080</a></li></ol><h2 id="增加删除、修改功能"><a href="#增加删除、修改功能" class="headerlink" title="增加删除、修改功能"></a>增加删除、修改功能</h2><p>修改项目的library列表页面，增加删除和修改功能。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/libraries/index.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line">## List</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;#each model as |library|&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default library-item&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">### &#123;&#123;library.name&#125;&#125;</span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Address: &#123;&#123;library.address&#125;&#125;</span><br><span class="line"></span><br><span class="line">Phone: &#123;&#123;library.phone&#125;&#125;</span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-footer text-right&quot;</span>&gt;</span></span><br><span class="line">              &#123;&#123;#link-to &#x27;libraries.edit&#x27; library.id class=&#x27;btn btn-success btn-xs&#x27;&#125;&#125;Edit&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-xs&quot;</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">deleteLibrary</span>&#x27; <span class="attr">library</span>&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相比原来的代码增加了一个连接和一个按钮，分别用于编辑和删除library信息。相对于需要增加一个路由<code>libraries/edit</code>和一个处理的动作<code>{{action 'deleteLibrary'}}</code>。<br>如果此时运行<a href="http://localhost:4200/libraries">http://localhost:4200/libraries</a>会出现错误，因为还没定义路由<code>libraries/edit</code>和<code>action</code>。别急，先一步步来，下面先增加一些css样式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># app&#x2F;styles&#x2F;app.scss</span><br><span class="line">@import &#39;bootstrap&#39;;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  padding-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html &#123;</span><br><span class="line">  overflow-y: scroll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.library-item &#123;</span><br><span class="line">  min-height: 150px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建路由libraries-edit和路由对应的模板"><a href="#创建路由libraries-edit和路由对应的模板" class="headerlink" title="创建路由libraries/edit和路由对应的模板"></a>创建路由<code>libraries/edit</code>和路由对应的模板</h2><p>简单起见直接使用<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令创建，就不手动创建了。执行命令：<code>ember g route libraries/edit</code>创建路由和路由对应的模板。<br>创建完成之后还需要手动修改<code>app/router.js</code>文件，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./config/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Router = Ember.Router.extend(&#123;</span><br><span class="line">  location: config.locationType</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;about&#x27;</span>);</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;contact&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;admin&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;invitation&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;contact&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;libraries&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;new&#x27;</span>);</span><br><span class="line">    <span class="comment">// :library_id是一个动态段，会根据实际的URL变化</span></span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;edit&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/:library_id/edit&#x27;</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><p>注意<code>this.route(&#39;edit&#39;, &#123; path: &#39;/:library_id/edit&#39; &#125;);</code>这行代码的设置。与普通的路由稍有不同这里增加了一个参数，并且参数内使用<code>path</code>设定路由渲染之后<code>edit</code>会被<code>/:library_id/edit</code>替换。<br>编译、渲染之后的URL格式为<code>http://example.com/libraries/1234/edit</code>其中<code>:library_id</code>这是一个动态段，这个URL例子中动态段<code>library_id</code>的值就是<code>1234</code>，并且可以在路由类中获取这个动态段的值。<br>更多有关动态段的介绍请看<a href="http://blog.ddlisting.com/2016/03/22/ember-js-ru-men-zhi-nan-zhi-shi-san-link-to/">Ember.js 入门指南之十三{{link-to}} 助手</a>或者<a href="https://guides.emberjs.com/v2.5.0/routing/defining-your-routes/#toc_dynamic-segments">Dynamic Segments</a>。</p><p>配置完路由之后修改路由<code>libraries/edit.js</code>的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/routes/libraries/edit.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">  model(params) &#123;</span><br><span class="line">    <span class="comment">// 获取动态段library_id的值 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.store.findRecord(<span class="string">&#x27;library&#x27;</span>, params.library_id);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">    saveLibrary(newLibrary) &#123;</span><br><span class="line">      newLibrary.save().then(<span class="function">() =&gt;</span> <span class="built_in">this</span>.transitionTo(<span class="string">&#x27;libraries&#x27;</span>));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    willTransition(transition) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> model = <span class="built_in">this</span>.controller.get(<span class="string">&#x27;model&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (model.get(<span class="string">&#x27;hasDirtyAttributes&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">let</span> confirmation = confirm(<span class="string">&quot;Your changes haven&#x27;t saved yet. Would you like to leave this form?&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (confirmation) &#123;</span><br><span class="line">          model.rollbackAttributes();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          transition.abort();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码<code>this.store.findRecord(&#39;library&#39;, params.library_id);</code>的意思是根据模型的<code>id</code>属性值查询某个记录，其中<code>library_id</code>就是动态段的值，这个值是Ember解析URL得到的。正如前面所说：<code>http://example.com/libraries/1234/edit</code>这个URL动态段的值就是<code>1234</code>。<br>Ember会自动根据URL的格式解析得到。并且可以在路由类中获取。默认情况下动态段的值是数据的<code>id</code>值。代码中的另外两个方法<code>saveLibrary()</code>和<code>willTransition()</code>在前一篇文章<a href="http://blog.ddlisting.com/2016/04/09/mo-xing-bao-cun-shu-ju-dao-shu-ju-ku/">模型，保存数据到数据库</a>已经介绍过，在此不再赘述。<br>方法<code>willTransition()</code>的作用就是：当用户修改了数据之后没有点击保存就离开页面时会提示用户是否确认不保存就离开页面！通过控制器中的属性<code>hasDirtyAttributes</code>判断页面的值是否发生了变化。方法<code>rollbackAttributes()</code>会重置<code>model</code>中的值。方法<code>abourt()</code>可以阻止路由的跳转，有关路由的跳转请看<a href="http://blog.ddlisting.com/2016/03/25/ember-js-ru-men-zhi-nan-zhi-er-shi-si-zhong-yu-yu-zhong-shi-lu-you-zhuan-huan/">Ember.js 入门指南之二十四终止与重试路由跳转</a>。从<code>new.hbs</code>复制代码到<code>edit.hbs</code>，然后在稍加修改。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/libraries/edit.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line">## Edit Library</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123;input type=&quot;text&quot; value=model.name class=&quot;form-control&quot; placeholder=&quot;The name of the Library&quot;&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123;input type=&quot;text&quot; value=model.address class=&quot;form-control&quot; placeholder=&quot;The address of the Library&quot;&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Phone<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123;input type=&quot;text&quot; value=model.phone class=&quot;form-control&quot; placeholder=&quot;The phone number of the Library&quot;&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">saveLibrary</span>&#x27; <span class="attr">model</span>&#125;&#125;&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等待项目重启完成，进入到修改界面，任意修改界面上的数据，不点击保存然后任意点击其他链接会弹出提示，询问你是否确认离开页面。操作步骤如下截图。</p><p><img src="/image/blog-image/162.png" alt="library主页"></p><p><img src="/image/blog-image/1.jpeg" alt="library修改页面"></p><p><strong>注意</strong>：看浏览器的URL。首页模板代码<code>{{#link-to 'libraries.edit' library.id class='btn btn-success btn-xs'}}Edit{{/link-to}}</code>中的路由<code>libraries.edit</code>渲染之后会得到形如<code>libraries/xxx/edit</code>的URL，其中<code>xxx</code>就是动态段的值。</p><p><img src="/image/blog-image/164.png" alt="修改name的值，然后点击菜单的Home"></p><p><img src="/image/blog-image/165.png" alt="library未保存离开页面提示"></p><p>弹出提示信息。如果点击取消会停留在当前页面，如果选中确定会跳转到首页（因为我点击的是菜单的Home）。</p><p><img src="/image/blog-image/166.png" alt="修改后点击保存"></p><p>成功保存了修改的内容。到此实现了修改功能。</p><h2 id="实现删除功能"><a href="#实现删除功能" class="headerlink" title="实现删除功能"></a>实现删除功能</h2><p>删除功能比修改更加简单，直接在方法<code>deleteLibrary</code>里根据<code>id</code>属性值删除数据即可。<code>id</code>属性值已经在模板页面作为参数传递到方法中。直接获取即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/routes/libraries/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">  model() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.store.findAll(<span class="string">&#x27;library&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">      <span class="comment">// 删除一个library记录</span></span><br><span class="line">      deleteLibrary(library) &#123;  <span class="comment">//参数library已经在模板中传递过来</span></span><br><span class="line">      <span class="keyword">let</span> confirmation = confirm(<span class="string">&#x27;Are you sure?&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (confirmation) &#123;</span><br><span class="line">        library.destroyRecord();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>模板中是这样调用删除方法的<code><button class="btn btn-danger btn-xs" {{action 'deleteLibrary' library}}>Delete</button></code>，看到参数<code>library</code>了吧，这个参数就是一个<code>library</code>模型对象。<br>可以直接调用方法<code>destroyRecord()</code>实现删除数据。</p><p><img src="/image/blog-image/167.png" alt="点击删除按钮"></p><p>选中确定之后删除就会立刻删除，列表上的数据也会动态更新。</p><h2 id="家庭作业"><a href="#家庭作业" class="headerlink" title="家庭作业"></a>家庭作业</h2><p>参照library的功能实现contact的删除与修改。</p><h4 id="新建路由和模板"><a href="#新建路由和模板" class="headerlink" title="新建路由和模板"></a>新建路由和模板</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember g route admin&#x2F;contact&#x2F;edit</span><br><span class="line">ember g template admin&#x2F;contact&#x2F;index</span><br></pre></td></tr></table></figure><h4 id="修改router-js，增加配置"><a href="#修改router-js，增加配置" class="headerlink" title="修改router.js，增加配置"></a>修改router.js，增加配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/router.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.route(<span class="string">&#x27;admin&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;invitation&#x27;</span>);</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;contact&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;edit&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/:contact_id/edit&#x27;</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>省略其他内容，仅仅列出修改部分。</p><h4 id="复制admin-contact-hbs的内容到admin-contact-index-hbs，然后空admin-contact-hbs再在文件内添加-lt-￼10-gt"><a href="#复制admin-contact-hbs的内容到admin-contact-index-hbs，然后空admin-contact-hbs再在文件内添加-lt-￼10-gt" class="headerlink" title="复制admin/contact.hbs的内容到admin/contact/index.hbs，然后空admin/contact.hbs再在文件内添加{{outlet}}"></a>复制<code>admin/contact.hbs</code>的内容到<code>admin/contact/index.hbs</code>，然后空<code>admin/contact.hbs</code>再在文件内添加<code>null</code></h4><p><code>admin/contact.hbs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/admin/contact.hbs --&gt;</span></span><br><span class="line">&#123;&#123;outlet&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>admin/contact/index.hbs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;! app/templates/admin/contact/index.hbs&#125;&#125;</span><br><span class="line"></span><br><span class="line"># Contacts</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-striped&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>E-mail<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Operation<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;&#123;#each model as |contact|&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;contact.id&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;contact.email&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;contact.message&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                &#123;&#123;#link-to &#x27;admin.contact.edit&#x27; contact.id class=&#x27;btn btn-success btn-xs&#x27;&#125;&#125;Edit&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-xs&quot;</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">deleteContact</span>&#x27; <span class="attr">contact</span>&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>增加删除、修改按钮。</p><h4 id="复制app-templates-contact-hbs到admin-contact-edit-hbs并做修改"><a href="#复制app-templates-contact-hbs到admin-contact-edit-hbs并做修改" class="headerlink" title="复制app/templates/contact.hbs到admin/contact/edit.hbs并做修改"></a>复制<code>app/templates/contact.hbs</code>到<code>admin/contact/edit.hbs</code>并做修改</h4><p>admin/contact/edit.hbs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;! app/templates/admin/contact/edit.hbs&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-6 col-xs-6&quot;</span>&gt;</span><br><span class="line">   &lt;form&gt;</span><br><span class="line">     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">         &lt;label <span class="keyword">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span>&gt;Email address&lt;/label&gt;</span><br><span class="line">         &#123;&#123;input type=<span class="string">&quot;email&quot;</span> value=model.email <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control col-sm-6 col--6&quot;</span> placeholder=<span class="string">&quot;Please type your e-mail address.&quot;</span> autofocus=<span class="string">&quot;autofocus&quot;</span>&#125;&#125;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">         &lt;label <span class="keyword">for</span>=<span class="string">&quot;exampleInputPassword1&quot;</span>&gt;Your message&lt;/label&gt;</span><br><span class="line">         &#123;&#123;textarea <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> placeholder=<span class="string">&quot;Your message. (At least 5 characters.)&quot;</span> rows=<span class="string">&quot;7&quot;</span> value=model.message&#125;&#125;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">     &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-primary&quot;</span> disabled=&#123;&#123;model.isDisabled&#125;&#125; &#123;&#123;action <span class="string">&#x27;saveContact&#x27;</span> model&#125;&#125;&gt;Save&lt;/button&gt;</span><br><span class="line">     &#123;&#123;#link-to &#x27;admin.contact&#x27; class=&quot;btn btn-default&quot;&#125;&#125;Return&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="修改routes-context-js"><a href="#修改routes-context-js" class="headerlink" title="修改routes/context.js"></a>修改<code>routes/context.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/routes/contact.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">    model: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.store.findAll(<span class="string">&#x27;contact&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        deleteContact: <span class="function"><span class="keyword">function</span>(<span class="params">contact</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> confirmation = confirm(<span class="string">&#x27;Are you sure?&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (confirmation) &#123;</span><br><span class="line">              contact.destroyRecord();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="修改app-routes-admin-contact-edit-js"><a href="#修改app-routes-admin-contact-edit-js" class="headerlink" title="修改app/routes/admin/contact/edit.js"></a>修改<code>app/routes/admin/contact/edit.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/routes/admin/contact/edit.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">  model(params) &#123;</span><br><span class="line">    <span class="comment">// 获取动态段library_id的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.store.findRecord(<span class="string">&#x27;contact&#x27;</span>, params.contact_id);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">    saveContact(newContact) &#123;</span><br><span class="line">      newContact.save().then(<span class="function">() =&gt;</span> <span class="built_in">this</span>.transitionTo(<span class="string">&#x27;admin.contact&#x27;</span>));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    willTransition(transition) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> model = <span class="built_in">this</span>.controller.get(<span class="string">&#x27;model&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (model.get(<span class="string">&#x27;hasDirtyAttributes&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">let</span> confirmation = confirm(<span class="string">&quot;Your changes haven&#x27;t saved yet. Would you like to leave this form?&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (confirmation) &#123;</span><br><span class="line">          model.rollbackAttributes();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          transition.abort();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果不再截图列出，请读者自行试验。</p><p>为了照顾懒人我把完整的代码放在<a href="https://github.com/ubuntuvim/library-app">GitHub</a>上，可以拿来做参照。博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！如果你觉得博文对你有点用，请在github项目上给我点个<code>star</code>吧。您的肯定对我来说是最大的动力！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何构建一个复杂的Ember.js项目</title>
      <link href="/2020/01/18/Ember-Demo/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%A4%8D%E6%9D%82%E7%9A%84Ember.js%E9%A1%B9%E7%9B%AE/"/>
      <url>/2020/01/18/Ember-Demo/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%A4%8D%E6%9D%82%E7%9A%84Ember.js%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>本系列教材将为读者介绍怎么样使用Ember.js构建一个复杂的项目。本教程分为6个小部分，通过这6篇文章一步步为你讲解怎么使用Ember.js构建一个稍微复杂的Ember.js项目。</p><p>有关Ember.js的前世今生我就不多做介绍了，请自行查看官方<a href="http://emberjs.com/">参考文档</a></p><p>提醒：如果可以最好是在看一遍官方参考文档之后再看本系列教程，有助于把你所学的零碎的有关Ember的知识串联起来，否则，可能你会看得比较痛苦，建议是先把这6篇文章认真看一遍下来再自己动手，按照文章提供的源码自己再实践一遍。</p><p><strong>目录</strong></p><ol><li><a href="http://xcoding.tech/2016/03/30/Ember-Demo/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8Ember.js%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/">环境搭建以及使用Ember.js创建第一个静态页面</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E5%BC%95%E5%85%A5%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E3%80%81action%E3%80%81%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9/">引入计算属性、action、动态内容</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E6%A8%A1%E5%9E%8B%EF%BC%8C%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93/">模型，保存数据到数据库</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%8A%A0%E5%85%A5CRUD%E5%8A%9F%E8%83%BD/">发布项目，加入CRUD功能</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%BC%95%E5%85%A5%E7%BB%84%E4%BB%B6/">从服务器获取数据，引入组件</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E6%A8%A1%E5%9E%8B%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%EF%BC%8C%E5%BC%95%E5%85%A5%E6%A8%A1%E5%9E%8B%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB/">模型高级特性，引入模型关联关系</a></li></ol><p><strong>项目软件环境</strong></p><ol><li><a href="https://nodejs.org/en/">NodeJS 5.9.1</a></li><li><a href="http://www.ember-cli.com/user-guide/">Ember CLI 2.4.3</a></li><li><a href="https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi?hl=en">chrome插件Ember Inspector</a>，如果无法访问那你应该要去fanqiang了！！</li><li><a href="https://facebook.github.io/watchman/">Watchman（可选，如果是Mac系统推荐安装）</a></li></ol><p>上述软件请自行安装提供的网址安装，如果安装不成功，或者安装出现错误，请谷歌、百度。如果还是解决不了给我留言获取是去<a href="http://discuss.emberjs.com/">Ember 社区</a>提问。</p><p><strong>说明：本教程是基于Ember2.4而作，请注意与你自己的Ember.js版本区别，如果出现不兼容问题请自行升级项目。</strong></p><p>升级教程：<a href="http://xcoding.tech/2016/09/12/Ember.js/%E5%8D%87%E7%BA%A7Ember-cli/">http://xcoding.tech/2016/09/12/Ember.js/%E5%8D%87%E7%BA%A7Ember-cli/</a><br>本教程是介绍升级到2.2版本的，不过同样的道理，只需要修改对应的版本为2.4即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ember.js代码备忘</title>
      <link href="/2020/01/18/Ember.js/Ember.js%E4%BB%A3%E7%A0%81%E5%A4%87%E5%BF%98/"/>
      <url>/2020/01/18/Ember.js/Ember.js%E4%BB%A3%E7%A0%81%E5%A4%87%E5%BF%98/</url>
      
        <content type="html"><![CDATA[<h4 id="获取父路由的参数"><a href="#获取父路由的参数" class="headerlink" title="获取父路由的参数"></a>获取父路由的参数</h4><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">App.ApplicationAdapter = DS.Adapter.extend(&#123;</span><br><span class="line">  deleteRecord: <span class="function"><span class="keyword">function</span>(<span class="params">store, type, record</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">this</span>.serialize(record, &#123; <span class="attr">includeId</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="keyword">var</span> id = record.get(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> url = [type, id].join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Ember.RSVP.Promise(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      jQuery.ajax(&#123;</span><br><span class="line">        type: <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">        url: url,</span><br><span class="line">        dataType: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        data: data</span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        Ember.run(<span class="literal">null</span>, resolve, data);</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>) </span>&#123;</span><br><span class="line">        jqXHR.then = <span class="literal">null</span>; <span class="comment">// tame jQuery&#x27;s ill mannered promises</span></span><br><span class="line">        Ember.run(<span class="literal">null</span>, reject, jqXHR);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.parentController.getProperties(<span class="built_in">this</span>.parentController.queryParams);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/emberjs/rfcs/blob/master/text/0050-improved-actions.md">https://github.com/emberjs/rfcs/blob/master/text/0050-improved-actions.md</a></p><h3 id="2-使用数组下标取值"><a href="#2-使用数组下标取值" class="headerlink" title="2. 使用数组下标取值"></a>2. 使用数组下标取值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model() &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    [<span class="number">1</span>, <span class="string">&quot;text a&quot;</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="string">&quot;text b&quot;</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="string">&quot;text c&quot;</span>],</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.[0]&#125;&#125;: &#123;&#123;item.[1]&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;&#123;#each model as |item|&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.0.text&#125;&#125;: &#123;&#123;item.1.text&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;#each model as |item index|&#125;&#125;</span><br><span class="line">  Index is: &#123;&#123;index&#125;&#125;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="服务程序"><a href="#服务程序" class="headerlink" title="服务程序"></a>服务程序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// other dependencies installed via `npm install --save-dev`</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  app.use(bodyParser.json(&#123; <span class="attr">type</span>: <span class="string">&quot;application/json&quot;</span> &#125;));</span><br><span class="line"></span><br><span class="line">  app.get(<span class="string">&#x27;/api/items/:item&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> item = localdb.find(<span class="string">&#x27;item&#x27;</span>, req.params.item);</span><br><span class="line">    res.send(&#123; <span class="attr">item</span>: item &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// other API endpoints</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境搭建以及使用Ember.js创建第一个静态页面</title>
      <link href="/2020/01/18/Ember-Demo/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8Ember.js%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/"/>
      <url>/2020/01/18/Ember-Demo/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8Ember.js%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>来源：<a href="http://yoember.com/">yoember.com</a><br>作者：<a href="http://zoltan.nz/">Zoltan</a></p><p><strong>声明</strong>：<em>本文的转载与翻译是经过作者认可的，再次感谢原作，如有侵权请给我留言，我会删除博文！！</em> 希望本系列教程能帮助更多学习Ember.js的初学者。</p><p>本篇将为读者介绍Ember项目开发环境的搭建，并创建一个静态页面。</p><h2 id="安装Ember-CLI"><a href="#安装Ember-CLI" class="headerlink" title="安装Ember CLI"></a>安装Ember CLI</h2><p>本教程使用的是<code>2.4.3</code>版本的Ember CLI工具集，如果你的是<code>1.13.8</code>版本在启动项目时会提示如下错误：<br><code>Future versions of Ember CLI will not support v5.9.1. Please update to Node 0.12 or io.js.</code><br>但是项目仍然可以正常访问，不过建议还是升级到<code>2.4.3</code>版本，省得出现未知错误不好解决。<br>升级命令：<code>npm install -g ember-cli@2.4.3</code></p><p>查看<code>ember</code>命令是否安装成功，在终端或者控制台下输入下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember -v</span><br></pre></td></tr></table></figure><p>如果出现如下信息说明环境搭建成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">version: 2.4.3</span><br><span class="line">node: 5.9.1</span><br><span class="line">npm: 2.13.4</span><br><span class="line">os: darwin x64</span><br></pre></td></tr></table></figure><p>如果你用的电脑不是Mac最后一行os有所不同，这个不要紧。第一行是<code>Ember CLI</code>的版本号，第二行是<code>node</code>的版本号，第三行是<code>npm</code>的版本号，最后一个是系统版本。</p><p><strong>注意</strong></p><p>如果你的执行<code>ember -v</code>得不到上述的版本信息也不要紧，仍然按照下面的教程新建项目新建完成项目之后再更行Ember CLI的版本，更新教程请参考<a href="https://github.com/ember-cli/ember-cli/releases">Could this be a shame in the making?</a>，只需要根据<strong>Project Update</strong>部分更新项目即可，更新到最后一步<code>ember init</code>时候会如下确认信息，全部<code>y</code>即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">? Overwrite .travis.yml? Yes, overwrite</span><br><span class="line">? Overwrite .watchmanconfig? Yes, overwrite</span><br><span class="line">? Overwrite README.md? Yes, overwrite</span><br><span class="line">? Overwrite app/app.js? Yes, overwrite</span><br><span class="line">? Overwrite app/index.html? Yes, overwrite</span><br><span class="line">? Overwrite app/router.js? Yes, overwrite</span><br><span class="line">? Overwrite bower.json? Yes, overwrite</span><br><span class="line">? Overwrite ember-cli-build.js? Yes, overwrite</span><br><span class="line">? Overwrite package.json? Yes, overwrite</span><br><span class="line">? Overwrite tests/helpers/resolver.js? Yes, overwrite</span><br><span class="line">? Overwrite tests/helpers/start-app.js? Yes, overwrite</span><br><span class="line">? Overwrite tests/index.html? Yes, overwrite</span><br></pre></td></tr></table></figure><p>更新过程可能还会出现如下选择版本的问题，请根据下面例子选择：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Installed packages for tooling via npm.</span><br><span class="line">  conflict Unable to find suitable version for qunit-notifications</span><br><span class="line">    1) qunit-notifications ~0.0.6</span><br><span class="line">    2) qunit-notifications ~0.1.0</span><br><span class="line">? Answer 2</span><br><span class="line">  conflict Unable to find suitable version for ember</span><br><span class="line">    1) ember &gt;= 1.8.1 &lt; 2.0.0</span><br><span class="line">    2) ember &gt;=1.4 &lt;2</span><br><span class="line">    3) ember &gt; 1.5.0-beta.3</span><br><span class="line">    4) ember ~2.4.3</span><br><span class="line">    5) ember &gt;=1.4</span><br><span class="line">? Answer 4</span><br><span class="line">Installed browser packages via Bower.</span><br></pre></td></tr></table></figure><p>最后验证是否更新成功，执行<code>ember -v</code>会得到如下版本信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ubuntuvimdeMacBook-Pro:library-app ubuntuvim$ ember -v</span><br><span class="line">ember-cli: 2.4.3</span><br><span class="line">node: 5.9.1</span><br><span class="line">os: darwin x64</span><br></pre></td></tr></table></figure><p>更多有关开发环境的详细介绍请看<a href="http://ember-cli.com/user-guide">www.ember-cli.com</a>。</p><h2 id="创建一个新项目"><a href="#创建一个新项目" class="headerlink" title="创建一个新项目"></a>创建一个新项目</h2><p>安装好开发环境之后，直接使用<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令创建新项目。下面是创建命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember new library-app</span><br></pre></td></tr></table></figure><p>等待命令执行完成，安装过程需要下载所必须的npm插件，跟网络有关系，请耐心等待。</p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>等待项目创建完成之后就可以直接使用命令运行项目了，首先进入项目目录下，然后执行ember cli命令运行项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;  进入项目目录下</span><br><span class="line">cd library-app</span><br><span class="line">&#x2F;&#x2F;  执行启动命令</span><br><span class="line">ember server</span><br></pre></td></tr></table></figure><p><em><code>//</code>的内容为注释，请直接忽略。</em></p><p>等待启动完毕后，打开浏览器执行<a href="http://localhost:4200/">http://localhost:4200</a>，如果能在页面上看到<strong>Welcome to Ember</strong>说明项目创建成功。并且可以在浏览器控制台上看到如下图的日志信息：</p><p><img src="/image/blog-image/55.png" alt="日志信息"></p><h2 id="开启调试模式"><a href="#开启调试模式" class="headerlink" title="开启调试模式"></a>开启调试模式</h2><p>在开发阶段最好是把打开调试模式，开启之后可以在浏览器的控制台下看到ember项目执行过程的相关信息，有助于发现问题。<br>修改<code>library-app/config/environment.js</code>文件的内容，在下面代码段中增加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ……</span><br><span class="line">if (environment &#x3D;&#x3D;&#x3D; &#39;development&#39;) &#123;</span><br><span class="line">  &#x2F;&#x2F; ENV.APP.LOG_RESOLVER &#x3D; true;</span><br><span class="line">  ENV.APP.LOG_ACTIVE_GENERATION &#x3D; true;</span><br><span class="line">  ENV.APP.LOG_TRANSITIONS &#x3D; true;</span><br><span class="line">  ENV.APP.LOG_TRANSITIONS_INTERNAL &#x3D; true;</span><br><span class="line">  ENV.APP.LOG_VIEW_LOOKUPS &#x3D; true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;……</span><br></pre></td></tr></table></figure><p>重启项目（按<code>Ctrl+C</code>终止在执行<code>ember servere</code>），必须重启才能其效果，可以在浏览器控制台看到了很多的日志信息。比如下图</p><p><img src="/image/blog-image/56.png" alt="开启日志模式截图"></p><h2 id="添加Bootstrap和Sass到项目中"><a href="#添加Bootstrap和Sass到项目中" class="headerlink" title="添加Bootstrap和Sass到项目中"></a>添加Bootstrap和Sass到项目中</h2><p>为了美化项目界面引入<a href="http://www.bootcss.com/">Bootstrap</a>，这两个插件的安装也是直接使用Ember CLI命令安装，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember install ember-cli-sass</span><br><span class="line">ember install ember-cli-bootstrap-sassy</span><br></pre></td></tr></table></figure><p>等待安装完成之后可以在项目目录下的<code>pachage.json</code>和<code>bower.json</code>看到这两个插件的配置信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;  bower.json</span><br><span class="line">&quot;bootstrap-sass&quot;: &quot;^3.3.6&quot;</span><br><span class="line">&#x2F;&#x2F; package.json</span><br><span class="line">&quot;ember-cli-sass&quot;: &quot;5.3.1&quot;</span><br></pre></td></tr></table></figure><p><strong>在项目下增加样式文件</strong></p><p>创建文件<code>library-app/app/styles/app.scss</code>，如果项目已经存在文件<code>library-app/app/styles/app.css</code>则重命名为<code>app.scss</code>，样式会被Ember CLI引入到项目中。<br>在文件中增加如下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;bootstrap&quot;</span>;</span><br></pre></td></tr></table></figure><p>使用快捷键<code>Ctrl+C</code>关闭在用命令<code>ember server</code>启动项目。如果终端没出现错误说明配置是正确的。那么请继续往下看！！</p><h2 id="创建项目导航条"><a href="#创建项目导航条" class="headerlink" title="创建项目导航条"></a>创建项目导航条</h2><p>在前面引入的了<a href="http://www.bootcss.com/">Bootstrap</a>之后我们就可以在页面中直接使用了，并且不需要再在页面上引入相关的<code>css</code>和<code>js</code>文件。<br>打开文件<code>library-app/app/templates/application.hbs</code>，清空原有代码再添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;partial &#x27;navbar&#x27;&#125;&#125;</span><br><span class="line">    &#123;&#123;outlet&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Ember.js项目的页面使用的是<a href="http://handlebarsjs.com/">Handlebarsjs</a>模板，<code>{{}}`是模板的语法。在Ember.js的官方参考教程中有一章是专门介绍如何使用Handlebarsjs模板的，或者根据[Ember.js 入门指南之八handlebars基础](http://blog.ddlisting.com/2016/03/18/ember-js-ru-men-zhi-nan-zhi-ba-handlebarsji-chu/)学习。在上述代码中`{{partial}}</code>是一个<a href="https://guides.emberjs.com/v1.13.0/templates/rendering-with-helpers/">ember helper</a>可以用于调用模板，这里就是调用了模板<code>navbar</code>，不过这个功能在<code>2.4</code>的参考文档中移除了可以在<code>1.13.0</code>的文档中看到，更多有关信息请看参考网址。<br>代码中<code>{{outlet}}</code>也是一个helper，但是这个是一个特殊的helper，你可以把这个helper理解为一个占位符。所有子模板都会渲染到<code>{{outlet}}</code>所在的位置。更多信息请看<a href="http://blog.ddlisting.com/2016/03/22/ember-js-ru-men-zhi-nan-zhi-shi-si-fan-wai-pian-lu-you-mo-ban-de-zhi-xing-xuan-ran-shun-xu/">Ember.js 入门指南之十四番外篇，路由、模板的执行、渲染顺序</a>。</p><p><strong>创建一个模板</strong></p><p>仍然是使用命令创建模板。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember g template navbar</span><br></pre></td></tr></table></figure><p>等待命令执行完毕之后可以看到<code>library-app/app/templates/navbar.hbs</code>这个文件。下面在文件中增加一个导航条。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-inverse&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#main-navbar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      &#123;&#123;#link-to &#x27;index&#x27; class=&quot;navbar-brand&quot;&#125;&#125;Library App&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;main-navbar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;#link-to &#x27;index&#x27; tagName=&quot;li&quot;&#125;&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码中<code>{{link-to}}</code>是Handlebars模板的标签，在第一个<code>{{link-to}}</code>标签中<code>index</code>是一个路由的名字，模板被编译之后这个标签就转成一个普遍HTML标签的<code>&lt;a&gt;</code>，如果你想指定编译之后的标签名请使用属性<code>tagName</code>指定，比如上述代码的第二个<code>link-to</code>标签，在后面的文章中会使用组件（<code>component</code>）重构这个标签。<br><em>为了美化界面在页面的顶部加了css的填充，修改样式文件<code>app.scss</code>。</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;bootstrap&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等待项目重启完成，可以在页面上看到黑色的导航条，好像我们并且没有在任何地方使用这个模板<code>navbar</code>，为何能在首页上显示呢？？其实我们已经在<code>application.hbs</code>中调用了！在这个模板中有这样一句代码<code>{{partial 'navbar'}}</code>，在此根据模板名调用了模板<code>navbar</code>。如果删除了<code>application.hbs</code>中的<code>{{partial}}</code>界面上就什么都不显示了！请读者自行实验。</p><h2 id="创建关于界面并在导航菜单上增加一个菜单项"><a href="#创建关于界面并在导航菜单上增加一个菜单项" class="headerlink" title="创建关于界面并在导航菜单上增加一个菜单项"></a>创建关于界面并在导航菜单上增加一个菜单项</h2><p>同样的，使用Ember CLI命令创建一个路由（route），有关路由的信息可以查看官方参考文档或者直接看教程<a href="http://blog.ddlisting.com/2016/03/25/ember-js-ru-men-zhi-nan-zhi-er-shi-lu-you-ding-yi/">Ember.js 入门指南之二十路由定义</a>，文章上有详细的介绍，欢迎阅读！执行下面的命令创建路由，创建路由的过程中会同时创建路由对应的模板，所以执行一个命令会得到2个文件：<code>app/templates/about.hbs</code>、<code>app/routes/about.js</code>，同时会在<code>app/router.js</code>中app/自动增加一条路由配置语句<code>this.route(&#39;about&#39;);</code>。然后在模板<code>about.hbs</code>中增加一些信息：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;! app/templates/about.hbs &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>About Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等待项目重启完成，执行<a href="http://localhost:4200/about">http://localhost:4200/about</a>可以看到刚刚在模板<code>about.hbs</code>中增加的信息，如下截图。</p><p><img src="/image/blog-image/81.png" alt="结果截图"></p><p>但是”About Page”怎么会显示在导航条下方呢？好像并没有指定啊，也没有想前面那样使用表达式<code>{{partial}}</code>调用模板，有关这个内容的介绍请看<a href="http://blog.ddlisting.com/2016/03/22/ember-js-ru-men-zhi-nan-zhi-shi-si-fan-wai-pian-lu-you-mo-ban-de-zhi-xing-xuan-ran-shun-xu/">Ember.js 入门指南之十四番外篇，路由、模板的执行、渲染顺序</a>，还记得在主模板<code>application.hbs</code>中的<code>{{outlet}}</code>吗？除了<code>application.hbs</code>之外的所有模板都是子模板，子模板会自动渲染到父模板的<code>{{outlet}}</code>上。但是是如何触发显示的呢？很简单，因为我们访问了<code>about</code>这个路由，路由会自动根据名字查找到同名的模板并显示（Ember默认规则）。</p><p>再创建一个模板<code>index</code>，仍然是使用Ember CLI命令创建，执行命令：<code>ember g template index</code>，得到模板后再模板内添加一些内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;! app/templates/index.hbs&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后执行<a href="http://localhost:4200/">http://localhost:4200/</a>，神奇的事情发生了，可以直接看到模板<code>index</code>的内容，并且并没有访问<a href="http://localhost:4200/index">http://localhost:4200/index</a>。这又是为什么呢？请看<a href="http://blog.ddlisting.com/2016/03/25/ember-js-ru-men-zhi-nan-zhi-er-shi-lu-you-ding-yi/">Ember.js 入门指南之二十路由定义</a>中关于<code>index</code>路由的解释。简单讲，<code>index</code>路由就是每个路由默认首页路由，不需要手动创建，这个路由对应的URL是<code>/</code>，当你执行<a href="http://localhost:4200/">http://localhost:4200/</a>时候实际就是执行<a href="http://localhost:4200/index">http://localhost:4200/index</a>然后渲染的模板就是<code>index.hbs</code>，所以就得到界面显示的效果。<br>然后在导航栏上在添加一个链接，最后得打如下代码（前后部分代码省略）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;#link-to &#x27;index&#x27; tagName=&quot;li&quot;&#125;&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">            &#123;&#123;#link-to &#x27;about&#x27; tagName=&quot;li&quot;&#125;&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等待项目重启完成，可以看到导航栏上多了一项，并且点击“Home”和“About”看到显示不同的内容。效果如下图：</p><p><img src="/image/blog-image/81.png" alt="效果图"></p><p>到此教程第一篇介绍完毕，如果你看过官方参考文件或者是看过<a href="http://blog.ddlisting.com/">ember teach</a>上的教程理解起来应该是没难度的！多一份耐心就多一份收获。</p><h2 id="家庭作业"><a href="#家庭作业" class="headerlink" title="家庭作业"></a>家庭作业</h2><p>最后给你留了一份作业，想学好就必须要动手实践才行啊！！！</p><p>作业内容：</p><ol><li>创建一个名为<code>contact</code>的路由和模板</li><li>在导航菜单上增加一个菜单项”Contact”，并且点击这个菜单项看到的是模板<code>contact.hbs</code>的内容。</li></ol><br>为了照顾懒人我把完整的代码放在[GitHub](https://github.com/ubuntuvim/library-app)上，如有需要请参考参考。博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ember.js插件</title>
      <link href="/2020/01/18/Ember.js/Ember.js%E6%8F%92%E4%BB%B6/"/>
      <url>/2020/01/18/Ember.js/Ember.js%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="获取密码策略的分数"><a href="#获取密码策略的分数" class="headerlink" title="获取密码策略的分数"></a>获取密码策略的分数</h3><p>可以根据密码的复制程度得到密码的复杂分数<br><a href="https://www.npmjs.com/package/ember-cli-password-strength">https://www.npmjs.com/package/ember-cli-password-strength</a></p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p><a href="https://www.npmjs.com/package/upload-file">https://www.npmjs.com/package/upload-file</a></p><h3 id="Ember-js权限问题"><a href="#Ember-js权限问题" class="headerlink" title="Ember.js权限问题"></a>Ember.js权限问题</h3><p><a href="http://simplabs.com/blog/2015/11/27/updating-to-ember-simple-auth-1.0.html">http://simplabs.com/blog/2015/11/27/updating-to-ember-simple-auth-1.0.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ember.js适配器跨域请求问题</title>
      <link href="/2020/01/18/Ember.js/Ember.js%E9%80%82%E9%85%8D%E5%99%A8%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E9%97%AE%E9%A2%98/"/>
      <url>/2020/01/18/Ember.js/Ember.js%E9%80%82%E9%85%8D%E5%99%A8%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在适配器中重写如下方法可实现跨域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ajaxOptions: <span class="function"><span class="keyword">function</span>(<span class="params">url, type, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hash = <span class="built_in">this</span>._super(url, type, options);</span><br><span class="line">    hash.dataType = <span class="string">&quot;jsonp&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ember如何整合多说</title>
      <link href="/2020/01/18/Ember.js/Ember%E5%A6%82%E4%BD%95%E6%95%B4%E5%90%88%E5%A4%9A%E8%AF%B4/"/>
      <url>/2020/01/18/Ember.js/Ember%E5%A6%82%E4%BD%95%E6%95%B4%E5%90%88%E5%A4%9A%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<p>有时间看看如何整合多说到Ember.js项目中，不需要再自己开发评论功能了！</p><p><a href="https://github.com/duoshuo/node-duoshuo">https://github.com/duoshuo/node-duoshuo</a></p><h3 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DUOSHUO.initSelector(<span class="string">&#x27;.ds-share&#x27;</span>,&#123;<span class="attr">type</span>:<span class="string">&#x27;ShareWidget&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><p><a href="http://dev.duoshuo.com/docs/50b344447f32d30066000147">http://dev.duoshuo.com/docs/50b344447f32d30066000147</a></p><p>不少站长来询问，希望在首页的文章列表中实现，“点击一个按钮展开该文章的评论”的功能。</p><p>其实现在的多说就已经支持这样的模式，实现方法并不复杂：</p><p>1.首先加载多说embed.js基础代码，并设置duoshuoQuery，在head内加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;var duoshuoQuery &#x3D; &#123;short_name:&quot;你的多说二级域名&quot;&#125;;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;static.duoshuo.com&#x2F;embed.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>多说二级域名是指你注册多说时，填写的abc.duoshuo.com中的abc部分，</p><p>2.编写一个javascript函数，以下函数为示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function toggleDuoshuoComments(container)&#123;</span><br><span class="line">    var el &#x3D; document.createElement(&#39;div&#39;);&#x2F;&#x2F;该div不需要设置class&#x3D;&quot;ds-thread&quot;</span><br><span class="line">    el.setAttribute(&#39;data-thread-key&#39;, &#39;文章的本地ID&#39;);&#x2F;&#x2F;必选参数</span><br><span class="line">    el.setAttribute(&#39;data-url&#39;, &#39;你网页的网址&#39;);&#x2F;&#x2F;必选参数</span><br><span class="line">    el.setAttribute(&#39;data-author-key&#39;, &#39;作者的本地用户ID&#39;);&#x2F;&#x2F;可选参数</span><br><span class="line">    DUOSHUO.EmbedThread(el);</span><br><span class="line">    jQuery(container).append(el);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在按钮上增加onclick事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;toggleDuoshuoComments(&#x27;#comment-box&#x27;);&quot;</span>&gt;</span>展开评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;comment-box&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类似的，如果需要在页面加载外之后，动态调用评论数刷新，请调用<code>DUOSHUO.ThreadCount</code>函数。</p><h2 id="disqus"><a href="#disqus" class="headerlink" title="disqus"></a>disqus</h2><p><a href="https://github.com/sir-dunxalot/ember-disqus">https://github.com/sir-dunxalot/ember-disqus</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>access token生成</title>
      <link href="/2020/01/18/Ember.js/access%20token%E7%94%9F%E6%88%90/"/>
      <url>/2020/01/18/Ember.js/access%20token%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>使用插件生成一个包括用户新的access token<br><a href="https://github.com/auth0/node-jsonwebtoken">https://github.com/auth0/node-jsonwebtoken</a></p><p>用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user.token = jwt.sign(user, process.env.JWT_SECRET);</span><br><span class="line">user.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, user1</span>) </span>&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">        type: <span class="literal">true</span>,</span><br><span class="line">        data: user1,</span><br><span class="line">        token: user1.token</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>参考</strong></p><ol><li><a href="https://zhuanlan.zhihu.com/p/19920223">https://zhuanlan.zhihu.com/p/19920223</a></li><li><a href="https://github.com/huseyinbabal/token-based-auth-backend/blob/master/server.js">https://github.com/huseyinbabal/token-based-auth-backend/blob/master/server.js</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firebase数据访问权限设置</title>
      <link href="/2020/01/18/Ember.js/firebase%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/"/>
      <url>/2020/01/18/Ember.js/firebase%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;有权限的user才能访问</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    &quot;users&quot;: &#123;</span><br><span class="line">      &quot;$uid&quot;: &#123;</span><br><span class="line">        &#x2F;&#x2F; grants write access to the owner of this user account whose uid must exactly match the key ($uid)</span><br><span class="line">        &quot;.write&quot;: &quot;auth !&#x3D;&#x3D; null &amp;&amp; auth.uid &#x3D;&#x3D;&#x3D; $uid&quot;,</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; grants read access to any user who is logged in with Twitter</span><br><span class="line">        &quot;.read&quot;: &quot;auth !&#x3D;&#x3D; null&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 任何人都可以访问</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    &quot;.read&quot;: true,</span><br><span class="line">    &quot;.write&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>refresh-current-routes-model-from-application-template</title>
      <link href="/2020/01/18/Ember.js/refresh-current-routes-model-from-application-template/"/>
      <url>/2020/01/18/Ember.js/refresh-current-routes-model-from-application-template/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controllers/application</span></span><br><span class="line">actions: &#123;</span><br><span class="line">  refreshCurrentModel() &#123;</span><br><span class="line">    <span class="keyword">let</span> route = Ember.getOwner(<span class="built_in">this</span>).lookup(<span class="string">`route:<span class="subst">$&#123;get(<span class="built_in">this</span>, <span class="string">&#x27;currentRouteName&#x27;</span>)&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> route.refresh();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;!-- application.hbs --&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">refreshCurrentModel</span>&#x27;&#125;&#125;&gt;</span>Refresh<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">&#123;&#123;outlet&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emberjs动态加载Bootstrap</title>
      <link href="/2020/01/18/Ember.js/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDBootstrap/"/>
      <url>/2020/01/18/Ember.js/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDBootstrap/</url>
      
        <content type="html"><![CDATA[<p>安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember install ember-cli-sass  </span><br><span class="line">ember install ember-cli-bootstrap-sassy  </span><br></pre></td></tr></table></figure><p>然后修改Ember项目的<code>style/app.css</code>为<code>style/app.scss</code>，并引入bootstrap。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;bootstrap&quot;</span>;  <span class="comment">/* 导入bootstrap */</span></span><br></pre></td></tr></table></figure><p>在第一行导入bootstrap。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> javascript </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>升级Ember-cli</title>
      <link href="/2020/01/18/Ember.js/%E5%8D%87%E7%BA%A7Ember-cli/"/>
      <url>/2020/01/18/Ember.js/%E5%8D%87%E7%BA%A7Ember-cli/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/ember-cli/ember-cli/releases">升级文档</a></p><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><h3 id="升级全局Ember-cli"><a href="#升级全局Ember-cli" class="headerlink" title="升级全局Ember-cli"></a>升级全局Ember-cli</h3><p>先删除旧版的ember-cli，然后清除缓存，然后在安装新版ember-cli</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g ember-cli</span><br><span class="line"></span><br><span class="line">npm cache clean</span><br><span class="line"></span><br><span class="line">bower cache clean</span><br><span class="line"></span><br><span class="line">npm install -g ember-cli@2.6.0-beta.2</span><br></pre></td></tr></table></figure><h3 id="升级项目的Ember-cli"><a href="#升级项目的Ember-cli" class="headerlink" title="升级项目的Ember-cli"></a>升级项目的Ember-cli</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 删除原来插件目录</span><br><span class="line">rm -rf node_modules bower_components dist tmp</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装新版ember-cli</span><br><span class="line">npm install --save-dev ember-cli@2.6.0-beta.2 </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 重新安装依赖</span><br><span class="line">npm install</span><br><span class="line">bower install</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用新版ember-cli重新初始化项目</span><br><span class="line">ember init</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布项目到Firebase</title>
      <link href="/2020/01/18/Ember.js/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Firebase/"/>
      <url>/2020/01/18/Ember.js/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Firebase/</url>
      
        <content type="html"><![CDATA[<h1 id="Deploying-to-Firebase-Hosting"><a href="#Deploying-to-Firebase-Hosting" class="headerlink" title="Deploying to Firebase Hosting"></a>Deploying to Firebase Hosting</h1><p>We’re ready to deploy our Ember app! Using Firebase Hosting, we can deploy our application’s static files (HTML, CSS, JavaScript, etc) to the web with a single command. To get started, we’ll download <code>firebase-tools</code> via npm:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g firebase-tools</span><br></pre></td></tr></table></figure><p><a href="https://firebase.google.com/docs/hosting/quickstart">Read through our hosting quickstart</a> to get your site up and running in minutes. Firebase Hosting is a production-grade service, with security, reliability, and scalability baked-in. We host your content on a global CDN and even provision an SSL certificate automatically for you.</p><p>For <code>ember-cli</code> apps, run the following commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ember build</span><br><span class="line">$ firebase init</span><br></pre></td></tr></table></figure><p>Then choose the name of the Firebase app you’re deploying and enter <code>dist</code> when prompted for your public directory. This will generate a <code>firebase.json</code> file. Update the file to include the following <code>rewrites</code> configuration:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;hosting&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;firebase&quot;</span>: <span class="string">&quot;my-ember-cli-app&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;public&quot;</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rewrites&quot;</span>: [&#123;</span><br><span class="line">      <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;**&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;destination&quot;</span>: <span class="string">&quot;/index.html&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Deploy your app by running the command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ firebase deploy</span><br></pre></td></tr></table></figure><p>Note that you can use any hosting service you’d like to deploy your Ember app, you don’t need to use Firebase Hosting.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Firebase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监听全局错误信息</title>
      <link href="/2020/01/18/Ember.js/%E7%9B%91%E5%90%AC%E5%85%A8%E5%B1%80%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/01/18/Ember.js/%E7%9B%91%E5%90%AC%E5%85%A8%E5%B1%80%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>如何监听整个Ember.js项目的错误信息呢？</p><p>请看下列文章</p><ol><li><a href="http://stackoverflow.com/questions/32078951/how-to-implement-a-proper-global-http-error-handling-in-ember">stackoverflow</a></li><li><a href="https://guides.emberjs.com/v1.10.0/understanding-ember/debugging/#toc_miscellaneous">Ember.js官方1</a></li><li><a href="http://emberjs.com/api/classes/Ember.html#event_onerror">Ember.js官方2</a></li><li><a href="https://trackjs.com/blog/todo-error-handling-ember-js/">trackjs</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取当前URL</title>
      <link href="/2020/01/18/Ember.js/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8DURL/"/>
      <url>/2020/01/18/Ember.js/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8DURL/</url>
      
        <content type="html"><![CDATA[<p>原址：<a href="http://discuss.emberjs.com/t/get-current-url-in-emberjs/3019">http://discuss.emberjs.com/t/get-current-url-in-emberjs/3019</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">afterModel: <span class="function"><span class="keyword">function</span> (<span class="params">model</span>)</span>&#123;</span><br><span class="line">    _this = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">    Ember.run.next(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log _this.get(<span class="string">&#x27;router.url&#x27;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">afterModel: <span class="function"><span class="keyword">function</span>(<span class="params">model, transition</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(Ember.get(transition, <span class="string">&#x27;targetName&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的错误error Failed connect to github.com443;解决办法</title>
      <link href="/2020/01/18/GitHub/Git%E7%9A%84%E9%94%99%E8%AF%AFerror%20Failed%20connect%20to%20github.com443;%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2020/01/18/GitHub/Git%E7%9A%84%E9%94%99%E8%AF%AFerror%20Failed%20connect%20to%20github.com443;%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>原址：<a href="http://blog.csdn.net/lyc_stronger/article/details/51954852">http://blog.csdn.net/lyc_stronger/article/details/51954852</a></p><p>解决办法就是打开<code>/etc/hosts</code>文件，将<code>github.com</code>对应的行屏蔽掉就可以了 </p><p><img src="http://blog.ddlisting.com/content/images/2016/08/20160719125418944.png" alt="注释github"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义IF判断</title>
      <link href="/2020/01/18/Ember.js/%E8%87%AA%E5%AE%9A%E4%B9%89IF%E5%88%A4%E6%96%AD/"/>
      <url>/2020/01/18/Ember.js/%E8%87%AA%E5%AE%9A%E4%B9%89IF%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#if (eq item.status &quot;complete&quot;)&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&#123;&#123;/if&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/helpers/eq.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eq = <span class="function">(<span class="params">params</span>) =&gt;</span> params[<span class="number">0</span>] === params[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Helper.helper(eq);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在github上同步一个分支(fork)</title>
      <link href="/2020/01/18/GitHub/%E5%9C%A8github%E4%B8%8A%E5%90%8C%E6%AD%A5%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF(fork)/"/>
      <url>/2020/01/18/GitHub/%E5%9C%A8github%E4%B8%8A%E5%90%8C%E6%AD%A5%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF(fork)/</url>
      
        <content type="html"><![CDATA[<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>在同步之前，需要创建一个远程点指向上游仓库(repo).如果你已经派生了一个原始仓库，可以按照如下方法做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream 被fork的项目地址</span><br></pre></td></tr></table></figure><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>同步上游仓库到你的仓库需要执行两步：首先你需要从远程拉去，之后你需要合并你希望的分支到你的本地副本分支。</p><h3 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h3><p>从远程仓库拉取将取回其分支以及各自的提交。它们将存储在你本地仓库的指定分之下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch upstream</span><br></pre></td></tr></table></figure><p>###合并</p><p>现在我们已经拉取了上游仓库，我们将要合并其变更到我们的本地分支。这将使该分支与上游同步，而不会失去我们的本地更改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge upstream&#x2F;master</span><br></pre></td></tr></table></figure><p>如果您的本地分支没有任何独特的提交，Git会改为执行“fast-forward”。</p><p><strong>最后将本地变更推送到远程服务器即可。</strong></p><p><strong>参考</strong></p><p><a href="https://help.github.com/articles/syncing-a-fork">https://help.github.com/articles/syncing-a-fork</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提交项目到GitHub，还原某个文件</title>
      <link href="/2020/01/18/GitHub/%E6%8F%90%E4%BA%A4%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%8C%E8%BF%98%E5%8E%9F%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6/"/>
      <url>/2020/01/18/GitHub/%E6%8F%90%E4%BA%A4%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%8C%E8%BF%98%E5%8E%9F%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>新创建到项目如何提交到<a href="http://github.com/ubuntuvim">GitHub</a>呢？</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>本地需要安装<a href="https://git-scm.com/">Git</a>。安装方法请参考官网文档，或者谷歌搜搜！！</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>创建本地项目</li><li>执行git命令初始化项目为git项目，命令：<code>git init</code>。</li><li>修改项目下到文件<code>.gitignore</code>，如果没用请自己创建，在文件内执行那些文件不需要提交到GitHub。比如<code>node_modules</code>已经项目独有到配置可以不提交。</li><li>链接远程git地址，执行命令：<code> git remote add origin https://github.com/ubuntuvim/mongodb_proj.git</code>。</li><li>更新，在提交之前最好先更新，命令为：<code>git fetch</code>和<code>git merge origin/master</code></li><li>提交项目文件到本地git库，命令：<code>git add *</code>然后再执行<code>git commit -am &quot;备注信息&quot;</code>。<code>-a</code>表示提交所有，如果只是提交某个文件可以不加这个参数，但是要制定提交到文件是那个，比如：`git commit app.js -m “备注信息”</li><li>同步到远程到GitHub，命令：<code>git push origin master</code>。如果是第一次提交需要配置用户名和邮箱，配置命令为：<code>git config --global user.name &quot;ubuntuvim&quot;</code>和<code>git config --global user.email &quot;1527254027@qq.com&quot;</code>，根据自己注册github账户的用户名和邮箱配置。</li><li>指定用户名和邮箱之后再次执行<code>git push origin master</code>，过程中需要输入你在GitHub的账户和密码，请输入自己注册用户名和密码。 </li><li>等待提交完成，然后到GitHub的响应项目下，可以查看到刚刚提交的内容。</li></ol><h2 id="提交到github方法二"><a href="#提交到github方法二" class="headerlink" title="提交到github方法二"></a>提交到github方法二</h2><h3 id="⋯or-create-a-new-repository-on-the-command-line"><a href="#⋯or-create-a-new-repository-on-the-command-line" class="headerlink" title="⋯or create a new repository on the command line"></a>⋯or create a new repository on the command line</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# ddlisting&quot; &gt;&gt; README.md</span><br><span class="line">git init  &#x2F;&#x2F;如果是ember cli命令创建的项目不需要执行这步</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;ubuntuvim&#x2F;ddlisting.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="⋯or-push-an-existing-repository-from-the-command-line-强制提交，覆盖原有文件"><a href="#⋯or-push-an-existing-repository-from-the-command-line-强制提交，覆盖原有文件" class="headerlink" title="⋯or push an existing repository from the command line(强制提交，覆盖原有文件)"></a>⋯or push an existing repository from the command line(强制提交，覆盖原有文件)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;ubuntuvim&#x2F;ddlisting.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="git还原文件"><a href="#git还原文件" class="headerlink" title="git还原文件"></a>git还原文件</h2><p>如果你想还原某个文件到最新版本可以使用如下命令实现。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout fileName</span><br></pre></td></tr></table></figure><p>还原一个版本的修改，必须提供一个具体的Git版本号，例如’git revert bbaf6fb5060b4875b18ff9ff637ce118256d6f20’，可以先通过git log查询版本号的哈希值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert 版本号</span><br></pre></td></tr></table></figure><h2 id="强制更新覆盖本地文件"><a href="#强制更新覆盖本地文件" class="headerlink" title="强制更新覆盖本地文件"></a>强制更新覆盖本地文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all  </span><br><span class="line">git reset --hard origin/master </span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>如果出现问题可以使用下面的命令强制更新远程库到本地。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull https://github.com/ubuntuvim/ddlisting.git master</span><br></pre></td></tr></table></figure><h2 id="克隆某个分支"><a href="#克隆某个分支" class="headerlink" title="克隆某个分支"></a>克隆某个分支</h2><p>下面的命令是克隆分支master    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master http://xxxx/xx.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM入门、概念理解</title>
      <link href="/2020/01/18/JVM/JVM%E5%85%A5%E9%97%A8%E3%80%81%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/01/18/JVM/JVM%E5%85%A5%E9%97%A8%E3%80%81%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h3><p>编译得到的<code>.class</code>文件并不会立即加载JVM中。只有符合如下5种情况才会立即加载到虚拟机中。</p><ul><li>创建类的实例（<code>new</code>的方式）。<ul><li>访问某个类或者接口的静态变量，</li><li>对类或者接口的静态变量赋值</li><li>调用类的静态方法</li></ul></li><li>反射创建类</li><li>初始化某个类的子类，则其父类也会被初始化。</li><li>Java虚拟机在启动时被标明为启动类的类，直接使用<code>java.exe</code>命令运行某个主类（包含<code>main</code>方法的类）</li><li>使用JDK1.7动态语言支持时会立即加载</li></ul><p>Java类是动态加载的，它并不会一次性吧所有的类加载再运行，而只是保证程序运行的基础类会立即加载到Jvm中。其他的类则在需要的时候才加载。<br>这也是为了节省内存开销。</p><h3 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h3><p>在一条线程中，只有目前正在执行的那个方法的栈帧是活动的。这个栈帧就被称作是当前栈帧，这个栈帧对于的方法就是当前方法。这个方法所在的类就是当前类。对局部变量表和操作数的各种操作，都通常指的是对当前栈帧的对局部变量表和操作数栈进行的操作。</p><p>栈帧是线程本地私有的数据，不可能在一个栈帧中引用另一个线程的栈帧。</p><h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h3><p>局部变量使用索引进行定位访问，第一个局部变量的索引值为0，局部变量的索引值是从0至小于局部变量表最大容量的所有整数<code>[0 ~ constantPoolCount-1]</code>。</p><p>Java虚拟机使用局部变量表来完成方法调用时参数传递，当一个方法被调用的时候，它的参数将会传递至从0开始的连续的局部变量表位置上。特别的，当一个实例方法被调用的时候，第0个布局变量一定是用来存储被调用的实例方法所在的对象的引用（即Java中的<code>this</code>关键字）。后续的其他参数将会传递至从1开始的连续的布局变量表位置上。</p><h3 id="方法调用指令"><a href="#方法调用指令" class="headerlink" title="方法调用指令"></a>方法调用指令</h3><p><code>invokevirtual</code>指令用于调用对象的实例方法，根据对象的实际类型进行分派。</p><p><code>invokeinterface</code>指令用于调用接口方法，它会在运行时搜索一个实现了这个接口方法的对象，找出合适的方法进行调用。</p><p><code>invokespecail</code>指令用于调用一些特殊处理的实例方法，包括实例初始化方法、私有方法、父类方法。</p><p><code>invokestatic</code>指令用于调用类方法（<code>static</code>方法）。</p><h3 id="常量池tag说明"><a href="#常量池tag说明" class="headerlink" title="常量池tag说明"></a>常量池tag说明</h3><table><thead><tr><th>常量类型</th><th>值</th></tr></thead><tbody><tr><td>CONSTANT_Class</td><td>7</td></tr><tr><td>CONSTANT_Fieldref</td><td>9</td></tr><tr><td>CONSTANT_Methodref</td><td>10</td></tr><tr><td>CONSTANT_InterfaceMethodref</td><td>11</td></tr><tr><td>CONSTANT_String</td><td>8</td></tr><tr><td>CONSTANT_Integer</td><td>3</td></tr><tr><td>CONSTANT_Float</td><td>4</td></tr><tr><td>CONSTANT_Long</td><td>5</td></tr><tr><td>CONSTANT_Double</td><td>6</td></tr><tr><td>CONSTANT_NameAndType</td><td>12</td></tr><tr><td>CONSTANT_Utf8</td><td>1</td></tr><tr><td>CONSTANT_MethodHandle</td><td>15</td></tr><tr><td>CONSTANT_MethodType</td><td>16</td></tr><tr><td>CONSTANT_InvokeDynamic</td><td>18</td></tr></tbody></table><h2 id="Java虚拟机指令集"><a href="#Java虚拟机指令集" class="headerlink" title="Java虚拟机指令集"></a>Java虚拟机指令集</h2><p>为了方便理解，用一个统一的格式说明Java虚拟机的每个指令。</p><h3 id="描述格式"><a href="#描述格式" class="headerlink" title="描述格式"></a>描述格式</h3><table><thead><tr><th>指令</th><th>xxx</th></tr></thead><tbody><tr><td>操作</td><td>简要描述</td></tr><tr><td>格式</td><td><b>助记符</b><br>操作数1<br>操作数2<br>……</td></tr><tr><td>结构</td><td>助记符 = 操作码</td></tr><tr><td>操作数栈</td><td>…，value1，value2 -&gt;<br>…，result</td></tr><tr><td>描述</td><td>关于操作数栈内容、常量池项、指令操作和结果类型等信息的详细描述。</td></tr><tr><td>链接时异常</td><td>如果执行该指令可能抛出任何链接时异常，那么每一个可能抛出的异常都需要在此进行描述。</td></tr><tr><td>运行时异常</td><td>如果执行该指令可能抛出任何运行时异常，那么每一个可能抛出的异常都需要在此进行描述。<br>除了在此列出的链接时、运行时异常以及<code>VirtualMachineError</code>或其子类之外，指令不得再抛出其他任何异常。</td></tr><tr><td>注意</td><td>某些并非本规范对该指令强制约束的注释，将会在这里进行描述。</td></tr></tbody></table><h3 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h3><h4 id="aaload指令"><a href="#aaload指令" class="headerlink" title="aaload指令"></a>aaload指令</h4><table><thead><tr><th>指令</th><th>aaload</th></tr></thead><tbody><tr><td>操作</td><td>从数组中加载一个<code>reference</code>类型数据到操作栈</td></tr><tr><td>格式</td><td>aaload</td></tr><tr><td>结构</td><td>aaload = 50（0x32）</td></tr><tr><td>操作数栈</td><td>…，arrayref，index -&gt;<br>…，value</td></tr><tr><td>描述</td><td><code>arrayref</code>必须是一个<code>reference</code>类型的数据，它指向一个组件类型为<code>reference</code>的数组，<code>index</code>必须为<code>int</code>类型。指令执行后，<code>arrrayref</code>和<code>index</code>同时从操作数栈出栈，<code>index</code>作为索引定位到数组中的<code>reference</code>类型值将压入到操作数栈中。</td></tr><tr><td>运行时异常</td><td>如果<code>arrayref</code>为<code>null</code>,<code>aaload</code>指令将抛出<code>NullPointerException</code>异常。<br>另外，如果<code>index</code>不在<code>arrayref</code>所代表的数组上下界范围中，另外将抛出<code>ArrayIndexOutOfBoundException</code>异常。</td></tr><tr><td>注意</td><td>无</td></tr></tbody></table><h4 id="aastore指令"><a href="#aastore指令" class="headerlink" title="aastore指令"></a>aastore指令</h4><table><thead><tr><th>指令</th><th>aastore</th></tr></thead><tbody><tr><td>操作</td><td>从操作数栈读取一个reference类型数据存入到数组中</td></tr><tr><td>格式</td><td>aastore</td></tr><tr><td>结构</td><td>aastore = 83（0x53）</td></tr><tr><td>操作数栈</td><td>…，arrayref，index，value -&gt;<br>…</td></tr><tr><td>描述</td><td><code>arrayref</code>必须是一个<code>reference</code>类型的数据，它指向一个组件类型为<code>reference</code>的数组，<code>index</code>必须为<code>int</code>类型，value必须为reference类型。指令执行后，<code>arrrayref</code>、<code>index</code>和value同时从操作数栈出栈，value存储到<code>index</code>作为索引定位的数组元素中。<br>运行时，value的实际类型必须与arrayref所代表的数组的组件类型匹配。具体地说，reference类型值value（记作S）能匹配组件类型为reference（记作T）的数组的前提是：<br><br/><strong>如果S是类型（Class Type），那么 **   <br/>         如果T也是类类型，那S必须与T是同一个类类型，或者S是T所代表的类型的子类<br/>          如果T是接口类型，那么S必须实现了T接口<br>**如果S是接口类型（Interface Type），那么</strong><br>           如果T是类类型，那么T只能是<code>Object</code>。<br>           如果T是接口类型，那么T与S应当是相同的接口，或者T是S的父接口。<br><strong>如果S是数组类型（Array Type），假设为<code>SC[]</code>的形式，这个数组的组件为SC，那么：</strong><br>           如果T是类类型，那么T只能是<code>Object</code>。<br>           如果T是数组类型，假设为<code>TC[]</code>的形式，这个数组的组件类型为TC，那么下面的两条规则之一必须成立：<br>                          TC和SC是同一个原始类型。<br>                          TC和SC都是reference类型，并且SC能与TC类型相匹配。<br>            如果T是接口类型，那么T必须是数组类型所实现的接口之一。</td></tr><tr><td>运行时异常</td><td>如果<code>arrayref</code>为<code>null</code>,<code>aastore</code>指令将抛出<code>NullPointerException</code>异常。<br>另外，如果<code>index</code>不在<code>arrayref</code>所代表的数组上下界范围中，另外将抛出<code>ArrayIndexOutOfBoundException</code>异常。<br>另外，如果arrayref不为<code>null</code>，并且value的实例类型与数组组件类型不能相匹配，aastore指令将抛出<code>ArrayStoreException</code>异常。</td></tr><tr><td>注意</td><td>无</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机-系统与进程的通用平台</title>
      <link href="/2020/01/18/JVM/%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%B3%BB%E7%BB%9F%E4%B8%8E%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%80%9A%E7%94%A8%E5%B9%B3%E5%8F%B0/"/>
      <url>/2020/01/18/JVM/%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%B3%BB%E7%BB%9F%E4%B8%8E%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%80%9A%E7%94%A8%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="2-4-1-IA-32的解释"><a href="#2-4-1-IA-32的解释" class="headerlink" title="2.4.1 IA-32的解释"></a>2.4.1 IA-32的解释</h3><p>下图显示的是IA-32指令的一般格式。</p><table><thead><tr><th>前缀</th><th>操作码</th><th>操作码</th><th>ModR/M</th><th>SIB</th><th>偏移量</th><th>立即数</th></tr></thead><tbody><tr><td>0到4</td><td></td><td>可选的</td><td>可选的</td><td>可选的</td><td>0,1,2,4字节</td><td>0,1,2,4字节</td></tr></tbody></table><p>它以0~4个前缀字节开头，指明是否有字符串指令的重复和/或者是否有对寻址段、地址大小和操作数大小的改写。</p><p>在前缀字节（如果有）之后就是操作码字节，它的户名还可能有第二个操作码字节，这取决于第一个的值。</p><p>接下来的是可选的寻址方式标识符ModR/M，该表示服是可选的，意味着它只针对某些操作而存在，通常指示一种寻址方式和寄存器。</p><p>SIB字节只针对某种ModR/M编码而存在，它指示一个基址寄存器、一个索引寄存器和一个用于索引的比例因子。</p><p>可选的、偏移量是针对某些内存寻址方式而存在的。</p><p>如果操作码需要，最后一个域是一个边长的立即数。</p><h3 id="第二章小节"><a href="#第二章小节" class="headerlink" title="第二章小节"></a>第二章小节</h3><p><img src="https://oscimg.oschina.net/oscnet/0aa1b59c277e0aeb22027bf1cb1678b4293.jpg" alt="无仿真\译码-分派解释\直接线索解释"></p><p><img src="https://oscimg.oschina.net/oscnet/280ddba6e92545a4f5df8e558d4de42cfa8.jpg" alt="预译码和直接线索解释\二进制解释"></p><h4 id="译码-分派解释"><a href="#译码-分派解释" class="headerlink" title="译码-分派解释"></a>译码-分派解释</h4><p><strong>内存需求：低</strong>——在目标ISA中对每条执行类型有一个解释过程。</p><p><strong>启动性能：块</strong>——实质上有零启动时间，因为没有对源二进制代码预处理或者翻译的需要。</p><p><strong>稳态性能：慢</strong>——一条源指令在被仿真时都必须被解析。此外，源代码必须通过数据cache被取得，这给cache带来了很多压力（并且导致了潜在的性能损失）。最好，这种方法会引起大量的控制转移（分支）。</p><p><strong>代码可移植性：好</strong>——如果解释器用高级语言编写，那么它非常易于移植。</p><h4 id="间接索引解释"><a href="#间接索引解释" class="headerlink" title="间接索引解释"></a>间接索引解释</h4><p><strong>内存需求：低</strong>——比译码-分派解释需要更多内存，因为在每个解释器例程中必须包含分派代码序列。额外内存数量依赖于译码的复杂性；对于RISC ISA它会相对低，而对于CISC它则要高得多。通过混合实现可以减轻内存代价。</p><p><strong>启动性能：块</strong>——和译码-分派解释一样，实质上有零启动时间；没有预处理的需求。</p><p><strong>稳态性能：慢</strong>——这会比译码-分派稍微好一些，因为消除了一些分支指令；和译码-分派解释器一样，有高数据cache利用率。</p><p><strong>代码可移植性：好</strong>——解释器代码和译码-分派解释器一样易于移植。</p><h4 id="带有预译码和直接线索解释"><a href="#带有预译码和直接线索解释" class="headerlink" title="带有预译码和直接线索解释"></a>带有预译码和直接线索解释</h4><p><strong>内存需求：高</strong>——预译码内存映像的大小与初始源代码映射是成比例的（并且可能大一些）。如果中间形式被缓存，从cache中删除很少使用的预译码指令块，那么内存需求可以稍微降低。</p><p><strong>启动性能：慢</strong>——源内存映像必须首先被解释，以便发现控制流。同样，产生被译码的中间形式也要消耗时间。</p><p><strong>稳态性能：中等</strong>——这要比间接线索好，因为每次执行各个指令时不必对它们解析（和译码）。如果预译码形式包含解释程序的目标地址，那么分派表查找就被消除。因为预译码指令仍然被解释器代码当作数据来处理，所以数据cache利用率高。</p><p><strong>代码可移植性：中等</strong>——如果预译码版本包含解释器例程的具体位置，那么解释器就变得依赖于实现了。支持发现标号地址的编译器可以减少这个缺点。</p><h4 id="二进制解释"><a href="#二进制解释" class="headerlink" title="二进制解释"></a>二进制解释</h4><p><strong>内存需求：高</strong>——预译码内存映像的大小与初始源内存映像是成正比的。如果翻译代码块被缓存，可以降低预译码的内存需求。</p><p><strong>启动性能：非常慢</strong>——源内存映像必须首先被解释，以便发现控制流。然后必须产生翻译二进制代码。</p><p><strong>稳态性能：快</strong>——翻译二进制代码直接在硬件上执行。如果翻译块直接链接起来，性能会提高甚至更多。此外，由于翻译代码被渠道指令cache中，这减轻了对出具cache的压力。</p><p><strong>代码可移植性：差</strong>——代码被翻译成特性的目标ISA，对于每个目标ISA必须写一个新的翻译器（或者至少是代码生成部分）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eclipse、MyEclipse安装插件的万能方法</title>
      <link href="/2020/01/18/Java/eclipse%E3%80%81MyEclipse%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E7%9A%84%E4%B8%87%E8%83%BD%E6%96%B9%E6%B3%95/"/>
      <url>/2020/01/18/Java/eclipse%E3%80%81MyEclipse%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E7%9A%84%E4%B8%87%E8%83%BD%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="使用如下代码生成插件的安装配置。"><a href="#使用如下代码生成插件的安装配置。" class="headerlink" title="使用如下代码生成插件的安装配置。"></a>使用如下代码生成插件的安装配置。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.svnlog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginConfigCreator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PluginConfigCreator</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String path)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = getFileList(path);</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = list.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            String thePath = getFormatPath(getString(list.get(i)));</span><br><span class="line">            File file = <span class="keyword">new</span> File(thePath);</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory())</span><br><span class="line">            &#123;</span><br><span class="line">                String fileName = file.getName();</span><br><span class="line">                <span class="keyword">if</span> (fileName.indexOf(<span class="string">&quot;_&quot;</span>) &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    print(thePath);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] filenames = fileName.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">                String filename1 = filenames[<span class="number">0</span>];</span><br><span class="line">                String filename2 = filenames[<span class="number">1</span>];</span><br><span class="line">                result = filename1 + <span class="string">&quot;,&quot;</span> + filename2 + <span class="string">&quot;,file:/&quot;</span> + path + <span class="string">&quot;/&quot;</span></span><br><span class="line">                        + fileName + <span class="string">&quot;//,4,false&quot;</span>;</span><br><span class="line">                System.out.println(result);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.isFile())</span><br><span class="line">            &#123;</span><br><span class="line">                String fileName = file.getName();</span><br><span class="line">                <span class="keyword">if</span> (fileName.indexOf(<span class="string">&quot;_&quot;</span>) &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> last = fileName.lastIndexOf(<span class="string">&quot;_&quot;</span>);<span class="comment">// 最后一个下划线的位置</span></span><br><span class="line">                String filename1 = fileName.substring(<span class="number">0</span>, last);</span><br><span class="line">                String filename2 = fileName.substring(last + <span class="number">1</span>, fileName</span><br><span class="line">                        .length() - <span class="number">4</span>);</span><br><span class="line">                result = filename1 + <span class="string">&quot;,&quot;</span> + filename2 + <span class="string">&quot;,file:/&quot;</span> + path + <span class="string">&quot;/&quot;</span></span><br><span class="line">                        + fileName + <span class="string">&quot;,4,false&quot;</span>;</span><br><span class="line">                System.out.println(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getFileList</span><span class="params">(String path)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        path = getFormatPath(path);</span><br><span class="line">        path = path + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">        File filePath = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!filePath.isDirectory())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] filelist = filePath.list();</span><br><span class="line">        List&lt;String&gt; filelistFilter = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; filelist.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            String tempfilename = getFormatPath(path + filelist[i]);</span><br><span class="line">            filelistFilter.add(tempfilename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filelistFilter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFormatPath</span><span class="params">(String path)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        path = path.replaceAll(<span class="string">&quot;////&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        path = path.replaceAll(<span class="string">&quot;//&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/*你的插件的安装目录*/</span></span><br><span class="line">        <span class="comment">//  D:\pugins\spket</span></span><br><span class="line">            String plugin = <span class="string">&quot;D://pugins//spket&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> PluginConfigCreator().print(plugin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>复制控制台输入的配置信息到eclipse/MyEclipse安装目录下的<code>bundles.info</code>文件，把控制台输入的配置信息全部复制到这个文件的最后。</p><p>配置文件详细路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configuration\org.eclipse.equinox.simpleconfigurator\bundles.info</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyEclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring获取自定义注解的值</title>
      <link href="/2020/01/18/Java/Spring%E8%8E%B7%E5%8F%96%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%80%BC/"/>
      <url>/2020/01/18/Java/Spring%E8%8E%B7%E5%8F%96%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>Spring的<code>@Value</code>注解提供了非常强大的功能。可以直接使用SpEL表达式。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;v&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;prop.key&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;beanId.method(&#x27;args&#x27;)&#125;&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是对于自定义的注解是没有这么强大的功能的，那么如何能做到像<code>@Value</code>这么强大的功能呢？</p><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.sb.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.CONSTRUCTOR&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TargetDataSource &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;<span class="keyword">default</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码，定义了一个用于普通方法和构造方法上面的注解<code>TargetDataSource</code>。</p><p>自定义的注解如果没有增加解析代码是没有任何效果的。可以借助于Spring AOP帮忙拦截使用了这个注解的所有方法，在执行注解所在方法之前或者之后可以增加自己的处理逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.sb.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanExpressionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanExpressionResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.expression.StandardBeanExpressionResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ubuntuvim.sb.SpringBoot2Application;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:application.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetDataSourceAspect</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BeanExpressionResolver resolver = <span class="keyword">new</span> StandardBeanExpressionResolver();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(targetDataSource)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(TargetDataSource targetDataSource)</span> </span>&#123;</span><br><span class="line">        System.out.println(targetDataSource.value());</span><br><span class="line"><span class="comment">//        SpelParserConfiguration config = new SpelParserConfiguration(true,true);</span></span><br><span class="line"><span class="comment">//        ExpressionParser parser = new SpelExpressionParser(config);</span></span><br><span class="line"><span class="comment">////        ExpressionParser parser = new SpelExpressionParser();</span></span><br><span class="line"><span class="comment">//        Expression exp = parser.parseExpression(targetDataSource.value());</span></span><br><span class="line"><span class="comment">//        Object v = exp.getValue();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;====== &quot; + v);</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//        StringValueResolver svr = new StringValueResolver() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public String resolveStringValue(String strVal) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(strVal);</span></span><br><span class="line"><span class="comment">//                return strVal;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"><span class="comment">//        String s = svr.resolveStringValue(targetDataSource.value());</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;s = &quot; + s);</span></span><br><span class="line">        Object s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String value = targetDataSource.value();</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringBoot2Application.class);</span><br><span class="line">        ConfigurableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">        String resolvedValue = beanFactory.resolveEmbeddedValue(value);</span><br><span class="line">        System.out.println(<span class="string">&quot;resolvedValue = &quot;</span> + resolvedValue);</span><br><span class="line">        <span class="comment">// 字符串类型</span></span><br><span class="line">        <span class="keyword">if</span> (!((resolvedValue.startsWith(<span class="string">&quot;$&#123;&quot;</span>) || resolvedValue.startsWith(<span class="string">&quot;#&#123;&quot;</span>)) &amp;&amp; resolvedValue.endsWith(<span class="string">&quot;&#125;&quot;</span>))) &#123;</span><br><span class="line">            s = resolvedValue;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s = resolver.evaluate(resolvedValue, <span class="keyword">new</span> BeanExpressionContext(beanFactory, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;s = &quot;</span> + s);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;使用了注解【com.ubuntuvim.sb.aop.TargetDataSource】的方法之前，先指定本方法。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键是这行代码：<code>@Before(&quot;@annotation(targetDataSource)&quot;)</code>，在方法执行之前会先执行方法<code>before</code>。在这个方法里面获取到注解<code>TargetDataSouce</code>设置的值<code>value</code>。<br>根据value的值解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串类型</span></span><br><span class="line"><span class="keyword">if</span> (!((resolvedValue.startsWith(<span class="string">&quot;$&#123;&quot;</span>) || resolvedValue.startsWith(<span class="string">&quot;#&#123;&quot;</span>)) &amp;&amp; resolvedValue.endsWith(<span class="string">&quot;&#125;&quot;</span>))) &#123;</span><br><span class="line">    s = resolvedValue;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    s = resolver.evaluate(resolvedValue, <span class="keyword">new</span> BeanExpressionContext(beanFactory, <span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.sb.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TargetDataSource(&quot;test1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test1 method...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TargetDataSource(&quot;$&#123;ds&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test2 method...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TargetDataSource(&quot;#&#123;EnvUtil.getValue(&#x27;1&#x27;)&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test3 method...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TargetDataSource(&quot;#&#123;EnvUtil.getValue(&#x27;2&#x27;)&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test4 method...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.sb.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;EnvUtil&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnvUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(key))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;key1&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;2&quot;</span>.equals(key))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ds&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;3&quot;</span>.equals(key))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;key&quot;</span>+key;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这三种是最常见的使用方式，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TargetDataSource(&quot;test1&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@TargetDataSource(&quot;$&#123;ds&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@TargetDataSource(&quot;#&#123;EnvUtil.getValue(&#x27;1&#x27;)&#125;&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>增加一个测试类验证是否能解析到注解的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ubuntuvim.sb.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ubuntuvim.sb.SpringBoot2Application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = SpringBoot2Application.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetDataSourceAspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userServiceImpl;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = userServiceImpl.test1();</span><br><span class="line">        assertEquals(<span class="string">&quot;test1 method...&quot;</span>, s);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetDataSource2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = userServiceImpl.test2();</span><br><span class="line">        assertEquals(<span class="string">&quot;test2 method...&quot;</span>, s);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetDataSource3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = userServiceImpl.test3();</span><br><span class="line">        assertEquals(<span class="string">&quot;test3 method...&quot;</span>, s);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetDataSource4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = userServiceImpl.test4();</span><br><span class="line">        assertEquals(<span class="string">&quot;test4 method...&quot;</span>, s);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用Junit运行，可以看到如下日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">2019-01-10 00:16:37.686  INFO 9290 --- [           main] c.u.sb.aop.TargetDataSourceAspectTest    : Started TargetDataSourceAspectTest in 6.43 seconds (JVM running for 9.397)</span><br><span class="line"><span class="meta">#</span><span class="bash">&#123;EnvUtil.getValue(<span class="string">&#x27;2&#x27;</span>)&#125;</span></span><br><span class="line">resolvedValue = #&#123;EnvUtil.getValue(&#x27;2&#x27;)&#125;</span><br><span class="line">s = ds</span><br><span class="line">使用了注解【com.ubuntuvim.sb.aop.TargetDataSource】的方法之前，先指定本方法。</span><br><span class="line">test4 method...</span><br><span class="line"><span class="meta">#</span><span class="bash">&#123;EnvUtil.getValue(<span class="string">&#x27;1&#x27;</span>)&#125;</span></span><br><span class="line">resolvedValue = #&#123;EnvUtil.getValue(&#x27;1&#x27;)&#125;</span><br><span class="line">s = key1</span><br><span class="line">使用了注解【com.ubuntuvim.sb.aop.TargetDataSource】的方法之前，先指定本方法。</span><br><span class="line">test3 method...</span><br><span class="line">test1</span><br><span class="line">resolvedValue = test1</span><br><span class="line">s = test1</span><br><span class="line">使用了注解【com.ubuntuvim.sb.aop.TargetDataSource】的方法之前，先指定本方法。</span><br><span class="line">test1 method...</span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;ds&#125;</span></span><br><span class="line">resolvedValue = xxx</span><br><span class="line">s = xxx</span><br><span class="line">使用了注解【com.ubuntuvim.sb.aop.TargetDataSource】的方法之前，先指定本方法。</span><br><span class="line">test2 method...</span><br><span class="line">2019-01-10 00:16:40.945  INFO 9290 --- [       Thread-5] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &#x27;applicationTaskExecutor&#x27;</span><br></pre></td></tr></table></figure><p>可以看到可以正确解析出来了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Value </tag>
            
            <tag> Aspect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven引入本地JAR包</title>
      <link href="/2020/01/18/Java/maven%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0JAR%E5%8C%85/"/>
      <url>/2020/01/18/Java/maven%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0JAR%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>修改<code>pom.xml</code>文件，加入如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extdirs</span>&gt;</span>$&#123;project.basedir&#125;/svnkit1.8<span class="tag">&lt;/<span class="name">extdirs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：代码<code>&lt;extdirs&gt;$&#123;project.basedir&#125;/svnkit1.8&lt;/extdirs&gt;</code>指定了外部jar包所在目录。<br>本例子中文件夹<code>svnkit1.8</code>放在项目的跟目录下。</p><p>项目<br>  |__svnkit1.8<br>  |__src</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试</title>
      <link href="/2020/01/18/Java/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/01/18/Java/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li>接口功能测试：用来保证接口功能的正确性。</li><li>局部数据结构测试（不常用）：用来保证接口中的数据结构是正确的<ul><li>比如变量有无初始值</li><li>变量是否溢出</li></ul></li><li>边界条件测试<ul><li>变量没有赋值（即为NULL）</li><li>变量是数值（或字符)<ul><li>主要边界：最小值，最大值，无穷大（对于DOUBLE等）</li><li>溢出边界（期望异常或拒绝服务）：最小值-1，最大值+1</li><li>临近边界：最小值+1，最大值-1</li></ul></li><li>变量是字符串<ul><li>引用“字符变量”的边界</li><li>空字符串</li><li>对字符串长度应用“数值变量”的边界</li></ul></li><li>变量是集合<ul><li>空集合</li><li>对集合的大小应用“数值变量”的边界</li><li>调整次序：升序、降序</li></ul></li><li>变量有规律<ul><li>比如对于Math.sqrt，给出n^2-1，和n^2+1的边界</li></ul></li></ul></li><li>所有独立执行通路测试：保证每一条代码，每个分支都经过测试<ul><li>代码覆盖率<ul><li>语句覆盖：保证每一个语句都执行到了</li><li>判定覆盖（分支覆盖）：保证每一个分支都执行到</li><li>条件覆盖：保证每一个条件都覆盖到true和false（即if、while中的条件语句）</li><li>路径覆盖：保证每一个路径都覆盖到</li></ul></li><li>相关软件<ul><li>Cobertura：语句覆盖</li><li>Emma: Eclipse插件Eclemma</li></ul></li></ul></li><li>各条错误处理通路测试：保证每一个异常都经过测试</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JUnit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装配置JDK</title>
      <link href="/2020/01/18/Linux/Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEJDK/"/>
      <url>/2020/01/18/Linux/Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEJDK/</url>
      
        <content type="html"><![CDATA[<p>如何在linux系统里安装配置JDK呢？</p><ul><li><p>复制JDK安装包到<code>/opt/jdk</code>下，复制命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r /home/ubuntuvim/software/jdk1.7.0_65 /opt/jdk/</span><br></pre></td></tr></table></figure><p>我的JDK放在<code>/home/ubuntuvim/software/</code>目录下。</p></li><li><p>配置环境变量</p></li></ul><p>编辑文件<code> ~/.bashrc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo  ~/.bashrc</span><br><span class="line">// 在配置文件末尾增加如下内容</span><br><span class="line">export JAVA_HOME=/opt/jdk/jdk1.7.0_65</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure><p>执行命令使得配置生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><ul><li>测试是否配置成功</li></ul><p>在终端下输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>看到类似如下信息说明配置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;1.7.0_65&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.7.0_65-b17)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 24.65-b04, mixed mode)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 空间满问题分析</title>
      <link href="/2020/01/18/Linux/Linux%20%E7%A9%BA%E9%97%B4%E6%BB%A1%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
      <url>/2020/01/18/Linux/Linux%20%E7%A9%BA%E9%97%B4%E6%BB%A1%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>用户在系统内进行创建文件的时候，出现空间不足提示：“No space left on device ⋯” </p><h2 id="解决过程："><a href="#解决过程：" class="headerlink" title="解决过程："></a>解决过程：</h2><p>Linux 系统空间满，常见的原因包括：<br>（1）分区容量满；<br>（2）分区inode耗尽；<br>（3）僵尸文件：已删除文件因句柄被占用未释放导致相应空间未释放。 </p><p>上述3种情况的处理思路分别说明如下： </p><h4 id="1、分区容量满——空间使用分析"><a href="#1、分区容量满——空间使用分析" class="headerlink" title="1、分区容量满——空间使用分析"></a>1、分区容量满——空间使用分析</h4><p>  a)   使用如下指令查看空间使用情况  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> df -hT</span></span><br><span class="line"></span><br><span class="line">Filesystem          Type   Size  Used Avail Use% Mounted on</span><br><span class="line">tmpfs               tmpfs   16G  228K  16G   1% /dev/shm</span><br><span class="line">/dev/sda1           ext4   477M   59M 393M  13% /boot</span><br></pre></td></tr></table></figure><p>  b)    使用如下指令逐层分析各目录的空间占用情况  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -m --max-depth&#x3D;1 |sort -gr</span><br></pre></td></tr></table></figure><p>逐层进入空间占用最高的目录，继续执行上述指令，逐步定位占用过高空间的文件或目录，然后进行相应清理。 </p><h4 id="2、inode容量满——inode使用分析"><a href="#2、inode容量满——inode使用分析" class="headerlink" title="2、inode容量满——inode使用分析"></a>2、inode容量满——inode使用分析</h4><p> a)     使用如下指令查看inode使用情况 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -i</span><br></pre></td></tr></table></figure><p>b)     使用如下指令分析inode使用情况  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in &#x2F;*; do echo $i; find $i | wc -l; done</span><br></pre></td></tr></table></figure><p>逐层进入inode占用最高的目录，继续执行上述指令，逐步定位占用过高空间的文件或目录，然后进行相应清理。 </p><h4 id="3、僵尸文件分析"><a href="#3、僵尸文件分析" class="headerlink" title="3、僵尸文件分析"></a>3、僵尸文件分析</h4><p>a)     使用如下指令查看已经删除，但是句柄未被释放的文件僵尸文件及其空间占用情况： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in &#96;lsof | grep delete | awk -F&quot; &quot;&#39;&#123;print $9&#125;&#39;&#96; ;do du -h $i;done | sort -gr</span><br></pre></td></tr></table></figure><p>b)     使用如下指令查找上述僵尸文件归属进程ID </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in &#96;lsof | grep delete | awk -F&quot; &quot;&#39;&#123;print $9&#125;&#39;&#96; ;do du -h $i;done | sort -gr</span><br></pre></td></tr></table></figure><p>c)     使用如下指令查看相应的进程信息： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ll &#x2F;proc&#x2F;[size&#x3D;font-size:9.0pt,9.0pt]&lt;pid[size&#x3D;font-size:9.0pt,9.0pt]信息&gt;&#x2F;exe</span><br><span class="line">[size&#x3D;font-size:9.0pt,9.0pt]比如：</span><br><span class="line"># ll &#x2F;proc&#x2F;10835&#x2F;exe</span><br></pre></td></tr></table></figure><p>d)     重启相应进程后，就能释放相应句柄，释放被占用的空间。 </p><p>原文：<a href="https://bbs.aliyun.com/read/252526.html?spm=5176.bbsl229.0.0.oGEWk1&fpage=2">https://bbs.aliyun.com/read/252526.html?spm=5176.bbsl229.0.0.oGEWk1&amp;fpage=2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装主题</title>
      <link href="/2020/01/18/Linux/ubuntu%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98/"/>
      <url>/2020/01/18/Linux/ubuntu%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ul><li>复制安装包到<code>/opt/apache-maven-3.0.5</code>下</li><li>配置，打开<code>sudo gedit ~/.bashrc</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export M2_HOME=/opt/apache-maven/apache-maven-3.0.5</span><br><span class="line">export M2=$M2_HOME/bin</span><br><span class="line">export MAVEN_OPTS=&quot;-Xms256m -Xmx512m&quot;  // 可选</span><br><span class="line">export PATH=$M2:$PATH</span><br></pre></td></tr></table></figure><ul><li>重载配置文件，使其生效</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><ul><li>测试是否配置成功</li></ul><p>在终端输入<code>mvn -v</code>，如果看到类似如下信息说明配置成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Apache Maven 3.0.5 (r01de14724cdef164cd33c7c8c2fe155faf9602da; 2013-02-19 21:51:28+0800)</span><br><span class="line">Maven home: /opt/apache-maven/apache-maven-3.0.5</span><br><span class="line">Java version: 1.7.0_65, vendor: Oracle Corporation</span><br><span class="line">Java home: /opt/jdk/jdk1.7.0_65/jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class="line">OS name: &quot;linux&quot;, version: &quot;4.4.0-21-generic&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure><p>下载主题后解压，然后复制到<code>/usr/share/themes</code>，再在设置里修该主题即可。</p><p>复制命令修改权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r ./themeName /usr/share/themes</span><br><span class="line">sudo chmod -R 777 /usr/share/themes/themeName</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型，保存数据到数据库</title>
      <link href="/2020/01/18/Ember-Demo/%E6%A8%A1%E5%9E%8B%EF%BC%8C%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2020/01/18/Ember-Demo/%E6%A8%A1%E5%9E%8B%EF%BC%8C%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>来源：<a href="http://yoember.com/">yoember.com</a><br>作者：<a href="http://zoltan.nz/">Zoltan</a></p><p><strong>声明</strong>：<em>本文的转载与翻译是经过作者认可的，再次感谢原作，如有侵权请给我留言，我会删除博文！！</em> 希望本系列教程能帮助更多学习Ember.js的初学者。</p><p>接着前面的两篇：</p><ol><li><a href="http://xcoding.tech/2016/03/30/Ember-Demo/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8Ember.js%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/">环境搭建以及使用Ember.js创建第一个静态页面</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E5%BC%95%E5%85%A5%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E3%80%81action%E3%80%81%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9/">引入计算属性、action、动态内容</a></li></ol><p>继续为读者介绍如何使用<a href="http://emberjs.com/">Ember</a>构建一个完整的、复杂的项目。</p><h2 id="第一个Ember-js模型"><a href="#第一个Ember-js模型" class="headerlink" title="第一个Ember.js模型"></a>第一个Ember.js模型</h2><p>在前面两篇中实现了如何获取界面输入的邮箱值，但是并没有真正保存到数据，仅仅只是获取界面输入的值并显示出来。在本篇中将为读者演示如何保存数据到数据库中。但是我并不会去创建一个数据库，而是使用<a href="http://firebase.com/">firebase</a>，更多有关firebase的信息请自行查阅资料学习（如果访问firebase官网很慢或者是无法访问那么你需要fanqiang）！</p><p>言归正传，回到Ember的模型介绍中来。简单讲Ember的模型其实就是一个与数据表对应的一个实体类，与<code>Java</code>中的<code>JavaBean</code>有点类似。<br>创建一个模型也非常简单，可以直接使用<a href="http://ember-cli.com/user-guide">Ember CLI</a>命令创建，下面的命令就是用于创建模型类，并在模型中增加一个<code>string</code>类型的属性<code>email</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember g model invitation email:string</span><br></pre></td></tr></table></figure><p>命令执行完毕之后可以在项目对应目录下看到创建的文件<code>app/models/invitaction.js</code>，文件内如如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/models/invitation.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">&#x27;ember-data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</span><br><span class="line">  email: DS.attr(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>有了模型类之后修改控制器<code>index.js</code>的代码，加入模型，通过模型来保存数据对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line"></span><br><span class="line">    headerMessage: <span class="string">&#x27;Coming Soon&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    responseMessage: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 设置默认值为空字符串</span></span><br><span class="line"></span><br><span class="line">    emailAddress: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 设置默认值为空字符串</span></span><br><span class="line">    <span class="comment">//  使用正则表达式判断邮箱格式，如果正确则返回true反之返回false</span></span><br><span class="line">    isValid: Ember.computed.match(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="regexp">/^.+@.+\..+$/</span>),</span><br><span class="line">    <span class="comment">// 把计算属性isValid绑定到isDisabled上</span></span><br><span class="line">    isDisabled: Ember.computed.not(<span class="string">&#x27;isValid&#x27;</span>),  <span class="comment">//当`disabled=false`时按钮可用，所以正好需要取反</span></span><br><span class="line"></span><br><span class="line">    actions: &#123;</span><br><span class="line">        saveInvitation: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> email = <span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>);</span><br><span class="line">            <span class="comment">//  创建一个模型对象</span></span><br><span class="line">            <span class="keyword">const</span> newInvitaction = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;invitation&#x27;</span>, &#123; <span class="attr">email</span>: email &#125;);</span><br><span class="line">            newInvitaction.save();  <span class="comment">//保存模型对象到store中</span></span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;responseMessage&#x27;</span>, <span class="string">`Thank you! We&#x27;ve just saved your email address: <span class="subst">$&#123;<span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>)&#125;</span>`</span>);</span><br><span class="line">            <span class="comment">//  情况输入框内容</span></span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>等待项目重新启动，在界面输入正确的邮箱，点击按钮，可以在浏览器控制台看到如下错误信息：</p><p><img src="/image/blog-image/141.png" alt="错误信息"></p><p>为何会出现这些错误呢？？其实很简单，我们并没有对应的后台服务区处理数据，目前仅仅是提交了数据而已，那么怎么处理呢？我们引入一个非常好用的数据库——<a href="http://firebase.com/">firebase</a>。firebase为Ember提交了非常丰富的API，我们不需要再自己写后台的处理程序，可以直接调用firebase提供的API即可完成数据的CRUD操作。更多有关firebase的使用教程请看<a href="https://www.firebase.com/docs/web/libraries/ember/guide.html">EmberFire Guide</a>，在这个参考文档上详细介绍了firebase如何与Ember整合，Ember如何调用firebase提供的API。</p><p>下面简单介绍如何把firebase整合到本项目中。</p><ol><li>安装 <code>ember install emberfire</code>，会自动创建文件<code>app/adapters/application.js</code></li><li>在firebase官网注册一个用户，并创建一个APP（如下图1位置创建APP）然后会得到一个管理连接（比如：luminous-xxx-xxx.firebaseIO.com）</li><li>修改项目中<code>config/environment.js</code>，在文件中增加firebase的配置。</li></ol><p><img src="/image/blog-image/142.png" alt="图1"><br>图1</p><p><code>config/environment.js</code>配置代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ENV = &#123;</span><br><span class="line">    modulePrefix: <span class="string">&#x27;library-app&#x27;</span>,</span><br><span class="line">    environment: environment,</span><br><span class="line">    contentSecurityPolicy: &#123; <span class="string">&#x27;connect-src&#x27;</span>: <span class="string">&quot;&#x27;self&#x27; https://auth.firebase.com wss://*.firebaseio.com&quot;</span> &#125;,</span><br><span class="line">    firebase: <span class="string">&#x27;https://YOUR-FIREBASE-NAME.firebaseio.com/&#x27;</span>,  <span class="comment">//改成自己在firebase上APP的地址</span></span><br><span class="line">    baseURL: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    locationType: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">    EmberENV: &#123;</span><br><span class="line">      FEATURES: &#123;</span><br><span class="line">        <span class="comment">// Here you can enable experimental features on an ember canary build</span></span><br><span class="line">        <span class="comment">// e.g. &#x27;with-controller&#x27;: true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    APP: &#123;</span><br><span class="line">      <span class="comment">// Here you can pass flags/options to your application instance</span></span><br><span class="line">      <span class="comment">// when it is created</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="comment">//  ……其他代码省略</span></span><br></pre></td></tr></table></figure><p>注意上述代码中的第5行，<code>firebase</code>属性的值是自己在firebase申请的APP的URL。<strong>一定记得要修改！！！</strong></p><p>修改完成之后手动重启项目，记得是手动关闭终端运行的项目（<code>ctrl+c</code>关闭），然后再使用命令<code>ember s</code>启动项目。否则新安装的<code>emberfire</code>无法起作用。</p><p>等待项目启动完成，如果启动过程中没有出现错误，说明<code>emberfire</code>安装成功！</p><p>然后激动的时刻到了，在首页输入正确的邮箱，点击按钮，可以看到浏览器控制来不会报错了！并且在firebase官网的APP中看到刚刚新增的邮箱！！</p><p><strong>注意</strong>：点击按钮提交后可能看到界面没有任何反应，先别急，由于firebase是外国的东西，在天朝访问都是比较慢，你懂的。提交后到响应回来可能比较慢。</p><p>从浏览器控制台打印的日志可以看出向firebase发送请求，截图如下：</p><p><img src="/image/blog-image/143.png" alt="向firebase发送请求截图"></p><p>并且在界面上提示了保存成功的信息！</p><p>最后在firebase官网上可以查看到刚刚提交数据。</p><p><img src="/image/blog-image/145.png" alt="提交到firebase的数据"></p><p>可以感受到firebase的强大了吧！我们几乎没有做任何处理数据就直接保存到firebase了，并且会自动根据模型创建数据，不过需要注意的是我们在模型定义中并不需要定义<code>id</code>属性，firebase会自动生成一个唯一的<code>id</code>属性值，截图中的<code>-KEr3XwUQjgLjb5yx0dp</code>就是<code>id</code>属性值。</p><p>到此，数据的保存工作完成了，借助firebase大大简化了自己需要处理的东西，不需要自己创建数据库、数据表、以及保存数据sql等等！不知道你是否看明白了，如果有疑问请及时给我留言，我会尽力为你解答！</p><h2 id="promise和this"><a href="#promise和this" class="headerlink" title="promise和this"></a>promise和this</h2><p>promise（承诺）在JavaScript中是一个异步特性。这个特性还在完善之中，更多有关promise的介绍请看<a href="http://liubin.github.io/promises-book/">promises-book</a>或者<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Mozilla MDN Promise</a>。</p><p>在前面保存数据的代码中<code>save()</code>方法返回值就是一个<code>promise</code>，我们可以根据<code>save()</code>方法的返回值做不同的处理，比如保存失败时候的处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">saveInvitation: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> email = <span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>);</span><br><span class="line">    <span class="comment">//  创建一个模型对象</span></span><br><span class="line">    <span class="keyword">const</span> newInvitaction = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;invitation&#x27;</span>, &#123; <span class="attr">email</span>: email &#125;);</span><br><span class="line">     <span class="comment">//保存模型对象到store中</span></span><br><span class="line">    newInvitaction.save().then(<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;保存成功。&#x27;</span>);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;保存失败！&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.set(<span class="string">&#x27;responseMessage&#x27;</span>, <span class="string">`Thank you! We&#x27;ve just saved your email address: <span class="subst">$&#123;<span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>)&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">//  情况输入框内容</span></span><br><span class="line">    <span class="built_in">this</span>.set(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你看过有关promise的介绍那么理解上述代码应该是很简单的，在方法<code>then()</code>中第一个函数（参数）会在<code>save()</code>执行成功的时候执行，第二个函数（参数）会在<code>save()</code>执行失败的时候执行。明白这个之后我们再修改控制器<code>index.js</code>的代码。我们把提示信息放在<code>save()</code>执行成功的时候执行方法中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">saveInvitation: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> email = <span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>);</span><br><span class="line">    <span class="comment">//  创建一个模型对象</span></span><br><span class="line">    <span class="keyword">const</span> newInvitaction = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;invitation&#x27;</span>, &#123; <span class="attr">email</span>: email &#125;);</span><br><span class="line">     <span class="comment">//保存模型对象到store中</span></span><br><span class="line">    newInvitaction.save().then(<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.set(<span class="string">&#x27;responseMessage&#x27;</span>, <span class="string">`Thank you! We&#x27;ve just saved your email address: <span class="subst">$&#123;<span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>)&#125;</span>`</span>);</span><br><span class="line">        <span class="comment">//  情况输入框内容</span></span><br><span class="line">        <span class="built_in">this</span>.set(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.set(<span class="string">&#x27;responseMessage&#x27;</span>, <span class="string">`Saved: <span class="subst">$&#123;<span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>)&#125;</span> failed！`</span>);</span><br><span class="line">        <span class="comment">//  情况输入框内容</span></span><br><span class="line">        <span class="built_in">this</span>.set(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等待项目自动重启完成，在界面输入正确邮箱，提交数据，此时并没有出现任何反应，并且会在浏览器控制台看到如下错误，</p><p><img src="/image/blog-image/146.png" alt="错误信息"></p><p>这又是什么原因呢？其实原因很简单，因为<code>this</code>作用域问题，由于是在<code>then()</code>内部使用了<code>this</code>导致此时的<code>this</code>指向的并不是控制器类了，只有在Ember的上下文中才能使用<code>set()</code>方法！我们用一个临时变量解决这个问题，代码修改为如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line"></span><br><span class="line">    headerMessage: <span class="string">&#x27;Coming Soon&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    responseMessage: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 设置默认值为空字符串</span></span><br><span class="line"></span><br><span class="line">    emailAddress: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 设置默认值为空字符串</span></span><br><span class="line">    <span class="comment">//  使用正则表达式判断邮箱格式，如果正确则返回true反之返回false</span></span><br><span class="line">    isValid: Ember.computed.match(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="regexp">/^.+@.+\..+$/</span>),</span><br><span class="line">    <span class="comment">// 把计算属性isValid绑定到isDisabled上</span></span><br><span class="line">    isDisabled: Ember.computed.not(<span class="string">&#x27;isValid&#x27;</span>),  <span class="comment">//当`disabled=false`时按钮可用，所以正好需要取反</span></span><br><span class="line"></span><br><span class="line">    actions: &#123;</span><br><span class="line">        saveInvitation: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> email = <span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>);</span><br><span class="line">            <span class="comment">//  创建一个模型对象</span></span><br><span class="line">            <span class="keyword">const</span> newInvitaction = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;invitation&#x27;</span>, &#123; <span class="attr">email</span>: email &#125;);</span><br><span class="line">            <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">             <span class="comment">//保存模型对象到store中</span></span><br><span class="line">            newInvitaction.save().then(<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">                _this.set(<span class="string">&#x27;responseMessage&#x27;</span>, <span class="string">`Thank you! We&#x27;ve just saved your email address: <span class="subst">$&#123;_this.get(<span class="string">&#x27;emailAddress&#x27;</span>)&#125;</span>`</span>);</span><br><span class="line">                <span class="comment">//  情况输入框内容</span></span><br><span class="line">                _this.set(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">                _this.set(<span class="string">&#x27;responseMessage&#x27;</span>, <span class="string">`Saved: <span class="subst">$&#123;_this.get(<span class="string">&#x27;emailAddress&#x27;</span>)&#125;</span> failed！`</span>);</span><br><span class="line">                <span class="comment">//  情况输入框内容</span></span><br><span class="line">                _this.set(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>等待项目自动重启完成，在页面输入正确的邮箱并提交，可以看到此时效果与之前是一样的，然后去firebase查看结果，也是可以看到新增的数据。</p><p>虽然是用临时变量方式可以解决由于<code>this</code>作用域问题，但是还有更加优美的解决办法，如今几乎所有新版的浏览器引擎已经支持ES2015，可以使用ES2015的<code>=&gt;</code>操作符解决<code>this</code>作用域问题，请看下面的处理代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">saveInvitation: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> email = <span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>);</span><br><span class="line">    <span class="comment">//  创建一个模型对象</span></span><br><span class="line">    <span class="keyword">const</span> newInvitaction = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;invitation&#x27;</span>, &#123; <span class="attr">email</span>: email &#125;);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//保存模型对象到store中</span></span><br><span class="line">    newInvitaction.save().then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;response = &#x27;</span> + response);</span><br><span class="line">        <span class="built_in">this</span>.set(<span class="string">&#x27;responseMessage&#x27;</span>, <span class="string">`Thank you! We&#x27;ve just saved your email address: <span class="subst">$&#123;response.get(<span class="string">&#x27;id&#x27;</span>)&#125;</span>`</span>);</span><br><span class="line">        <span class="comment">//  情况输入框内容</span></span><br><span class="line">        <span class="built_in">this</span>.set(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.set(<span class="string">&#x27;responseMessage&#x27;</span>, <span class="string">`Saved: <span class="subst">$&#123;<span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>)&#125;</span> failed！`</span>);</span><br><span class="line">        <span class="comment">//  情况输入框内容</span></span><br><span class="line">        <span class="built_in">this</span>.set(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用ES2015的特性之后不仅解决了<code>this</code>作用域问题，而且连关键字<code>function</code>都不需要了，使用<code>=&gt;</code>操作会自动把外层<code>this</code>所指的对象传递到函数内部，并且修改了保存成功时的提示信息，使用<code>$&#123;response.get(&#39;id&#39;)&#125;</code>从firebase响应的数据中获取到保存成功后返回的<code>id</code>值，返回的<code>response</code>就是一个模型<code>invitation</code>的对象，可以使用<code>get()</code>方法获取对象值。<br>再次测试，如果项目代码没有误那么你可以得到如下截图的提示信息（<code>id</code>值跟你的是不一样的），</p><p><img src="/image/blog-image/147.png" alt="使用ES2015后保存截图"></p><p>如果你对<code>this</code>不是很懂，请看认真看下面文章的解释：</p><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">Mozilla MDN this</a></li><li><a href="http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html">Javascript的this用法</a></li></ol><h2 id="创建管理页面"><a href="#创建管理页面" class="headerlink" title="创建管理页面"></a>创建管理页面</h2><p>前面已经介绍了如何整合firebase到项目中，并且已经成功保存增加的数据。可以在firebase上看到所有数据，我们创建一个后台页面去管理这些数据。</p><p>下面创建一个子路由和路由对应的模板页面，仍然是使用Ember CLI命令创建，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember g route admin&#x2F;invitaction</span><br></pre></td></tr></table></figure><p>命令执行完毕后会得到一个路由文件（<code>app/routes/admin/invitaction.js</code>）和一个模板文件（<code>app/templates/admin/invitaction.hbs</code>）,命令会自动创建文件夹<code>admin</code>，子路由和子模板会放在子子目录下。<br>然后在首页增加菜单链接，修改<code>navbar.hbs</code>模板。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/navbar.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-inverse&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#main-navbar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      &#123;&#123;#link-to &#x27;index&#x27; class=&quot;navbar-brand&quot;&#125;&#125;Library App&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;main-navbar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;#link-to &#x27;index&#x27; tagName=&quot;li&quot;&#125;&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">            &#123;&#123;#link-to &#x27;about&#x27; tagName=&quot;li&quot;&#125;&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">            &#123;&#123;#link-to &#x27;contact&#x27; tagName=&quot;li&quot;&#125;&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 后台管理页面链接 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>Admin<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">                  &#123;&#123;#link-to &#x27;admin.invitation&#x27; tagName=&quot;li&quot;&#125;&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Invitations<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码<code>{{#link-to 'admin.invitation' tagName="li"}}<a href="">Invitations</a>{{/link-to}}</code>中<code>admin.invitation</code>是一个嵌套路由或者说是子路由。更多有关路由嵌套问题请看<a href="http://blog.ddlisting.com/2016/03/22/ember-js-ru-men-zhi-nan-zhi-shi-san-link-to/">Ember.js 入门指南之十三{{link-to}} 助手</a>。</p><p>在模板中使用表格遍历显示所有的邮箱数据。修改模板<code>invitaction.hbs</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/admin/invitations.hbs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Invitations<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-striped&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>E-mail<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;&#123;#each model as |invitation|&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;invitation.id&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;invitation.email&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码中<code>{{#each}}{{/each}}</code>是Ember提供的遍历表达式，此表达式用于遍历数组数据。本例子中用户遍历从路由的<code>model</code>回调中返回的数据。更多有关此表达式的介绍请看<a href="http://blog.ddlisting.com/2016/03/18/ember-js-ru-men-zhi-nan-zhi-shi-handlebarsbian-li-biao-qian/">Ember.js 入门指南之十handlebars遍历标签</a>。<br>修改路由<code>app/routes/admin/invitations.js</code>在<code>model</code>回调中获取服务器（firebase）上的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/routes/admin/invitations.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">  model() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.store.findAll(<span class="string">&#x27;invitation&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>等待项目重启完成，可以在项目首页导航栏的右侧看到可以点击下拉的Admin菜单项，点击菜单看到子菜单项“Invitation”，点击“Invitation”进入到<a href="http://localhost:4200/admin/invitation">http://localhost:4200/admin/invitation</a>。<br>在界面上可以看到之前新增的所有邮箱信息和firebase自动生成的<code>ID</code>属性值（由于firebase是老外的东西获取数据会比较慢，数据显示自然也会比较慢，稍等一会就在界面上看到了！）。如果你项目代码没问题也可以看到如下的截图。</p><p><img src="/image/blog-image/149.png" alt="Invitation数据截图"></p><h2 id="数据的CRUD操作"><a href="#数据的CRUD操作" class="headerlink" title="数据的CRUD操作"></a>数据的CRUD操作</h2><p>到这一步我们已经可以完整的从服务器获取数据，并以列表形式显示在界面上。本教程的目标是创建一个简单的图书管理系统，前面的文章已经完成了类似于用户注册的功能，接下来我们创建一个<code>library</code>模型，用于保存书库信息。<br>同样是使用Ember CLI命令创建模型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember g model library name:string address:string phone:string</span><br></pre></td></tr></table></figure><p>上述命令创建了一个包含三个属性的模型，这三个属性都是<code>string</code>类型的数据。创建完模型之后再继续创建三个模板，分别用户显示library列表新建library数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ember g template libraries</span><br><span class="line">ember g template libraries&#x2F;index</span><br><span class="line">ember g template libraries&#x2F;new</span><br></pre></td></tr></table></figure><p>模板创建完毕之后手动在<code>router.js</code>中增加路由配置，这次我们不采用Ember CLI命令创建了！！！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./config/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Router = Ember.Router.extend(&#123;</span><br><span class="line">  location: config.locationType</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;about&#x27;</span>);</span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;contact&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;admin&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;invitation&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.route(<span class="string">&#x27;libraries&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;new&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><p>再更新首页模板<code>navbar.hbs</code>，增加一个菜单项“libraries”，其他代码不变。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;#link-to &#x27;index&#x27; tagName=&quot;li&quot;&#125;&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">    &#123;&#123;#link-to &#x27;libraries&#x27; tagName=&quot;li&quot;&#125;&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Libraries<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">    &#123;&#123;#link-to &#x27;about&#x27; tagName=&quot;li&quot;&#125;&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">    &#123;&#123;#link-to &#x27;contact&#x27; tagName=&quot;li&quot;&#125;&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改模板<code>libraries.hbs</code>，增加菜单链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/libraries.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Libraries<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-pills&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;#link-to &#x27;libraries.index&#x27; tagName=&quot;li&quot;&#125;&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>List all<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">      &#123;&#123;#link-to &#x27;libraries.new&#x27; tagName=&quot;li&quot;&#125;&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Add new<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子模板new.hbs、index.hbs会渲染到outlet上 --&gt;</span></span><br><span class="line">&#123;&#123;outlet&#125;&#125;</span><br></pre></td></tr></table></figure><p>等待项目重启完成，进入<a href="http://localhost:4200/libraries">http://localhost:4200/libraries</a>。可以看到如下图的界面</p><p><img src="/image/blog-image/150.png" alt="libraries界面"></p><p>此时点击界面的上的“List all”和“Add new”除了看到URL变化之外还没任何效果，因为我们的子模板<code>libraries/index.hbs</code>、<code>libraries/new.hbs</code>还没有任何内容，下面在这两个模板中增加一些代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/libraries/index.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>List<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;#each model as |library|&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>&#123;&#123;library.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Address: &#123;&#123;library.address&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Phone: &#123;&#123;library.phone&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/libraries/new.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Add a new local Library<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;input type=&quot;text&quot; value=model.name class=&quot;form-control&quot; placeholder=&quot;The name of the Library&quot;&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;input type=&quot;text&quot; value=model.address class=&quot;form-control&quot; placeholder=&quot;The address of the Library&quot;&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Phone<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;input type=&quot;text&quot; value=model.phone class=&quot;form-control&quot; placeholder=&quot;The phone number of the Library&quot;&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">saveLibrary</span>&#x27; <span class="attr">model</span>&#125;&#125;&gt;</span>Add to library list<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板<code>new.hbs</code>是一个表单，用于新增数据，通过点击按钮“Add to library list”提交表单数据，表单数据由路由<code>libraries/new.js</code>中的<code>saveLibrary</code>方法处理，此时此方法还没定义，在接下来的代码中会定义。<br>在<code>{{action}}</code>表达式中传递了一个参数<code>model</code>到处理的后台，表单中的其他属性会以<code>model</code>的属性方式传递到后台，之所以可以这样做是因为在模板对应的路由中返回了一个空的<code>library</code>对象，在接下来的路由<code>libraries/new.js</code>将看到。<br>等待项目重启完，在点击“List all”和“Add new”可以看到这两个子模板的内容渲染到父模板<code>libraries.hbs</code>的<code>{{outlet}}</code>上。不过由于并没有在路由中获取模型<code>library</code>的数据所以“List all”页面还没有任何数据，“Add new”页面是第一个新增数据吧表单。<br>下面在路由<code>libraries/index.js</code>中获取library的数据，并在<code>model</code>回调中返回到模板中遍历显示。<br>使用Ember CLI命令创建路由，创建过程会询问是否覆盖已经存在的模板文件，输入<code>n</code>选择否。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember g route libraries&#x2F;index</span><br><span class="line">ember g route libraries&#x2F;new</span><br></pre></td></tr></table></figure><p>路由创建完成之后分别在这两个路由中增加获取数据的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/routes/libraries/index.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">  model() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.store.findAll(<span class="string">&#x27;library&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/routes/libraries/new.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">  model() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;library&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="comment">//  处理模板上输入的数据</span></span><br><span class="line">    saveLibrary(newLibrary) &#123;</span><br><span class="line">      newLibrary.save().then(<span class="function">() =&gt;</span> <span class="built_in">this</span>.transitionTo(<span class="string">&#x27;libraries&#x27;</span>));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    willTransition() &#123;</span><br><span class="line">      <span class="comment">// rollbackAttributes() removes the record from the store</span></span><br><span class="line">      <span class="comment">// if the model &#x27;isNew&#x27;</span></span><br><span class="line">      <span class="built_in">this</span>.controller.get(<span class="string">&#x27;model&#x27;</span>).rollbackAttributes();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在此路由的<code>model</code>回调中我们创建了一个空的<code>library</code>对象，并返回到模板页面。这也是为什么能在模板中传递参数<code>model</code>的原因。<br>代码中方法<code>willTransition()</code>是Ember提供的内置方法，此方法的作用是当用户离开当前URL时会清空未保存到服务器的<code>library</code>数据，如果不重置<code>model</code>Ember会在路由切换的时候自动保存数据到服务器上。<br>保存数据的方法<code>saveLibrary()</code>写的比较简洁，它的作用是：先调用<code>save()</code>方法保存数据，如果保存成功在调用方法<code>transitionTo()</code>跳转到路由<code>libraries</code>下（library首页），有关<code>=&gt;</code>语法的介绍请看<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Syntax">Mozill MDN Arrow_functions</a>。<br>在上述代码中多次是用了<code>this.controller</code>，但是在路由中并没有这个属性<code>controller</code>而且也没有控制器文件<code>app/controllers/libraries/new.js</code>，运行项目并不会报错！这是为什么呢？这是因为Ember会自动生成一个虚拟的控制器并在保存在内存中，根据Ember的命名规则会自动生成一个与路由同名的控制器，<br>为了验证这个说法，打开浏览器的控制台，在打开标签“Ember”然后点击左侧的“/# Routes”，找到路由<code>libraries</code>这一块，可以看到如下截图的信息。</p><p><img src="/image/blog-image/151.png" alt="自动生成控制器"></p><p>可以看到每个路由都对应着一个同名的控制器。</p><p>等待项目重启完毕，开始验证代码是否实现了所设想的要求。<br>首先在新增页面输入如下截图信息，然后点击按钮保存数据。</p><p><img src="/image/blog-image/152.png" alt="新增library数据"></p><p>稍等片刻，等待数据保存完毕，可以看到界面顺利跳转到了<a href="http://localhost:4200/libraries">http://localhost:4200/libraries</a>下，如下图所示，并且看到了刚刚新增的数据，为了验证数据是否真的保存到服务器中，我们进入到firebase的APP中查看，可以看到数据以及保存到里library下。</p><p><img src="/image/blog-image/153.png" alt="libraries页面"></p><p>library数据列表页面截图<br></p><p><img src="/image/blog-image/154.png" alt="firebase页面"></p><p>firebase上保存的library数据截图</p><p>此时，如果你注释了方法<code>willTransition()</code>结果会是怎么样的呢！！如果没有这个方法去重置<code>model</code>，当你每次在“Add new”页面输入输入并且没有点击“Add to library list”保存数，然后切换到其他路由下（比如点击“List all”切换到路由<code>libraries</code>下）会自动保存一条数据到服务器。</p><ul><li>在“Add new”页面输入如下截图数据</li></ul><p><img src="/image/blog-image/156.png" alt="未提交保存的数据"></p><ul><li>点击按钮“List all”切换到路由<code>libraries</code>下，可以看到在“Add new”页面添加的数据，如下图所示，但是如果你手动刷新页面后可以发现这条数据不见了，并且在firebase上也没有这条数据，可见这条数据仅仅是保存到Ember的<a href="https://guides.emberjs.com/v2.4.0/models/">store</a>中，并没有真正保存到服务器上。这样的体验是非常糟糕的！！</li></ul><p><img src="/image/blog-image/157.png" alt="显示为提交保存的数据"></p><p>其中,实现重置<code>model</code>的方式还有另外一种更加合适的方法，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">willTransition() &#123;</span><br><span class="line">  <span class="comment">// rollbackAttributes() removes the record from the store</span></span><br><span class="line">  <span class="comment">// if the model &#x27;isNew&#x27;</span></span><br><span class="line"><span class="comment">//   this.controller.get(&#x27;model&#x27;).rollbackAttributes();</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> model = <span class="built_in">this</span>.controller.get(<span class="string">&#x27;model&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (model.get(<span class="string">&#x27;isNew&#x27;</span>)) &#123;</span><br><span class="line">    model.destroyRecord();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本篇的内容到此全部介绍完毕！本篇我们实现了数据的保存、显示，特别是library数据的保存。数据的保存、显示都需要与模型关联，模型在Ember是一个非常重要的内容！希望读者好好掌握模型。</p><h2 id="家庭作业"><a href="#家庭作业" class="headerlink" title="家庭作业"></a>家庭作业</h2><p>下面两个作业完成其中之一即可。本篇选择第一个，第二个请读者自行完成！动手才是真理。</p><h4 id="增强contact的功能"><a href="#增强contact的功能" class="headerlink" title="增强contact的功能"></a>增强contact的功能</h4><ol><li>创建一个包括两个属性<code>email</code>和<code>message</code>的模型<code>contact</code>，<a href="https://github.com/ubuntuvim/library-app/blob/master/app/models/contact.js">参考代码</a></li><li>修改路由<code>app/routes/contact.js</code>返回一个空对象到模板上，<a href="https://github.com/ubuntuvim/library-app/blob/master/app/routes/contact.js">参考代码</a></li><li>修改控制器<code>contact.js</code>，保存数据到firebase，<a href="https://github.com/ubuntuvim/library-app/blob/master/app/controllers/contact.js">参考代码</a></li><li>把放在控制器中的校验代码移动到模型<code>app/models/contact.js</code>中，<a href="https://github.com/ubuntuvim/library-app/blob/master/app/models/contact.js">参考代码</a></li><li>创建一个管理contact的后台页面<a href="http://localhost:4200/admin/contacts">http://localhost:4200/admin/contacts</a>，<a href="https://github.com/ubuntuvim/library-app/blob/master/app/templates/admin/contact.hbs">参考代码</a></li><li>在项目首页的导航菜单上增加一个菜单项“Contacts”，点击菜单进入<a href="http://localhost:4200/admin/contact">http://localhost:4200/admin/contact</a>，<a href="https://github.com/ubuntuvim/library-app/blob/master/app/templates/navbar.hbs">参考代码</a></li><li>使用表格展示所有的contact数据，<a href="https://github.com/ubuntuvim/library-app/blob/master/app/templates/admin/contact.hbs">参考代码</a></li></ol><h4 id="使用路由和模型重构有关contact的代码"><a href="#使用路由和模型重构有关contact的代码" class="headerlink" title="使用路由和模型重构有关contact的代码"></a>使用路由和模型重构有关contact的代码</h4><ol><li>把有关contact的检验放到模型类中</li><li>把控制器<code>contact.js</code>中保存数据的代码移动到同名的路由中</li><li>测试通过后删除控制器<code>contact.js</code></li></ol><p><strong>作业演示结果</strong></p><p><img src="/image/blog-image/159.png" alt="新增contact信息"></p><p>当输入的邮箱格式正确，并且message长度大于6时按钮“send”才可用。</p><p><img src="/image/blog-image/160.png" alt="新增contact信息成功"></p><p>保存成功后情况输入框，并且显示提示信息。当切换路由后再进入到<a href="http://localhost:4200/contact">http://localhost:4200/contact</a>会清空保存成功的提示信息。</p><p><img src="/image/blog-image/161.png" alt="后台Contact列表"></p><p>后台页面成功显示了新增的数据，即使手动刷新页面数据也不会丢失，可见数据已经保存到firebase，在此不再贴firebase上的数据截图了！</p><br>为了照顾懒人我把完整的代码放在[GitHub](https://github.com/ubuntuvim/library-app)上，如有需要请参考参考。博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引入计算属性、action、动态内容</title>
      <link href="/2020/01/18/Ember-Demo/%E5%BC%95%E5%85%A5%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E3%80%81action%E3%80%81%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9/"/>
      <url>/2020/01/18/Ember-Demo/%E5%BC%95%E5%85%A5%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E3%80%81action%E3%80%81%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<p>来源：<a href="http://yoember.com/">yoember.com</a><br>作者：<a href="http://zoltan.nz/">Zoltan</a></p><p><strong>声明</strong>：<em>本文的转载与翻译是经过作者认可的，再次感谢原作，如有侵权请给我留言，我会删除博文！！</em> 希望本系列教程能帮助更多学习Ember.js的初学者。</p><p>接着前面一篇：</p><ol><li><a href="http://xcoding.tech/2016/03/30/Ember-Demo/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8Ember.js%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/">环境搭建以及使用Ember.js创建第一个静态页面</a></li></ol><h2 id="美化主页，增加邮件输入框"><a href="#美化主页，增加邮件输入框" class="headerlink" title="美化主页，增加邮件输入框"></a>美化主页，增加邮件输入框</h2><p>在主页中增加一个<a href="http://www.bootcss.com/">Bootstrap</a>的<code>jumbotron</code>，在这个<code>jumbotron</code>组件中增加一个<code>input</code>输入框和一个<code>button</code>按钮。</p><h3 id="在首页index-hbs中增加静态HTML代码"><a href="#在首页index-hbs中增加静态HTML代码" class="headerlink" title="在首页index.hbs中增加静态HTML代码"></a>在首页index.hbs中增加静态HTML代码</h3><p>为了界面的美化在HTML代码中使用了很多<a href="http://www.bootcss.com/">Bootstrap</a>的样式，更多有关Bootstrap的使用请自行学习。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jumbotron text-center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Coming Soon<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Don&#x27;t miss our launch date, request an invitation now.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal form-group form-group-lg row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-10 col-xs-offset-1 col-sm-6 col-sm-offset-1 col-md-5 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Please type your e-mail address.&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;autofocus&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-10 col-xs-offset-1 col-sm-offset-0 col-sm-4 col-md-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg btn-block&quot;</span>&gt;</span>Request invitation<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等待项目重启完成，可以在首页看到如下效果页面：</p><p><img src="/image/blog-image/90.png" alt="首页效果截图"></p><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>计算属性简单讲它就是一个特殊点的JS函数。如果你看过<a href="http://blog.ddlisting.com/2016/03/17/ember-js-ru-men-zhi-nan-ji-suan-shu-xing-compute-properties/">Ember.js 入门指南之三计算属性（compute properties）</a>相信使用起来会比较简单，再次不过多介绍。</p><h3 id="计算属性使用"><a href="#计算属性使用" class="headerlink" title="计算属性使用"></a>计算属性使用</h3><p>下面几点需求可以通过计算属性去实现：</p><ol><li>当输入框的为空时按钮“Request invitation”不可用</li><li>当输入的邮箱号码格式不正确时按钮“Request invitation”不可用</li><li>点击按钮“Request invitation”之后显示响应信息</li><li>数据保存完成之后情况邮箱输入框的内容</li></ol><h3 id="isDisabled属性"><a href="#isDisabled属性" class="headerlink" title="isDisabled属性"></a>isDisabled属性</h3><p>既然介绍了计算属性那么应该拿来用了！我们使用属性<code>isDisabled</code>控制按钮“Request invitation”是否可用。在<code>button</code>标签上增加一个HTML属性<code>disabled</code>，这个HTML属性决定了按钮<code>button</code>是否可用。当HTML属性<code>disabled=true</code>时按钮不可用，当HTML属性<code>disabled=false</code>时按钮可用，那么如何控制这个值是<code>true</code>还是<code>false</code>呢？别忘了在Handlebars模板中可以直接使用<code>{{}}`表达式获取属性的值，下面修改模板`index.hbs`，在标签`button`中增加属性`disabled`的设置：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg btn-block&quot;</span> <span class="attr">disabled</span>=<span class="string">&#123;&#123;isDisabled&#125;&#125;</span>&gt;</span>Request invitation<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>那要在哪里控制`isDisabled`的值呢？目前有2种方式，第一是在路由`route`中控制这个值，另外一种是在控制器`controller`中控制这个属性的值。有关路由的信息在前一篇已经简单介绍过，或者看[Ember.js 入门指南之二十路由定义](http://blog.ddlisting.com/2016/03/25/ember-js-ru-men-zhi-nan-zhi-er-shi-lu-you-ding-yi/)学习。与路由同理，每个模板都对应有一个同名的控制器`controller`，如果你学习过MVC模式那么你应该很清楚什么是控制器，Ember中的控制器作用于MVC模式中的控制器相似，不过需要注意的是从`Ember 3.0`之后控制器将不再支持，所以呢！会在后面用组件替代控制器，官方也是这么推荐的！更多有关控制器的介绍请看[Controller Introduction](https://guides.emberjs.com/v2.4.0/controllers/)。同样的我们仍然是使用Ember CLI创建控制器，命令如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember g controller index</span><br></pre></td></tr></table></figure>创建好控制器之后，在控制器内添加设置属性`isDisabled`的代码：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    isDisabled: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>等待项目重启完毕，可以看到按钮是不可用，如果你把属性`isDisabled`设置为`false`那么按钮是可用的。## 计算属性与观察者计算属性和观察者是Ember非常重要的特性。更多有关它们的特性请看下面的文章：1. [Ember.js 入门指南之三计算属性](http://blog.ddlisting.com/2016/03/17/ember-js-ru-men-zhi-nan-ji-suan-shu-xing-compute-properties/)2. [计算属性官方参考文档](https://guides.emberjs.com/v2.4.0/object-model/computed-properties/)3. [Ember.js 入门指南之四观察者](http://blog.ddlisting.com/2016/03/17/ember-js-ru-men-zhi-nan-guan-cha-zhe-observer/)4. [观察者官方参考文档](https://guides.emberjs.com/v2.4.0/object-model/observers/)在下面的代码中有关计算属性部分使用的`2.0`之后的语法，在`2.0`之前计算属性的语法是不一样的（[旧语法](https://guides.emberjs.com/v1.12.0/object-model/computed-properties/)）。修改模板`index.hbs`，把邮箱号码输入框改为Ember的`{{input}}</code>助手。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;input type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;Please type your e-mail address.&quot; autofocus=&quot;autofocus&quot;/&gt; --&gt;</span></span><br><span class="line">&#123;&#123;input type=&quot;email&quot; value=emailAddress class=&quot;form-control&quot; placeholder=&quot;Please type your e-mail address.&quot; autofocus=&quot;autofocus&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>等待项目重启之后可以看到界面并没有变化。<code>{{input}}</code>起到与原来代码同样的作用。<br><br>值得注意的是<code>value=emailAddress</code>，并不是<code>value=&quot;emailAddress&quot;</code>。你可以在控制器中通过名字<code>emailAddress</code>获取输入框的值。如果是<code>value=&quot;emailAddress&quot;</code>这种方式，输入框的值默认一直都是”emailAddress”，并且在控制器中不能使用属性<code>emailAddress</code>获取值。这一点与平常我们获取<code>&lt;input&gt;</code>输入框的值有差别，通常获取<code>&lt;input&gt;</code>输入框的值是通过<code>name</code>属性获取的。修改控制器代码，在控制器中增加个计算属性和一个观察器，以及一个普通属性<code>emailAddress</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    isDisabled: <span class="literal">true</span>, <span class="comment">//设置默认值为true</span></span><br><span class="line">    emailAddress: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 设置默认值为空字符串</span></span><br><span class="line">    <span class="comment">// 定义一个计算属性，当属性emailAddress发生变化时会被执行不是主动执行的，是要有人调用才执行，</span></span><br><span class="line">    <span class="comment">// 比如执行：this.get(&#x27;actualEmailAddress&#x27;)去调用这个属性才会执行</span></span><br><span class="line">    actualEmailAddress: Ember.computed(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;actualEmailAddress function is called: &#x27;</span>, <span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>));</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 定义一个观察器，当属性emailAddress发生变化时会自动执行，也就是说观察器会检测属性emailAddress值的变化</span></span><br><span class="line">    emailAddressChanged: Ember.observer(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;observer is called: &#x27;</span>, <span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下面我们做一个非常有趣的小测试。<br><br>等待页面刷新完毕，打开浏览器控制台，选择标签<code>Ember</code>，在选择左侧的<code>/# Route</code>，找到<code>Controller</code>中名为<code>index</code>的，点击<code>$E</code>（如下图红色框出位置），然后再回到<code>Console</code>标签下。</p><p><img src="/image/blog-image/91.png" alt="控制台"></p><p>点击<code>$E</code>在<code>Console</code>下可以看到类似<code>Ember Inspector ($E):  Class &#123;__ember1459491972481: &quot;ember470&quot;, __ember_meta__: Meta&#125;</code>的信息。然后在控制台命令输入行输入<code>$E.get(&#39;actualEmailAddress&#39;)</code>代码的作用是获取计算属性的值。可以看到触发了计算属性方法，打印了日志，如下截图所示：</p><p><img src="/image/blog-image/92.png" alt="计算属性执行日志"></p><p>然后再次执行<code>$E.get(&#39;actualEmailAddress&#39;)</code>计算属性方法不会被执行，因为计算属性检测的属性<code>emailAddress</code>值并没有发生变化，没有发生变化，计算属性方法不会被执行，手动修改输入框的值，结果可以看到计算属性方法再次执行了，如下图所示：</p><p><img src="/image/blog-image/94.png" alt="修改输入框的值执行结果截图"></p><p>然后在控制台命令行在输入<code>$E.set(&#39;emailAddress&#39;, &#39;example@example.com&#39;)</code>这句代码意思是修改输入框的值。可以看到观察器方法执行了，因为观察器检测到被检测的属性<code>emailAddress</code>发生了变化，只要被检测的属性发生了变化就会自动执行。可以看到如下截图的日志信息：</p><p><img src="/image/blog-image/93.png" alt="观察器执行结果"></p><p>并且可以看到邮箱号码输入框的值被置为<code>example@example.com</code>。然后在控制台命令行再次输入<code>$E.set(&#39;emailAddress&#39;, &#39;example@example.com&#39;)</code>观察器方法并不会执行了，即使你输入多次也不会执行，因为你输入的值<code>example@example.com</code>始终没有变化。如果你稍微修改输入的值那么可以看到观察器又执行了。比如输入<code>$E.set(&#39;emailAddress&#39;, &#39;test&#39;)</code>，可以看到控制台再次打印了日志信息。</p><p>测试观察器还有另外一种简单的方法，就是直接在邮件输入框直接输入某些内容。可以看到控制台会随着这输入的内容变化而变化，感觉就像是在检测键盘事件一样。下图是我输入<code>12@qq.com</code>控制台打印的日志信息：</p><p><img src="/image/blog-image/95.png" alt="输入12@qq.com日志信息"></p><p>到此，我想你对计算属性和观察者应该有了一定的认识了！！</p><h2 id="用计算属性修改isDisabled"><a href="#用计算属性修改isDisabled" class="headerlink" title="用计算属性修改isDisabled"></a>用计算属性修改isDisabled</h2><p>明白了计算属性之后，用计算属性重写<code>isDisabled</code>。控制器<code>index.js</code>代码修改如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    <span class="comment">// isDisabled: true, //设置默认值为true</span></span><br><span class="line"></span><br><span class="line">    emailAddress: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 设置默认值为空字符串</span></span><br><span class="line"></span><br><span class="line">    isDisabled: Ember.computed(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span> === <span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>);  <span class="comment">//判断输入框内容是否为空</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个计算属性，当属性emailAddress发生变化时会被执行不是主动执行的，是要有人调用才执行，</span></span><br><span class="line">    <span class="comment">// 比如执行：this.get(&#x27;actualEmailAddress&#x27;)去调用这个属性才会执行</span></span><br><span class="line">    <span class="comment">// actualEmailAddress: Ember.computed(&#x27;emailAddress&#x27;, function() &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;actualEmailAddress function is called: &#x27;, this.get(&#x27;emailAddress&#x27;));</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line">    <span class="comment">// 定义一个观察器，当属性emailAddress发生变化时会自动执行，也就是说观察器会检测属性emailAddress值的变化</span></span><br><span class="line">    <span class="comment">// emailAddressChanged: Ember.observer(&#x27;emailAddress&#x27;, function() &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;observer is called: &#x27;, this.get(&#x27;emailAddress&#x27;));</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>直接把简单属性<code>isDisabled</code>定义为计算属性，并且这个计算属性检测<code>emailAddress</code>值的变化，如果<code>emailAddress</code>值为空那么计算属性<code>isDisabled</code>的值为<code>true</code>否则值为<code>false</code>。从而实现判断按钮“Request invitation”是否可用。Ember封装了很多字符串判断方法，直接调用Ember封装好的现成的方法，代码再修改如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    <span class="comment">// isDisabled: true, //设置默认值为true</span></span><br><span class="line"></span><br><span class="line">    emailAddress: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 设置默认值为空字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// isDisabled: Ember.computed(&#x27;emailAddress&#x27;, function() &#123;</span></span><br><span class="line">    <span class="comment">//     return &#x27;&#x27; === this.get(&#x27;emailAddress&#x27;);  //判断输入框内容是否为空</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    isDisabled: Ember.computed.empty(<span class="string">&#x27;emailAddress&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更多有关计算属性封装好的方法请看<a href="http://emberjs.com/api/classes/Ember.computed.html">EMBER.COMPUTED NAMESPACE</a>。</p><h3 id="isValid"><a href="#isValid" class="headerlink" title="isValid"></a>isValid</h3><p>记得前面“计算属性使用”这个小结提出了使用计算属性实现多个需求，其中有一个是实现判断输入的邮箱号码是否是正确格式的邮箱。现在再增加一个计算属性<code>isValid</code>判断输入的邮箱号码的格式是否正确。然后再把这个计算属性绑定到原来的计算属性<code>isDisabled</code>上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line"></span><br><span class="line">    emailAddress: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 设置默认值为空字符串</span></span><br><span class="line"></span><br><span class="line">    emailAddress: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 设置默认值为空字符串</span></span><br><span class="line">    <span class="comment">//  使用正则表达式判断邮箱格式，如果正确则返回true反之返回false</span></span><br><span class="line">    isValid: Ember.computed.match(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="regexp">/^.+@.+\..+$/</span>),</span><br><span class="line">    <span class="comment">// 把计算属性isValid绑定到isDisabled上</span></span><br><span class="line">    isDisabled: Ember.computed.not(<span class="string">&#x27;isValid&#x27;</span>)  <span class="comment">//当`disabled=false`时按钮可用，所以正好需要取反</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>到此校验问题基本实现了，等待项目重启完成，可以看到默认状态下按钮不可用，并且当你输入的内容不符合邮箱格式时按钮也是不可用的，如果输入的内容是一个正确的邮箱那么此时按钮自动变为可用状态。不好截图，就不截图了！请读者自己试验！！</p><h2 id="添加Action到控制器"><a href="#添加Action到控制器" class="headerlink" title="添加Action到控制器"></a>添加Action到控制器</h2><p>目前为止，输入检验也完成了，但你输入正确邮箱后添加按钮并不会发生任何事实，输入的内容也没有保存。下面开始介绍如何处理界面输入的内容。<br><br>首先修改模板<code>index.hbs</code>，在模板中增加一个<code>{{action}}</code>标签，有关Action请看<a href="https://guides.emberjs.com/v2.4.0/templates/actions/">Actions</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg btn-block&quot;</span> <span class="attr">disabled</span>=<span class="string">&#123;&#123;isDisabled&#125;&#125;</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">saveInvitation</span>&#x27;&#125;&#125;&gt;</span>Request invitation<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>仅仅修改了模板中<code>&lt;button&gt;</code>标签，其他不变，保存等待项目重启，此时在界面输入正确的邮箱然后点击按钮你在浏览器的控制台看到如下错误信息：</p><p><img src="/image/blog-image/96.png" alt="错误信息"></p><p>能看到错误信息说明你的项目是正确的，因为我们并没有定义<code>saveInvitation</code>，在控制器<code>index</code>中增加这个Action的定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">    <span class="comment">// isDisabled: true, //设置默认值为true</span></span><br><span class="line"></span><br><span class="line">    emailAddress: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 设置默认值为空字符串</span></span><br><span class="line"></span><br><span class="line">    emailAddress: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 设置默认值为空字符串</span></span><br><span class="line">    <span class="comment">//  使用正则表达式判断邮箱格式，如果正确则返回true反之返回false</span></span><br><span class="line">    isValid: Ember.computed.match(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="regexp">/^.+@.+\..+$/</span>),</span><br><span class="line">    <span class="comment">// 把计算属性isValid绑定到isDisabled上</span></span><br><span class="line">    isDisabled: Ember.computed.not(<span class="string">&#x27;isValid&#x27;</span>),  <span class="comment">//当`disabled=false`时按钮可用，所以正好需要取反</span></span><br><span class="line"></span><br><span class="line">    actions: &#123;</span><br><span class="line">        saveInvitation: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//  注意alert中字符串两边使用的是 `  不是单引号或者双引号</span></span><br><span class="line">            alert(<span class="string">`Saving of the following email address is in propgress: <span class="subst">$&#123;<span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>)&#125;</span>`</span>);</span><br><span class="line">            <span class="comment">// 模拟保存操作</span></span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;responseMessage&#x27;</span>, <span class="string">`Thank you! We&#x27;ve just saved your email address: <span class="subst">$&#123;<span class="built_in">this</span>.get(<span class="string">&#x27;emailAddress&#x27;</span>)&#125;</span>`</span>);</span><br><span class="line">            <span class="comment">//  情况输入框内容</span></span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;emailAddress&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：代码<code>alert</code>方法中并没有使用单引号或者是双引号囊括字符串“Saving of the following email address is in propgress: ${this.get(‘emailAddress’)}”而是使用“`”，这两者肯定是有区别的，前者直接把<code>$&#123;this.get(&#39;emailAddress&#39;)&#125;</code>当着字符串，后者会把<code>$&#123;this.get(&#39;emailAddress&#39;)&#125;</code>当着表达式，从运行结果就可以看出来了。<br><br>输入正确邮箱后点击按钮会得到如下截图结果：</p><p><img src="/image/blog-image/97.png" alt="结果"></p><p>直接弹出提示信息这种方式太暴力了，改一种提示方式，修改模板<code>index.hbs</code>，然后在注释掉控制器<code>index.js</code>中的<code>alert</code>语句。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;! app/templates/index.hbs&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jumbotron text-center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Coming Soon<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Don&#x27;t miss our launch date, request an invitation now.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal form-group form-group-lg row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-10 col-xs-offset-1 col-sm-6 col-sm-offset-1 col-md-5 col-md-offset-2&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- &lt;input type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;Please type your e-mail address.&quot; autofocus=&quot;autofocus&quot;/&gt; --&gt;</span></span><br><span class="line">          &#123;&#123;input type=&quot;email&quot; value=emailAddress class=&quot;form-control&quot; placeholder=&quot;Please type your e-mail address.&quot; autofocus=&quot;autofocus&quot;&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-10 col-xs-offset-1 col-sm-offset-0 col-sm-4 col-md-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg btn-block&quot;</span> <span class="attr">disabled</span>=<span class="string">&#123;&#123;isDisabled&#125;&#125;</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">saveInvitation</span>&#x27;&#125;&#125;&gt;</span>Request invitation<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;&#123;! 显示提示信息&#125;&#125;</span><br><span class="line">    &#123;&#123;#if responseMessage&#125;&#125;</span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-success&quot;</span>&gt;</span>&#123;&#123;responseMessage&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   &#123;&#123;/if&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码新引入了一个表达式<code>{{if}}</code>，顾名思义，这个表达式就是用于判断的。更多有关判断表达式的介绍请看<a href="http://blog.ddlisting.com/2016/03/18/ember-js-ru-men-zhi-nan-zhi-jiu-handlebarstiao-jian-biao-da-shi/">Ember.js 入门指南之九handlebars条件表达式</a></p><p>等待项目重启完成，再次测试。输入正确格式的邮箱，点击按钮提交可以看到如下的结果：</p><p><img src="/image/blog-image/98.png" alt="友好提示信息"></p><p>主要看绿色提示信息，相对于前一种直接弹框提示方式友好多了！！！</p><p>好了，到此第二篇也完成了。内容比较多需要耐心才能看完，如果你能认真坚持看到这里相信你一定收获了很多！！</p><h2 id="家庭作业"><a href="#家庭作业" class="headerlink" title="家庭作业"></a>家庭作业</h2><p><strong>作业要求</strong></p><ol><li>一个邮件输入框<code>{{input}}</code>，需要校验不为空、校验邮箱格式</li><li>一个消息输入框<code>{{textarea}}</code>，需要校验不为空、输入信息长度不少于5</li><li>上述两个输入框的校验都通过才允许提交</li><li>提交成功后在界面显示提示信息</li></ol><p><strong>用到的组件和方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;input type=<span class="string">&quot;email&quot;</span> value=emailAddress <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> placeholder=<span class="string">&quot;Please type your e-mail address.&quot;</span> autofocus=<span class="string">&quot;autofocus&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;textarea <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> placeholder=<span class="string">&quot;Your message. (At least 5 characters.)&quot;</span> rows=<span class="string">&quot;7&quot;</span> value=message&#125;&#125;</span><br></pre></td></tr></table></figure><p>判断长度不小于5用到的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ember.computed.gte(<span class="string">&#x27;propertyName&#x27;</span>, number);</span><br></pre></td></tr></table></figure><p>并且判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ember.computed.and(<span class="string">&#x27;firstProperty&#x27;</span>, <span class="string">&#x27;secondProperty&#x27;</span>);</span><br></pre></td></tr></table></figure><p>获取属性值的长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message.length</span><br></pre></td></tr></table></figure><p>获取计算属性值长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ember.computed(<span class="string">&#x27;propertyName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;propertyName&#x27;</span>).get(<span class="string">&#x27;length&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>为了照顾懒人我把完整的代码放在[GitHub](https://github.com/ubuntuvim/library-app)上，如有需要请参考参考。博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型高级特性，引入模型关联关系</title>
      <link href="/2020/01/18/Ember-Demo/%E6%A8%A1%E5%9E%8B%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%EF%BC%8C%E5%BC%95%E5%85%A5%E6%A8%A1%E5%9E%8B%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB/"/>
      <url>/2020/01/18/Ember-Demo/%E6%A8%A1%E5%9E%8B%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%EF%BC%8C%E5%BC%95%E5%85%A5%E6%A8%A1%E5%9E%8B%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>来源：<a href="http://yoember.com/">yoember.com</a><br>作者：<a href="http://zoltan.nz/">Zoltan</a></p><p><strong>声明</strong>：<em>本文的转载与翻译是经过作者认可的，再次感谢原作，如有侵权请给我留言，我会删除博文！！</em> 希望本系列教程能帮助更多学习Ember.js的初学者。</p><p>接着前面五篇：</p><ol><li><a href="http://xcoding.tech/2016/03/30/Ember-Demo/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8Ember.js%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/">环境搭建以及使用Ember.js创建第一个静态页面</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E5%BC%95%E5%85%A5%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E3%80%81action%E3%80%81%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9/">引入计算属性、action、动态内容</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E6%A8%A1%E5%9E%8B%EF%BC%8C%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93/">模型，保存数据到数据库</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%8A%A0%E5%85%A5CRUD%E5%8A%9F%E8%83%BD/">发布项目，加入CRUD功能</a></li><li><a href="http://xcoding.tech/2016/03/31/Ember-Demo/%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%BC%95%E5%85%A5%E7%BB%84%E4%BB%B6/">从服务器获取数据，引入组件</a></li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇主要是介绍模型直接的关联关系，比如：一对一、一对多关系。会创建两个模型<code>author</code>和<code>book</code>，设置它们的关系，并增加测试数据。</p><h2 id="创建模型并设置关联"><a href="#创建模型并设置关联" class="headerlink" title="创建模型并设置关联"></a>创建模型并设置关联</h2><p>关联关系设置API：</p><ol><li><a href="http://emberjs.com/api/data/#method_belongsTo">belongsTo</a></li><li><a href="http://emberjs.com/api/data/#method_hasMany">hasMany</a></li></ol><p><strong>模型关系</strong>：一个<code>library</code>对应多个<code>book</code>，一个<code>author</code>对应多个<code>book</code>。关系图如下：</p><p><img src="/image/blog-image/180.png" alt="library模型关系图"></p><p>使用<a href="http://ember-cli.com/user/guide">Ember CLI</a>命令创建模型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember g model book title:string releaseYear:date library:belongsTo author:belongsTo</span><br><span class="line">ember g model author name:string books:hasMany</span><br></pre></td></tr></table></figure><p>手动在<code>library</code>中增加<code>hasMany</code>关联关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Model <span class="keyword">from</span> <span class="string">&#x27;ember-data/model&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> attr <span class="keyword">from</span> <span class="string">&#x27;ember-data/attr&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; hasMany &#125; <span class="keyword">from</span> <span class="string">&#x27;ember-data/relationships&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Model.extend(&#123;</span><br><span class="line">  name: attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">  address: attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">  phone: attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  books: hasMany(<span class="string">&#x27;books&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  isValid: Ember.computed.notEmpty(<span class="string">&#x27;name&#x27;</span>),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="创建一个后台管理页面“Seeder”"><a href="#创建一个后台管理页面“Seeder”" class="headerlink" title="创建一个后台管理页面“Seeder”"></a>创建一个后台管理页面“Seeder”</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember g route admin&#x2F;seeder</span><br></pre></td></tr></table></figure><p>检查<code>router.js</code>看看路由是否成功创建。相关代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  其他代码不变，省略</span></span><br><span class="line"><span class="built_in">this</span>.route(<span class="string">&#x27;admin&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;invitations&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;contacts&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.route(<span class="string">&#x27;seeder&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//  其他代码不变，省略</span></span><br></pre></td></tr></table></figure><p>修改导航模板<code>navbar.hbs</code>增加新建路由的入口链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;#nav-link-to &#x27;admin.invitations&#x27;&#125;&#125;Invitations&#123;&#123;/nav-link-to&#125;&#125;</span><br><span class="line">  &#123;&#123;#nav-link-to &#x27;admin.contacts&#x27;&#125;&#125;Contacts&#123;&#123;/nav-link-to&#125;&#125;</span><br><span class="line">  &#123;&#123;#nav-link-to &#x27;admin.seeder&#x27;&#125;&#125;Seeder&#123;&#123;/nav-link-to&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用Ember-RSVP-hash-在一个路由中返回多个模型的数据"><a href="#使用Ember-RSVP-hash-在一个路由中返回多个模型的数据" class="headerlink" title="使用Ember.RSVP.hash()在一个路由中返回多个模型的数据"></a>使用<code>Ember.RSVP.hash()</code>在一个路由中返回多个模型的数据</h2><p><a href="http://emberjs.com/">Ember</a>支持在一个路由的<code>model</code>回调中返回多个模型的数据。有关方法发API请看<a href="http://emberjs.com/api/classes/RSVP.html#method_hash">Ember.RSVP.hash()</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/routes/admin/seeder.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">  model() &#123;</span><br><span class="line">    <span class="keyword">return</span> Ember.RSVP.hash(&#123;</span><br><span class="line">      libraries: <span class="built_in">this</span>.store.findAll(<span class="string">&#x27;library&#x27;</span>),</span><br><span class="line">      books: <span class="built_in">this</span>.store.findAll(<span class="string">&#x27;book&#x27;</span>),</span><br><span class="line">      authors: <span class="built_in">this</span>.store.findAll(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setupController(controller, model) &#123;</span><br><span class="line">    controller.set(<span class="string">&#x27;libraries&#x27;</span>, model.libraries);</span><br><span class="line">    controller.set(<span class="string">&#x27;books&#x27;</span>, model.books);</span><br><span class="line">    controller.set(<span class="string">&#x27;authors&#x27;</span>, model.authors);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述<code>model()</code>回调中返回了三个模型的数据：<code>library</code>、<code>book</code>和<code>author</code>。需要注意的是：上述代码中方法<code>Ember.RSVP.hash()</code>会发送3个请求，并且只有三个请求都成功才会执行成功。<br>在<code>setupController()</code>回调中，把三个模型分别设置到<code>controller</code>中。</p><h2 id="路由内置方法调用次序"><a href="#路由内置方法调用次序" class="headerlink" title="路由内置方法调用次序"></a>路由内置方法调用次序</h2><p>每个路由内都内置了很多方法，比如前面介绍的<code>model</code>、<code>setupController</code>、<code>renderTemplate</code>，这些都是内置在路由类中的方法，那么这些方法调用次序又是如何的呢？请看下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/routes/test.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="keyword">debugger</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  beforeModel(transition) &#123;</span><br><span class="line">    <span class="keyword">debugger</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  model(params, transition) &#123;</span><br><span class="line">    <span class="keyword">debugger</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  afterModel(model, transition) &#123;</span><br><span class="line">    <span class="keyword">debugger</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  activate() &#123;</span><br><span class="line">    <span class="keyword">debugger</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setupController(controller, model) &#123;</span><br><span class="line">    <span class="keyword">debugger</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  renderTemplate(controller, model) &#123;</span><br><span class="line">    <span class="keyword">debugger</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>打开浏览器的debug模式并在执行到这个路由中<a href="http://localhost:4200/test">http://localhost:4200/test</a>。可以看到方法的执行次序与上述代码方法的次序是一致的。有关API请看下面网址的介绍：</p><ol><li><a href="http://emberjs.com/api/classes/Ember.Route.html#method_init">init()</a></li><li><a href="http://emberjs.com/api/classes/Ember.Route.html#method_beforeModel">beforeModel(transition)</a></li><li><a href="http://emberjs.com/api/classes/Ember.Route.html#method_model">model(params, transition)</a></li><li><a href="http://emberjs.com/api/classes/Ember.Route.html#method_activate">activate()</a></li><li><a href="http://emberjs.com/api/classes/Ember.Route.html#method_setupController">setupController(controller, model)</a></li><li><a href="http://emberjs.com/api/classes/Ember.Route.html#method_renderTemplate">renderTemplate(controller, model)</a></li></ol><h2 id="数量显示功能"><a href="#数量显示功能" class="headerlink" title="数量显示功能"></a>数量显示功能</h2><p>创建一个组件用于显示各个模型数据的总数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember g component number-box</span><br></pre></td></tr></table></figure><p>组件创建完毕之后在组件类中增加css类，使用属性<code>classNames</code>设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/components/number-box.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line"></span><br><span class="line">  classNames: [<span class="string">&#x27;panel&#x27;</span>, <span class="string">&#x27;panel-warning&#x27;</span>]</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在组件模板中增加代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/components/number-box.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>&#123;&#123;if number number &#x27;...&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在修改<code>app/templates/admin/seeder.hbs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/admin/seeder.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Seeder, our Data Center<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>&#123;&#123;number-box title=&quot;Libraries&quot; number=libraries.length&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>&#123;&#123;number-box title=&quot;Authors&quot; number=authors.length&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>&#123;&#123;number-box title=&quot;Books&quot; number=books.length&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等待项目重启完成，进入到后台的seeder下可以看到三个小圆点，请记得，一定要在<code>setupController</code>中设置数据，<code>model</code>回调会自动从服务器获取数据，<code>obj.length</code>意思是调用<code>length()</code>方法获取数据长度，然后直接显示到模板上，效果如下截图，由于后面两个模型还没有数据所以显示省略号。</p><p><img src="/image/blog-image/184.png" alt="结果截图"></p><h2 id="构建表单生成测试数据"><a href="#构建表单生成测试数据" class="headerlink" title="构建表单生成测试数据"></a>构建表单生成测试数据</h2><p>前面已经介绍过属性的传递，下面的代码将为读者介绍一些更加高级的东西！！一大波代码即将来临！！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ember g component seeder-block</span><br><span class="line">ember g component fader-label</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// app/components/seeder-block.js</span><br><span class="line">import Ember from &#x27;ember&#x27;;</span><br><span class="line"></span><br><span class="line">export default Ember.Component.extend(&#123;</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line">    generateAction() &#123;</span><br><span class="line">      this.sendAction(&#x27;generateAction&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    deleteAction() &#123;</span><br><span class="line">      this.sendAction(&#x27;deleteAction&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/components/seeder-block.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;sectionTitle&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Number of new records:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123;input value=counter class=&#x27;form-control&#x27;&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-4&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">generateAction</span>&#x27;&#125;&#125;&gt;</span>Generate &#123;&#123;sectionTitle&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          &#123;&#123;#fader-label isShowing=createReady&#125;&#125;Created!&#123;&#123;/fader-label&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-4&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> &#123;&#123;<span class="attr">action</span> &#x27;<span class="attr">deleteAction</span>&#x27;&#125;&#125;&gt;</span>Delete All &#123;&#123;sectionTitle&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          &#123;&#123;#fader-label isShowing=deleteReady&#125;&#125;Deleted!&#123;&#123;/fader-label&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// app/components/fader-label.js</span><br><span class="line">import Ember from &#x27;ember&#x27;;</span><br><span class="line"></span><br><span class="line">export default Ember.Component.extend(&#123;</span><br><span class="line">  tagName: &#x27;span&#x27;,</span><br><span class="line"></span><br><span class="line">  classNames: [&#x27;label label-success label-fade&#x27;],</span><br><span class="line">  classNameBindings: [&#x27;isShowing:label-show&#x27;],</span><br><span class="line"></span><br><span class="line">  isShowing: false,</span><br><span class="line"></span><br><span class="line">  isShowingChanged: Ember.observer(&#x27;isShowing&#x27;, function() &#123;</span><br><span class="line">    Ember.run.later(() =&gt; &#123;</span><br><span class="line">      this.set(&#x27;isShowing&#x27;, false);</span><br><span class="line">    &#125;, 3000);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码<code> classNames: [&#39;label label-success label-fade&#39;]</code>的作用是绑定三个CSS类到标签<code>span</code>上，得到html如<code>&lt;span class=&quot;label label-success label-fade&quot;&gt;xxx&lt;/span&gt;</code>。<br>代码<code>classNameBindings: [&#39;isShowing:label-show&#39;]</code>的作用是根据属性<code>isShowing</code>的值判断是否添加CSS类<code>label-show</code>到标签<code>span</code>上。更多有关信息请看<a href="http://blog.ddlisting.com/2016/03/21/ember-js-ru-men-zhi-nan-zhi-shi-er-handlebarsshu-xing-bang-ding/">Ember.js 入门指南之十二handlebars属性绑定</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/components/fader-label.hbs --&gt;</span></span><br><span class="line">&#123;&#123;yield&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// app/styles/app.scss</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;bootstrap&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.library-item</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.label-fade</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  @include transition(all 0.5s);</span><br><span class="line">  &amp;<span class="selector-class">.label-show</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最主要、最关键的部分来了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/templates/admin/seeder.hbs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Seeder, our Data Center<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>&#123;&#123;number-box title=&quot;Libraries&quot; number=libraries.length&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>&#123;&#123;number-box title=&quot;Authors&quot; number=authors.length&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>&#123;&#123;number-box title=&quot;Books&quot; number=books.length&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;seeder-block</span><br><span class="line">    sectionTitle=&#x27;Libraries&#x27;</span><br><span class="line">    counter=librariesCounter</span><br><span class="line">    generateAction=&#x27;generateLibraries&#x27;</span><br><span class="line">    deleteAction=&#x27;deleteLibraries&#x27;</span><br><span class="line">    createReady=libDone</span><br><span class="line">    deleteReady=libDelDone</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;seeder-block</span><br><span class="line">  sectionTitle=&#x27;Authors with Books&#x27;</span><br><span class="line">  counter=authorCounter</span><br><span class="line">  generateAction=&#x27;generateBooksAndAuthors&#x27;</span><br><span class="line">  deleteAction=&#x27;deleteBooksAndAuthors&#x27;</span><br><span class="line">  createReady=authDone</span><br><span class="line">  deleteReady=authDelDone</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>属性<code>generateAction</code>和<code>deleteAction</code>用于关联控制器中的<code>action</code>方法，属性<code>createReady</code>和<code>deleteReady</code>是标记属性。</p><p>等待项目重启完毕，页面结果如下：</p><p><img src="/image/blog-image/185.png" alt="result"></p><p>底部的两个输入框用于获取生成的数据条数。</p><h2 id="安装faker-js构建测试数据"><a href="#安装faker-js构建测试数据" class="headerlink" title="安装faker.js构建测试数据"></a>安装<code>faker.js</code>构建测试数据</h2><p>使用<a href="https://github.com/johnotander/ember-faker">faker.js</a>构建测试数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ember install ember-faker</span><br></pre></td></tr></table></figure><p>安装完毕之后扩展各个模型，并在模型中调用<code>randomize()</code>方法产生数据。下面是各个模型的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/models/library.js</span></span><br><span class="line"><span class="keyword">import</span> Model <span class="keyword">from</span> <span class="string">&#x27;ember-data/model&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> attr <span class="keyword">from</span> <span class="string">&#x27;ember-data/attr&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; hasMany &#125; <span class="keyword">from</span> <span class="string">&#x27;ember-data/relationships&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Faker <span class="keyword">from</span> <span class="string">&#x27;faker&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Model.extend(&#123;</span><br><span class="line">  name: attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">  address: attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">  phone: attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  books: hasMany(<span class="string">&#x27;book&#x27;</span>, &#123;<span class="attr">inverse</span>: <span class="string">&#x27;library&#x27;</span>, <span class="attr">async</span>: <span class="literal">true</span>&#125;),</span><br><span class="line"></span><br><span class="line">  isValid: Ember.computed.notEmpty(<span class="string">&#x27;name&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  randomize() &#123;</span><br><span class="line">    <span class="built_in">this</span>.set(<span class="string">&#x27;name&#x27;</span>, Faker.company.companyName() + <span class="string">&#x27; Library&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.set(<span class="string">&#x27;address&#x27;</span>, <span class="built_in">this</span>._fullAddress());</span><br><span class="line">    <span class="built_in">this</span>.set(<span class="string">&#x27;phone&#x27;</span>, Faker.phone.phoneNumber());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If you would like to use in chain.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  _fullAddress() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;Faker.address.streetAddress()&#125;</span>, <span class="subst">$&#123;Faker.address.city()&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/models/book.js</span></span><br><span class="line"><span class="keyword">import</span> Model <span class="keyword">from</span> <span class="string">&#x27;ember-data/model&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> attr <span class="keyword">from</span> <span class="string">&#x27;ember-data/attr&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; belongsTo &#125; <span class="keyword">from</span> <span class="string">&#x27;ember-data/relationships&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Faker <span class="keyword">from</span> <span class="string">&#x27;faker&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Model.extend(&#123;</span><br><span class="line"></span><br><span class="line">  title:        attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line">  releaseYear:  attr(<span class="string">&#x27;date&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  author:       belongsTo(<span class="string">&#x27;author&#x27;</span>, &#123;<span class="attr">inverse</span>: <span class="string">&#x27;books&#x27;</span>, <span class="attr">async</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">  library:      belongsTo(<span class="string">&#x27;library&#x27;</span>, &#123;<span class="attr">inverse</span>: <span class="string">&#x27;books&#x27;</span>, <span class="attr">async</span>: <span class="literal">true</span>&#125;),</span><br><span class="line"></span><br><span class="line">  randomize(author, library) &#123;</span><br><span class="line">    <span class="built_in">this</span>.set(<span class="string">&#x27;title&#x27;</span>, <span class="built_in">this</span>._bookTitle());</span><br><span class="line">    <span class="built_in">this</span>.set(<span class="string">&#x27;author&#x27;</span>, author);</span><br><span class="line">    <span class="built_in">this</span>.set(<span class="string">&#x27;releaseYear&#x27;</span>, <span class="built_in">this</span>._randomYear());</span><br><span class="line">    <span class="built_in">this</span>.set(<span class="string">&#x27;library&#x27;</span>, library);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  _bookTitle() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;Faker.commerce.productName()&#125;</span> Cookbook`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  _randomYear() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">this</span>._getRandomArbitrary(<span class="number">1900</span>, <span class="number">2015</span>));</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  _getRandomArbitrary(min, max) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() * (max - min) + min;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/models/author.js</span></span><br><span class="line"><span class="keyword">import</span> Model <span class="keyword">from</span> <span class="string">&#x27;ember-data/model&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> attr <span class="keyword">from</span> <span class="string">&#x27;ember-data/attr&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; hasMany &#125; <span class="keyword">from</span> <span class="string">&#x27;ember-data/relationships&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Faker <span class="keyword">from</span> <span class="string">&#x27;faker&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Model.extend(&#123;</span><br><span class="line"></span><br><span class="line">  name: attr(<span class="string">&#x27;string&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  books: hasMany(<span class="string">&#x27;book&#x27;</span>, &#123;<span class="attr">inverse</span>: <span class="string">&#x27;author&#x27;</span>, <span class="attr">async</span>: <span class="literal">true</span>&#125;),</span><br><span class="line"></span><br><span class="line">  randomize() &#123;</span><br><span class="line">    <span class="built_in">this</span>.set(<span class="string">&#x27;name&#x27;</span>, Faker.name.findName());</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述代码中。 <code>async</code>设置为<code>true</code>的作用是：在获取book的同时会把关联的<code>author</code>也加载出来，默认是不加载（延迟加载）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controllers/admin/seeder.js</span></span><br><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">&#x27;ember&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Faker <span class="keyword">from</span> <span class="string">&#x27;faker&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line"></span><br><span class="line">  libraries: [],</span><br><span class="line">  books: [],</span><br><span class="line">  authors: [],</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">    generateLibraries() &#123;</span><br><span class="line">      <span class="keyword">const</span> counter = <span class="built_in">parseInt</span>(<span class="built_in">this</span>.get(<span class="string">&#x27;librariesCounter&#x27;</span>));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; counter; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;library&#x27;</span>).randomize().save().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (i === counter<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;librariesCounter&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">this</span>.set(<span class="string">&#x27;libDone&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    deleteLibraries() &#123;</span><br><span class="line">      <span class="built_in">this</span>._destroyAll(<span class="built_in">this</span>.get(<span class="string">&#x27;libraries&#x27;</span>));</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.set(<span class="string">&#x27;libDelDone&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    generateBooksAndAuthors() &#123;</span><br><span class="line">      <span class="keyword">const</span> counter = <span class="built_in">parseInt</span>(<span class="built_in">this</span>.get(<span class="string">&#x27;authorCounter&#x27;</span>));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; counter; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> newAuthor = <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;author&#x27;</span>);</span><br><span class="line">        newAuthor.randomize()</span><br><span class="line">          .save().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (i === counter<span class="number">-1</span>) &#123;</span><br><span class="line">               <span class="built_in">this</span>.set(<span class="string">&#x27;authorCounter&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">               <span class="built_in">this</span>.set(<span class="string">&#x27;authDone&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>._generateSomeBooks(newAuthor);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    deleteBooksAndAuthors() &#123;</span><br><span class="line">      <span class="built_in">this</span>._destroyAll(<span class="built_in">this</span>.get(<span class="string">&#x27;books&#x27;</span>));</span><br><span class="line">      <span class="built_in">this</span>._destroyAll(<span class="built_in">this</span>.get(<span class="string">&#x27;authors&#x27;</span>));</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.set(<span class="string">&#x27;authDelDone&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Private methods</span></span><br><span class="line"></span><br><span class="line">  _generateSomeBooks(author) &#123;</span><br><span class="line">    <span class="keyword">const</span> bookCounter = Faker.random.number(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; bookCounter; j++) &#123;</span><br><span class="line">      <span class="keyword">const</span> library = <span class="built_in">this</span>._selectRandomLibrary();</span><br><span class="line">      <span class="built_in">this</span>.store.createRecord(<span class="string">&#x27;book&#x27;</span>)</span><br><span class="line">        .randomize(author, library)</span><br><span class="line">        .save();</span><br><span class="line">      author.save();</span><br><span class="line">      library.save();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  _selectRandomLibrary() &#123;</span><br><span class="line">    <span class="keyword">const</span> libraries = <span class="built_in">this</span>.get(<span class="string">&#x27;libraries&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> librariesCounter = libraries.get(<span class="string">&#x27;length&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a new array from IDs</span></span><br><span class="line">    <span class="keyword">const</span> libraryIds = libraries.map(<span class="function">(<span class="params">lib</span>) =&gt;</span> &#123;<span class="keyword">return</span> lib.get(<span class="string">&#x27;id&#x27;</span>);&#125;);</span><br><span class="line">    <span class="keyword">const</span> randomNumber = Faker.random.number(librariesCounter<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> randomLibrary = libraries.findBy(<span class="string">&#x27;id&#x27;</span>, libraryIds[randomNumber]);</span><br><span class="line">    <span class="keyword">return</span> randomLibrary;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  _destroyAll(records) &#123;</span><br><span class="line">    records.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      item.destroyRecord();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>重启项目，进入到<a href="http://localhost:4200/admin/seeder">http://localhost:4200/admin/seeder</a>。在输入框内输入要生成的测试数据条数，然后点击右边的蓝色按钮，如果生成成功可以在按钮右边看到绿色的“created”提示文字。如下图：</p><p><img src="/image/blog-image/186.png" alt="生成成功"></p><p>然后到firebase上查看。可以看到数据已经存在了，并且是随机的数据。</p><p><img src="/image/blog-image/187.png" alt="firebase数据截图1"></p><p><img src="/image/blog-image/188.png" alt="firebase数据截图2"></p><p>并且是实现了数据表之间的关联关系，比如一个<code>author</code>对应多个<code>book</code>，如下图。</p><p><img src="/image/blog-image/189.png" alt="author一对多book"></p><p>或者是直接在<a href="http://localhost:4200/libraries">http://localhost:4200/libraries</a>下查看。</p><p>在接下来的一篇文章中将介绍如何遍历关联关系中的对象，使用起来也是非常简单的，直接使用面向对象的方式遍历即可。</p><h2 id="家庭作业"><a href="#家庭作业" class="headerlink" title="家庭作业"></a>家庭作业</h2><p>本篇的家庭作业仍然是好好理解组件！参照下面的文章认真学习、理解组件。</p><ol><li><a href="http://blog.ddlisting.com/2016/04/07/ember-js-ru-men-zhi-nan-zhi-er-shi-ba-zu-jian-ding-yi/">Ember.js 入门指南之二十八组件定义</a></li><li><a href="http://blog.ddlisting.com/2016/04/07/ember-js-ru-men-zhi-nan-zhi-er-shi-jiu-shu-xing-chuan-di/">Ember.js 入门指南之二十九属性传递</a></li><li><a href="http://blog.ddlisting.com/2016/04/07/ember-js-ru-men-zhi-nan-zhi-san-shi-bao-guo-nei-rong/">Ember.js 入门指南之三十包裹内容</a></li><li><a href="http://blog.ddlisting.com/2016/04/07/ember-js-ru-men-zhi-nan-zhi-san-shi-zi-ding-yi-bao-guo-zu-jian-de-htmlbiao-qian/">Ember.js 入门指南之三十一自定义包裹组件的HTML标签</a></li><li><a href="http://blog.ddlisting.com/2016/04/07/chu-li-shi-jian/">Ember.js 入门指南之三十二处理事件</a></li><li><a href="http://blog.ddlisting.com/2016/04/07/action-chong-fa-bian-hua-2/">Ember.js 入门指南之三十三action触发变化</a></li></ol><br>为了照顾懒人我把完整的代码放在[GitHub](https://github.com/ubuntuvim/library-app)上，如有需要请可以拿来参照参照。博文经过多次修改，博文上的代码与github代码可能有出入，不过影响不大！如果你觉得博文对你有点用，请在github项目上给我点个`star`吧。您的肯定对我来说是最大的动力！！]]></content>
      
      
      
        <tags>
            
            <tag> Emberjs </tag>
            
            <tag> Ember-Demo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
